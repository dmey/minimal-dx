var tipuesearch = {"pages":[{"title":" MinimalDX ","text":"MinimalDX This is home to the API documentation for the Minimal DX library, for the project's website, please go to https://github.com/dmey/minimal-dx . Developer Info dmey","tags":"home","loc":"index.html"},{"title":"minimal_dx_cooling.f90 – MinimalDX","text":"This file depends on sourcefile~~minimal_dx_cooling.f90~~EfferentGraph sourcefile~minimal_dx_cooling.f90 minimal_dx_cooling.f90 sourcefile~psychro_wrapper.f90 psychro_wrapper.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~psychro_wrapper.f90 sourcefile~minimal_dx_fan.f90 minimal_dx_fan.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~minimal_dx_fan.f90 sourcefile~eplus_psychro.f90 eplus_psychro.f90 sourcefile~psychro_wrapper.f90->sourcefile~eplus_psychro.f90 sourcefile~psychrolib.f90 psychrolib.f90 sourcefile~psychro_wrapper.f90->sourcefile~psychrolib.f90 sourcefile~eplus_psychro.f90->sourcefile~psychrolib.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~minimal_dx_cooling.f90~~AfferentGraph sourcefile~minimal_dx_cooling.f90 minimal_dx_cooling.f90 sourcefile~minimal_dx_cooling_driver.f90 minimal_dx_cooling_driver.f90 sourcefile~minimal_dx_cooling_driver.f90->sourcefile~minimal_dx_cooling.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules MinimalDXCooling Source Code minimal_dx_cooling.f90 Source Code ! MinimalDX version 0.1.4 (https://www.github.com/dmey/minimal-dx). ! ! This module contains a simplified EnergyPlus subroutine for calculating the performance ! of a DX cooling coil `CalcDoe2DXCoil`. Modified by D. Meyer and R. Raustad (2018). ! ! Copyright notice ! EnergyPlus, Copyright (c) 1996-2019, The Board of Trustees of the University of Illinois, ! The Regents of the University of California, through Lawrence Berkeley National Laboratory ! (subject to receipt of any required approvals from the U.S. Dept. of Energy), Oak Ridge ! National Laboratory, managed by UT-Battelle, Alliance for Sustainable Energy, LLC, and other ! contributors. All rights reserved. ! ! NOTICE: This Software was developed under funding from the U.S. Department of Energy and the ! U.S. Government consequently retains certain rights. As such, the U.S. Government has been ! granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable, ! worldwide license in the Software to reproduce, distribute copies to the public, prepare ! derivative works, and perform publicly and display publicly, and to permit others to do so. ! ! Redistribution and use in source and binary forms, with or without modification, are permitted ! provided that the following conditions are met: ! ! (1) Redistributions of source code must retain the above copyright notice, this list of !     conditions and the following disclaimer. ! ! (2) Redistributions in binary form must reproduce the above copyright notice, this list of !     conditions and the following disclaimer in the documentation and/or other materials !     provided with the distribution. ! ! (3) Neither the name of the University of California, Lawrence Berkeley National Laboratory, !     the University of Illinois, U.S. Dept. of Energy nor the names of its contributors may be !     used to endorse or promote products derived from this software without specific prior !     written permission. ! ! (4) Use of EnergyPlus(TM) Name. If Licensee (i) distributes the software in stand-alone form !     without changes from the version obtained under this License, or (ii) Licensee makes a !     reference solely to the software portion of its product, Licensee must refer to the !     software as \"EnergyPlus version X\" software, where \"X\" is the version number Licensee !     obtained under this License and may not use a different name for the software. Except as !     specifically required in this Section (4), Licensee shall not use in a company name, a !     product name, in advertising, publicity, or other promotional activities any name, trade !     name, trademark, logo, or other designation of \"EnergyPlus\", \"E+\", \"e+\" or confusingly !     similar designation, without the U.S. Department of Energy's prior written consent. ! ! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR ! IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY ! AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR ! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR ! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR ! SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ! THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR ! OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE ! POSSIBILITY OF SUCH DAMAGE. module MinimalDXCooling !+ Contains a simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil. implicit none private public CalcMinimalDXCooling contains subroutine CalcMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , PartLoadRatio , RatedAirMassFlowRate , & ! I OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , SensCoolingEnergyRate , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) ! O !+ Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil. !+ Adapted from EnergyPlus `CalcDoe2DXCoil` by D.Meyer and R. Raustad (2018). !+ !+####ORIGINAL ENERGY PLUS SUBROUTINE INFORMATION: !+       AUTHOR         Fred Buhl !+       DATE WRITTEN   May 2000 !+       MODIFIED       Shirey, Feb/October 2001, Feb/Mar 2004 !+                      Feb 2005 M. J. Witte, GARD Analytics, Inc. !+                      Add new coil type COIL:DX:MultiMode:CoolingEmpirical: !+                      April 2010 Chandan Sharma, FSEC, Added basin heater !+       RE-ENGINEERED  Don Shirey, Aug/Sept 2000 !+ !+ !+####PURPOSE OF THIS SUBROUTINE: !+ Calculates the air-side performance and electrical energy use of a direct- !+ expansion, air-cooled cooling unit. !+ !+####METHODOLOGY EMPLOYED: !+ This routine simulates the performance of air-cooled DX cooling equipment. !+ The routine requires the user to enter the total cooling capacity, sensible heat ratio, !+ and COP for the unit at ARI 210/240 rating conditions (26.67C [80F] dry-bulb, 19.44C [67F] !+ wet-bulb air entering the cooling coil, 35C [95F] dry-bulb air entering the outdoor !+ condenser. Since different manufacturer's rate their equipment at different air flow rates, !+ the supply air flow rate corresponding to the rated capacities and rated COP must also be !+ entered (should be between 300 cfm/ton and 450 cfm/ton). The rated information entered by !+ the user should NOT include the thermal or electrical impacts of the supply air fan, as !+ this is addressed by another module. !+ !+ With the rated performance data entered by the user, the model employs some of the !+ DOE-2.1E curve fits to adjust the capacity and efficiency of the unit as a function !+ of entering air temperatures and supply air flow rate (actual vs rated flow). The model !+ does NOT employ the exact same methodology to calculate performance as DOE-2, although !+ some of the DOE-2 curve fits are employed by this model. !+ !+ The model checks for coil dryout conditions, and adjusts the calculated performance !+ appropriately. !+ !+####REFERENCES: !+ ASHRAE HVAC 2 Toolkit page 4-81. !+ !+ Henderson, H.I. Jr., K. Rengarajan and D.B. Shirey, III. 1992.The impact of comfort !+ control on air conditioner energy use in humid climates. ASHRAE Transactions 98(2): !+ 104-113. !+ !+ Henderson, H.I. Jr., Danny Parker and Y.J. Huang. 2000.Improving DOE-2's RESYS routine: !+ User Defined Functions to Provide More Accurate Part Load Energy Use and Humidity !+ Predictions. Proceedings of ACEEE Conference. !+ !+####LINKS: !+ !+ 1. !+ <http://bigladdersoftware.com/epx/docs/8-7/engineering-reference/coils.html#single-speed-electric-dx-air-cooling-coil> !+ !+ 2. !+ <https://github.com/NREL/EnergyPlusRelease/blob/1ba8474958dbac5a371362731b23310d40e0635d/SourceCode/DXCoil.f90#L8434> use PsychroWrapper , only : InitPsychrometrics , GetMoistAirDensity , GetTWetBulbFromHumRatio , & GetMoistAirEnthalpy , GetHumRatioFromEnthalpyAndTDryBulb , & GetTDryBulbFromEnthalpyAndHumRatio , PsyTsatFnHPb use MinimalDXFan , only : GetOnOffFan ! Subroutine arguments real , intent ( in ) :: OutdoorTDryBulb !+ Outdoor dry bulb air temperature `[°C]` real , intent ( in ) :: OutdoorHumRatio ! Currently not used but maybe used in the future for air-to-water types. !+ Outdoor air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: OutdoorPressure !+ Outdoor barometric pressure `[Pa]` real , intent ( in ) :: InletTDryBulb !+ Indoor (inlet) dry bulb air temperature `[°C]` real , intent ( in ) :: InletHumRatio !+ Indoor (inlet) air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: RatedCOP !+ Rated Coefficient Of Performance (COP) `[1]` real , intent ( in ) :: RatedTotCap !+ Rated (total) system capacity `[W]` real , intent ( in ) :: PartLoadRatio !+ Part load ratio (PLR). This is the actual cooling effect produced by the AC unit divided by the maximum !+ cooling effect available - i.e. `PLR = (SensibleCoolingLoad / SensCoolingEnergyRate)` `[1]` real , intent ( in ) :: RatedAirMassFlowRate !+ Rated air mass flow rate `[kg s⁻¹]` real , intent ( out ) :: OutletTemperature !+ Actual (calculated) outlet air dry bulb temperature existing the cooling coil `[°C]` real , intent ( out ) :: OutletHumRatio !+ Actual (calculated) outlet air humidity ratio existing the cooling coil `[kgH₂O kgAIR⁻¹]` real , intent ( out ) :: ElecCoolingPower !+ Calculated electrical power consumed by the DX unit `[W]` real , intent ( out ) :: SensCoolingEnergyRate !+ Sensible cooling power used to calculate the PLR. This is the maximum amount of sensible heat rate that the coil !+ is capable of extracting from the indoor environment for the specified conditions. `[W]` real , intent ( out ) :: LatCoolingEnergyRate ! Total latent cooling energy rate extracted by the coil from the indoor environment `[J kg⁻¹]` real , intent ( out ) :: TotalCoolingEnergyRate !+ Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) `[W]` real , intent ( out ) :: TotalSensibleHeatOut !+ Total power rejected by the evaporator into the outdoor environment !+ i.e. TotalCoolingEnergyRate + ElecCoolingPower `[W]` ! Local variables integer :: Counter ! Counter for dry evaporator iterations                             [1] real :: IndoorAirDensity ! Air density of moist air                                          [kg m⁻3] real :: InletTWetBulb ! Indoor (inlet) air wet bulb temperature                           [°C] real :: hDelta ! Change in air enthalpy across the cooling coil                    [J kg⁻¹] real :: hADP ! Apparatus dew point (ADP) enthalpy                                [J kg⁻¹] real :: wADP ! Apparatus dew point (ADP) humidity ratio                          [kgH₂O kgAIR⁻¹] real :: tADP ! Temperature of air at ADP conditions                              [°C] real :: hTinwADP ! Enthalpy at inlet dry-bulb and wADP                               [J kg⁻¹] real :: InletAirHumRatTemp ! Inlet air humidity ratio used in ADP/BF loop                      [kgH₂O kgAIR⁻¹] real :: hTinwout ! Enthalpy at inlet dry-bulb and outlet humidity ratio              [J kg⁻¹] real :: InletAirEnthalpy ! Enthalpy at inlet dry-bulb and outlet humidity ratio              [J kg⁻¹] real :: werror ! Deviation of humidity ratio in dry evaporator iteration loop      [1] real :: CBF ! Calculated coil bypass factor using relation CBF = exp(-NTU)      [1] real :: ACCoolingCAPFTemp ! Total cooling capacity modifier curve function of temperature     [1] real :: ACCoolingCAPFFF ! Total cooling capacity modifier curve function of flow fraction   [1] real :: ACCoolingEIRFTemp ! Energy input ratio modifier curve function of temperature         [1] real :: ACCoolingEIRFFF ! Energy input ratio modifier curve function of flow fraction       [1] real :: ACCoolingPLFFPLR ! Part load factor, accounts for thermal lag at compressor ! startup, used in power calculation                                [1] real :: SHR ! Actual coil sensible heat rate                                    [W] real :: A0 ! NTU * air mass flow rate, used in CBF calculation                 [1] real :: ADiff ! Used for exponential (-A0/AirMassFlowRate)                        [1] real :: FullLoadOutAirEnth ! Outlet air enthalpy at full load conditions                       [J kg⁻¹] real :: FullLoadOutAirHumRat ! Outlet air humidity ratio at full load conditions                 [kgH₂O kgAIR⁻¹] real :: FullLoadOutAirTemp ! Outlet dry bulb air temperature at full load conditions           [°C] real :: OutletAirEnthalpy ! Supply air enthalpy (average value for constant fan)              [J kg⁻¹] real :: MinAirHumRat ! Minimum value between the inlet air humidity ratio and ! the outlet air humidity ratio                                     [kgH₂O kgAIR⁻¹] real :: AirMassFlowRate ! Air mass flow rate use in the subroutine for calculations         [kg s⁻¹] real :: EIR ! EIR at part load and off rated conditions                         [1] real :: TotalCoolingCapacity ! Gross total cooling capacity at off-rated conditions              [W] real :: FanPower ! Power of the fan to be simulated                                  [W] real :: CoolingCoilRuntimeFraction ! Run time fraction of the DX cooling unit                          [1] ! Local parameters integer , parameter :: MaxIter = 30 ! Maximum number of iterations for dry evaporator calculations      [1] real , parameter :: RF = 0.4 ! Relaxation factor for dry evaporator iterations                   [1] real , parameter :: TOLERANCE = 0.01 ! Error tolerance for dry evaporator iterations                     [1] real , parameter :: RatedCBF = 0.1 ! Coil bypass factor at off rated conditions                        [1] FIXME: temp value for now. real , parameter :: ExpLowerLimit = - 2 0. ! Exponent lower limit                                              [1] real , parameter :: AirFlowRatio = 1. ! Ratio of compressor on airflow to average time-step airflow ! Set to 1. Used only by DX coils with different air flow during ! cooling and when no cooling is ! required (constant fan, fan speed changes)                        [1] integer , parameter :: FanMode = 0 ! Mode of operation: 1 for on, 0 for off                            [1] real , parameter :: MotEff = 0.75 ! Fan motor efficiency                                              [1] real , parameter :: MotInAirFrac = 1. ! Fraction of motor heat entering air stream                        [1] ! Performance curves coefficients ! Reference: !https://github.com/NREL/EnergyPlus/blob/develop/datasets/ResidentialACsAndHPsPerfCurves.idf#L33-L123 ! Coefficients for ACCoolingCAPFTemp -- Total cooling capacity function of temperature curve (bi-quadratic). ! Minimum and maximum values of x and y are 0 and 50 respectively with curve output in rage 0 to 5 real , parameter :: A1 = 1.5509 ! Coefficient1 Constant real , parameter :: B1 = - 0.07505 ! Coefficient2 x real , parameter :: C1 = 0.0031 ! Coefficient3 x**2 real , parameter :: D1 = 0.0024 ! Coefficient4 y real , parameter :: E1 = - 0.00005 ! Coefficient5 y**2 real , parameter :: F1 = - 0.00043 ! Coefficient6 x*y real , parameter :: ACCoolingCAPFTempMin = 0.63 ! Minimum curve output value real , parameter :: ACCoolingCAPFTempMax = 1.57 ! Maximum curve output value ! Coefficients for ACCoolingCAPFFF -- total cooling capacity function of flow fraction curve (quadratic). ! Minimum and maximum values of x are 0 and 1.5 respectively with curve output in range 0 to 2 real , parameter :: A2 = 0.71861 ! Coefficient1 Constant real , parameter :: B2 = 0.4101 ! Coefficient2 x real , parameter :: C2 = - 0.12871 ! Coefficient3 x**2 real , parameter :: ACCoolingCAPFFFMin = 0. ! Minimum curve output value real , parameter :: ACCoolingCAPFFFMax = 2. ! Maximum curve output value ! Coefficients for ACCoolingEIRFTemp -- Energy input ratio function of temperature curve (bi-quadratic). ! Minimum and maximum values of x and y are 0 and 50 respectively with curve output in rage 0 to 5 real , parameter :: A3 = - 0.30428 ! Coefficient1 Constant real , parameter :: B3 = 0.11805 ! Coefficient2 x real , parameter :: C3 = - 0.00342 ! Coefficient3 x**2 real , parameter :: D3 = - 0.00626 ! Coefficient4 y real , parameter :: E3 = 0.0007 ! Coefficient5 y**2 real , parameter :: F3 = - 0.00047 ! Coefficient6 x*y real , parameter :: ACCoolingEIRFTempMin = 0.83 ! Minimum curve output value real , parameter :: ACCoolingEIRFTempMax = 1.21 ! Maximum curve output value ! Coefficients for ACCoolingEIRFFF -- Energy input ratio function of flow fraction curve (quadratic). ! Minimum and maximum values of x are 0 and 1.5 respectively with curve output in range 0 to 2 real , parameter :: A4 = 1.32299905 ! Coefficient1 Constant real , parameter :: B4 = - 0.477711207 ! Coefficient2 x real , parameter :: C4 = 0.154712157 ! Coefficient3 x**2 real , parameter :: ACCoolingEIRFFFMin = 0. ! Minimum curve output value real , parameter :: ACCoolingEIRFFFMax = 2. ! Maximum curve output value ! Part Load Fraction curve (quadratic) as a function of Part Load Ratio is default from ! Table 6. BEopt AC Rated Value Inputs of NREL report NREL/TP-5500-56354 ! Minimum and maximum values of x are 0 and 1.5 respectively real , parameter :: A5 = 0.9 !- Coefficient1 Constant real , parameter :: B5 = 0.1 !- Coefficient2 x real , parameter :: C5 = 0. !- Coefficient3 x**2 call InitPsychrometrics () Counter = 0 ! Calculate wet bulb temperature entering the cooling coil InletTWetBulb = GetTWetBulbFromHumRatio ( InletTDryBulb , InletHumRatio , OutdoorPressure ) ! Inlet Moist air enthalpy InletAirEnthalpy = GetMoistAirEnthalpy ( InletTDryBulb , InletHumRatio ) ! Calculate air density of indoor air using outdoor pressure. Assume indoor pressure = outdoor pressure IndoorAirDensity = GetMoistAirDensity ( InletTDryBulb , InletHumRatio , OutdoorPressure ) ! Check that the part load ratio is greater than 0 (i.e. DX unit is off) else just pass through conditions. if ( PartLoadRatio > 0 ) then ! Set the rated mass flow rate equal the mass flow rate used in the subroutine then check ! that the air mass flow rate is within bounds else set air mass flow rate accordingly AirMassFlowRate = RatedAirMassFlowRate if ( AirMassFlowRate / IndoorAirDensity / RatedTotCap < 0.00004027 ) then AirMassFlowRate = 0.00004027 * RatedTotCap * IndoorAirDensity print * , 'Warning: air mass flow rate must be greater than 0.00004027m3/s/W' print * , 'Resetting the air mass flow rate to: ' , AirMassFlowRate , ' kg/s' else if ( AirMassFlowRate / IndoorAirDensity / RatedTotCap > 0.00006041 ) then AirMassFlowRate = 0.00006041 * RatedTotCap * IndoorAirDensity print * , 'Warning: air mass flow rate must be lower than 0.00006041m3/s/W' print * , 'Resetting the air mass flow rate to: ' , AirMassFlowRate , ' kg/s' end if ! Modify the inlet air temperature to account for heat added by the fan motor ! The fan power is assumed to be 0.04151 W/W of the rated capacity FanPower = 0.04151 * RatedTotCap InletAirEnthalpy = GetOnOffFan ( FanMode , MotEff , FanPower , MotInAirFrac , InletAirEnthalpy , AirMassFlowRate ) ! Adjust coil bypass factor for actual air flow rate. Use relation CBF = exp(-NTU) where ! NTU = A0/(m*cp). Relationship models the cooling coil as a heat exchanger with Cmin/Cmax = 0. if ( RatedCBF > 0. ) then A0 = - log ( RatedCBF ) * RatedAirMassFlowRate else A0 = 0. end if ADiff = - A0 / AirMassFlowRate if ( ADiff >= ExpLowerLimit ) then CBF = exp ( ADiff ) else CBF = 0. end if ! Get total capacity modifying factor (function of temperature) for off-rated conditions ! InletAirHumRat may be modified in this ADP/BF loop, use temporary variable for calculations InletAirHumRatTemp = InletHumRatio ! Assuming an air-cooled condenser only. do ! Total cooling capacity modifier curve function of temperature ACCoolingCAPFTemp = A1 + B1 * InletTWetBulb + C1 * InletTWetBulb ** 2 & + D1 * OutdoorTDryBulb + E1 * OutdoorTDryBulb ** 2 & + F1 * InletTWetBulb * OutdoorTDryBulb ! Limit the cooling capacity modifier curve function of temperature to the its set bounds if ( ACCoolingCAPFTemp < ACCoolingCAPFTempMin ) then ACCoolingCAPFTemp = ACCoolingCAPFTempMin print * , 'Warning: the total cooling capacity modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFTempMin else if ( ACCoolingCAPFTemp > ACCoolingCAPFTempMax ) then ACCoolingCAPFTemp = ACCoolingCAPFTempMax print * , 'Warning: the total cooling capacity modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFTempMax end if ! Total cooling capacity modifier curve function of flow fraction ACCoolingCAPFFF = A2 + B2 * AirFlowRatio + C2 * AirFlowRatio ** 2 ! Limit the cooling capacity modifier curve to the its set bounds if ( ACCoolingCAPFFF < ACCoolingCAPFFFMin ) then ACCoolingCAPFFF = ACCoolingCAPFFFMin print * , 'Warning: the total cooling capacity modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFFFMin else if ( ACCoolingCAPFFF > ACCoolingCAPFFFMax ) then ACCoolingCAPFFF = ACCoolingCAPFFFMax print * , 'Warning: the total cooling capacity modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFFFMax end if ! Calculate the total cooling capacity TotalCoolingCapacity = RatedTotCap * ACCoolingCAPFTemp * ACCoolingCAPFFF ! Calculate apparatus dew point conditions using TotalCoolingCapacity and CBF hDelta = TotalCoolingCapacity / AirMassFlowRate ! Apparatus dew point enthalpy hADP = InletAirEnthalpy - hDelta / ( 1. - CBF ) ! Apparatus dew point saturated temperature tADP = PsyTsatFnHPb ( hADP , OutdoorPressure ) ! Apparatus dew point humidity ratio wADP = GetHumRatioFromEnthalpyAndTDryBulb ( hADP , tADP ) ! Apparatus dew point enthalpy hTinwADP = GetMoistAirEnthalpy ( InletTDryBulb , wADP ) if ( ( InletAirEnthalpy - hADP ) > 1.d-10 ) then SHR = min ( ( hTinwADP - hADP ) / ( InletAirEnthalpy - hADP ), 1. ) else SHR = 1. end if ! Check for dry evaporator conditions (win < wadp) if ( wADP > InletAirHumRatTemp . or . ( Counter >= 1 . and . Counter < MaxIter ) ) then if ( InletAirHumRatTemp == 0. ) InletAirHumRatTemp = 0.00001 werror = ( InletAirHumRatTemp - wADP ) / InletAirHumRatTemp ! Increase InletAirHumRatTemp at constant InletAirTemp to find coil dry-out point. Then use the ! capacity at the dry-out point to determine exiting conditions from coil. This is required ! since the ACCoolingCAPFTemp doesn't work properly with dry-coil conditions. InletAirHumRatTemp = RF * wADP + ( 1. - RF ) * InletAirHumRatTemp InletTWetBulb = GetTWetBulbFromHumRatio ( InletTDryBulb , InletAirHumRatTemp , OutdoorPressure ) Counter = Counter + 1 if ( abs ( werror ) > TOLERANCE ) then cycle else exit end if else exit end if end do ACCoolingPLFFPLR = A5 + B5 * PartLoadRatio + C5 * PartLoadRatio ** 2 if ( ACCoolingPLFFPLR < 0.7 ) then ACCoolingPLFFPLR = 0.7 end if CoolingCoilRuntimeFraction = PartLoadRatio / ACCoolingPLFFPLR ! Calculate full load output conditions if ( SHR > 1. . or . Counter > 0 ) SHR = 1. FullLoadOutAirEnth = InletAirEnthalpy - TotalCoolingCapacity / AirMassFlowRate hTinwout = InletAirEnthalpy - ( 1. - SHR ) * hDelta if ( SHR < 1. ) then FullLoadOutAirHumRat = GetHumRatioFromEnthalpyAndTDryBulb ( hTinwout , InletTDryBulb ) else FullLoadOutAirHumRat = InletHumRatio end if FullLoadOutAirTemp = GetTDryBulbFromEnthalpyAndHumRatio ( FullLoadOutAirEnth , FullLoadOutAirHumRat ) ! Check for saturation error and modify temperature at constant enthalpy if ( FullLoadOutAirTemp < PsyTsatFnHPb ( FullLoadOutAirEnth , OutdoorPressure ) ) then FullLoadOutAirTemp = PsyTsatFnHPb ( FullLoadOutAirEnth , OutdoorPressure ) FullLoadOutAirHumRat = GetHumRatioFromEnthalpyAndTDryBulb ( FullLoadOutAirEnth , FullLoadOutAirTemp ) end if ! Continuos fan, cycling compressor OutletAirEnthalpy = ( ( PartLoadRatio * AirFlowRatio ) * FullLoadOutAirEnth + & ( 1. - ( PartLoadRatio * AirFlowRatio ) ) * InletAirEnthalpy ) OutletHumRatio = ( ( PartLoadRatio * AirFlowRatio ) * FullLoadOutAirHumRat + & ( 1. - ( PartLoadRatio * AirFlowRatio ) ) * InletHumRatio ) OutletTemperature = GetTDryBulbFromEnthalpyAndHumRatio ( OutletAirEnthalpy , OutletHumRatio ) ! Check for saturation error and modify temperature at constant enthalpy if ( OutletTemperature < PsyTsatFnHPb ( OutletAirEnthalpy , OutdoorPressure ) ) then OutletTemperature = PsyTsatFnHPb ( OutletAirEnthalpy , OutdoorPressure ) OutletHumRatio = GetHumRatioFromEnthalpyAndTDryBulb ( OutletAirEnthalpy , OutletTemperature ) end if ! Energy input ratio modifier curve function of temperature ACCoolingEIRFTemp = A3 + B3 * InletTWetBulb + C3 * InletTWetBulb ** 2 & + D3 * OutdoorTDryBulb + E3 * OutdoorTDryBulb ** 2 & + F3 * InletTWetBulb * OutdoorTDryBulb ! Limit the energy input ratio modifier curve function of temperature to its set bounds if ( ACCoolingEIRFTemp < ACCoolingEIRFTempMin ) then ACCoolingEIRFTemp = ACCoolingEIRFTempMin print * , 'Warning: the energy input ratio modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFTempMin else if ( ACCoolingEIRFTemp > ACCoolingEIRFTempMax ) then ACCoolingEIRFTemp = ACCoolingEIRFTempMax print * , 'Warning: the energy input ratio modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFTempMax end if ! Energy input ratio modifier curve function of flow fraction ACCoolingEIRFFF = A4 + B4 * AirFlowRatio + C4 * AirFlowRatio ** 2 ! Limit the energy input ratio modifier curve function of flow fraction to its set bounds if ( ACCoolingEIRFFF < ACCoolingEIRFFFMin ) then ACCoolingEIRFFF = ACCoolingEIRFFFMin print * , 'Warning: the energy input ratio modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFFFMin else if ( ACCoolingEIRFFF > ACCoolingEIRFFFMax ) then ACCoolingEIRFFF = ACCoolingEIRFFFMax print * , 'Warning: the energy input ratio modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFFFMax end if ! Calculate the actual EIR for the DX unit under specified conditions EIR = ( 1. / RatedCOP ) * ACCoolingEIRFFF * ACCoolingEIRFTemp ! Calculate the electrical power consumed by the DX unit (compressors plus outdoor condenser fans) ElecCoolingPower = TotalCoolingCapacity * EIR * CoolingCoilRuntimeFraction TotalCoolingEnergyRate = AirMassFlowRate * ( InletAirEnthalpy - OutletAirEnthalpy ) ! Calculate the total sensible cooling energy extracted by the DX coils MinAirHumRat = min ( InletHumRatio , OutletHumRatio ) SensCoolingEnergyRate = AirMassFlowRate * & ( GetMoistAirEnthalpy ( InletTDryBulb , MinAirHumRat ) - & GetMoistAirEnthalpy ( OutletTemperature , MinAirHumRat ) ) ! Don't let sensible capacity be greater than total capacity if ( SensCoolingEnergyRate > TotalCoolingEnergyRate ) then SensCoolingEnergyRate = TotalCoolingEnergyRate print * , 'Warning: the sensible capacity is greater than the total capacity' print * , 'The sensible capacity has been set to equal the total capacity' end if ! Calculation of the latent cooling power LatCoolingEnergyRate = TotalCoolingEnergyRate - SensCoolingEnergyRate ! Calculation of total available capacity - this is also the total amount ! of thermal energy rejected by the evaporator (external unit) TotalSensibleHeatOut = TotalCoolingEnergyRate + ElecCoolingPower ! If/when the fan is on, we add the power consumed by the fan to the electrical power consumed by the DX unit if ( FanMode == 1 ) ElecCoolingPower = ElecCoolingPower + FanPower else ! The DX coil is off. Pass through conditions OutletTemperature = InletTDryBulb OutletHumRatio = InletHumRatio ElecCoolingPower = 0. SensCoolingEnergyRate = 0. LatCoolingEnergyRate = 0. TotalCoolingEnergyRate = 0. TotalSensibleHeatOut = 0. end if end subroutine CalcMinimalDXCooling end module MinimalDXCooling","tags":"","loc":"sourcefile/minimal_dx_cooling.f90.html"},{"title":"minimal_dx_cooling_driver.f90 – MinimalDX","text":"This file depends on sourcefile~~minimal_dx_cooling_driver.f90~~EfferentGraph sourcefile~minimal_dx_cooling_driver.f90 minimal_dx_cooling_driver.f90 sourcefile~minimal_dx_cooling.f90 minimal_dx_cooling.f90 sourcefile~minimal_dx_cooling_driver.f90->sourcefile~minimal_dx_cooling.f90 sourcefile~psychro_wrapper.f90 psychro_wrapper.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~psychro_wrapper.f90 sourcefile~minimal_dx_fan.f90 minimal_dx_fan.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~minimal_dx_fan.f90 sourcefile~eplus_psychro.f90 eplus_psychro.f90 sourcefile~psychro_wrapper.f90->sourcefile~eplus_psychro.f90 sourcefile~psychrolib.f90 psychrolib.f90 sourcefile~psychro_wrapper.f90->sourcefile~psychrolib.f90 sourcefile~eplus_psychro.f90->sourcefile~psychrolib.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules MinimalDXCoolingDriver Source Code minimal_dx_cooling_driver.f90 Source Code ! MinimalDX version 0.1.4 (https://www.github.com/dmey/minimal-dx). ! Copyright 2018-2020 D. Meyer and R. Raustad. Licensed under MIT. module MinimalDXCoolingDriver !+ Contains a simplified EnergyPlus subroutine for simulating the performance of a DX cooling coil. implicit none private public SimMinimalDXCooling contains subroutine SimMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , SensibleCoolingLoad , RatedAirMassFlowRate , & ! I COP , TotalCoolingCapacity , & ! O OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) ! O !+ Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil. !+ This is the subroutine to call from your program. use MinimalDXCooling , only : CalcMinimalDXCooling ! Subroutine arguments real , intent ( in ) :: OutdoorTDryBulb !+ Outdoor dry bulb air temperature `[°C]` real , intent ( in ) :: OutdoorHumRatio !+ Outdoor air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: OutdoorPressure !+ Outdoor barometric pressure `[Pa]` real , intent ( in ) :: InletTDryBulb !+ Indoor (inlet) dry bulb air temperature `[°C]` real , intent ( in ) :: InletHumRatio !+ Indoor (inlet) air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: RatedCOP !+ Rated Coefficient Of Performance (COP) `[1]` real , intent ( in ) :: RatedTotCap !+ Rated (total) system capacity `[W]` real , intent ( in ) :: SensibleCoolingLoad !+ Building sensible load to be met `[W]` real , intent ( in ) :: RatedAirMassFlowRate !+ rated air mass flow rate `[kg s⁻¹]` real , intent ( out ) :: COP !+ Actual (calculated) Coefficient Of Performance (COP) `[1]` real , intent ( out ) :: TotalCoolingCapacity !+ Actual (calculated) total system capacity `[W]` real , intent ( out ) :: OutletTemperature !+ Actual (calculated) outlet air dry bulb temperature existing the cooling coil `[°C]` real , intent ( out ) :: OutletHumRatio !+ Actual (calculated) outlet air humidity ratio existing the cooling coil `[kgH₂O kgAIR⁻¹]` real , intent ( out ) :: ElecCoolingPower !+ Calculated electrical power consumed by the DX unit `[W]` real , intent ( out ) :: LatCoolingEnergyRate ! Total latent cooling energy rate extracted by the coil from the indoor environment `[J kg⁻¹]` real , intent ( out ) :: TotalCoolingEnergyRate !+ Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) `[W]` real , intent ( out ) :: TotalSensibleHeatOut !+ Total power rejected by the evaporator into the outdoor environment !+ i.e. TotalCoolingEnergyRate + ElecCoolingPower `[W]` ! Local variables real :: PartLoadRatio real :: SensCoolingEnergyRate !+ Sensible cooling power used to calculate the PLR. This is the maximum amount of sensible heat rate that the coil !+ is capable of extracting from the indoor environment for the specified conditions. `[W]` ! Get SensibleCoolingLoad and SensCoolingEnergyRates to calculate actual PartLoadRatio PartLoadRatio = 1. call CalcMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , PartLoadRatio , RatedAirMassFlowRate , & ! I OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , SensCoolingEnergyRate , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) ! Calculate PartLoadRatio from previous call PartLoadRatio = SensibleCoolingLoad / SensCoolingEnergyRate ! Keep PartLoadRatio  bounded between 0 and 1 if ( PartLoadRatio < 0. ) PartLoadRatio = 0. if ( PartLoadRatio > 1. ) PartLoadRatio = 1. ! Call CalcDoe2DXCoil again with correct part load ratio call CalcMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , PartLoadRatio , RatedAirMassFlowRate , & ! I OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , SensCoolingEnergyRate , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) COP = TotalCoolingEnergyRate / ElecCoolingPower TotalCoolingCapacity = TotalCoolingEnergyRate / PartLoadRatio end subroutine SimMinimalDXCooling end module MinimalDXCoolingDriver","tags":"","loc":"sourcefile/minimal_dx_cooling_driver.f90.html"},{"title":"minimal_dx_fan.f90 – MinimalDX","text":"Files dependent on this one sourcefile~~minimal_dx_fan.f90~~AfferentGraph sourcefile~minimal_dx_fan.f90 minimal_dx_fan.f90 sourcefile~minimal_dx_cooling.f90 minimal_dx_cooling.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~minimal_dx_fan.f90 sourcefile~minimal_dx_cooling_driver.f90 minimal_dx_cooling_driver.f90 sourcefile~minimal_dx_cooling_driver.f90->sourcefile~minimal_dx_cooling.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules MinimalDXFan Source Code minimal_dx_fan.f90 Source Code ! MinimalDX version 0.1.4 (https://www.github.com/dmey/minimal-dx). ! ! Description ! This module currently contains one function (SimpleFanOnOff) for simulating a simple on/off fan. ! Modified by D. Meyer and R. Raustad (2018). ! ! Copyright notice ! EnergyPlus, Copyright (c) 1996-2019, The Board of Trustees of the University of Illinois, ! The Regents of the University of California, through Lawrence Berkeley National Laboratory ! (subject to receipt of any required approvals from the U.S. Dept. of Energy), Oak Ridge ! National Laboratory, managed by UT-Battelle, Alliance for Sustainable Energy, LLC, and other ! contributors. All rights reserved. ! ! NOTICE: This Software was developed under funding from the U.S. Department of Energy and the ! U.S. Government consequently retains certain rights. As such, the U.S. Government has been ! granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable, ! worldwide license in the Software to reproduce, distribute copies to the public, prepare ! derivative works, and perform publicly and display publicly, and to permit others to do so. ! ! Redistribution and use in source and binary forms, with or without modification, are permitted ! provided that the following conditions are met: ! ! (1) Redistributions of source code must retain the above copyright notice, this list of !     conditions and the following disclaimer. ! ! (2) Redistributions in binary form must reproduce the above copyright notice, this list of !     conditions and the following disclaimer in the documentation and/or other materials !     provided with the distribution. ! ! (3) Neither the name of the University of California, Lawrence Berkeley National Laboratory, !     the University of Illinois, U.S. Dept. of Energy nor the names of its contributors may be !     used to endorse or promote products derived from this software without specific prior !     written permission. ! ! (4) Use of EnergyPlus(TM) Name. If Licensee (i) distributes the software in stand-alone form !     without changes from the version obtained under this License, or (ii) Licensee makes a !     reference solely to the software portion of its product, Licensee must refer to the !     software as \"EnergyPlus version X\" software, where \"X\" is the version number Licensee !     obtained under this License and may not use a different name for the software. Except as !     specifically required in this Section (4), Licensee shall not use in a company name, a !     product name, in advertising, publicity, or other promotional activities any name, trade !     name, trademark, logo, or other designation of \"EnergyPlus\", \"E+\", \"e+\" or confusingly !     similar designation, without the U.S. Department of Energy's prior written consent. ! ! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR ! IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY ! AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR ! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR ! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR ! SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ! THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR ! OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE ! POSSIBILITY OF SUCH DAMAGE. module MinimalDXFan !+ This module currently contains one function (SimpleFanOnOff) for simulating !+ a simple on/off fan. Modified by D. Meyer and R. Raustad (2018). implicit none contains function GetOnOffFan ( Mode , MotEff , FanPower , MotInAirFrac , InletAirEnthalpy , AirMassFlowRate ) result ( OutletAirEnthalpy ) !+ Simplified version of SimOnOffFan subroutine in EnergyPlus !+ Given the mode of operation (on or off), fan motor efficiency, power of the fan, fraction of motor heat entering air stream !+ moist air enthaply of the air entering the fan, and mass flow rate, it returns the moist air enthaply of the air !+ after it has passed through the fan. It assumes sensible heating process only - i.e. it does not change the moisture !+ in the air - and the mass flow rate across the component remains the same. !+ Original Credits: NREL Energy Plus, Shirey, R. Raustad - FSEC, Brent Griffith,  Chandan Sharma, Rongpeng Zhang !+ Reference: ASHRAE HVAC 2 Toolkit, page 2-3 (FANSIM) !+ https://github.com/NREL/EnergyPlus/blob/d37252156cb0eef0cb9b1af5ce7dcd7423011649/src/EnergyPlus/Fans.cc#L1967-L1989 !+ This fan does not change the moisture or Mass Flow across the component ! Function arguments: integer , intent ( in ) :: Mode ! Mode of operation: 1 for on, 0 for off                [1] real , intent ( in ) :: MotEff ! Fan motor efficiency                                  [1] real , intent ( in ) :: FanPower ! Power of the fan to be simulated                      [W] real , intent ( in ) :: MotInAirFrac ! Fraction of motor heat entering air stream            [1] real , intent ( in ) :: InletAirEnthalpy ! Moist air enthaply of the air before entering the fan [J/kg] real , intent ( in ) :: AirMassFlowRate ! Mass flow rate through the Fan being simulated        [kg/Sec] real :: OutletAirEnthalpy ! Moist air enthaply of the air after entering the fan  [J/kg] ! Local variables real :: FanShaftPower real :: PowerLossToAir if ( Mode == 1 ) then ! Power delivered to shaft FanShaftPower = MotEff * FanPower PowerLossToAir = FanShaftPower + ( FanPower - FanShaftPower ) * MotInAirFrac OutletAirEnthalpy = InletAirEnthalpy + PowerLossToAir / AirMassFlowRate else if ( Mode == 0 ) then ! Fan is off and not operating no power consumed and mass flow rate. OutletAirEnthalpy = InletAirEnthalpy else error stop 'Fan Mode must either be 1 for on or 0 for off' end if end function GetOnOffFan end module MinimalDXFan","tags":"","loc":"sourcefile/minimal_dx_fan.f90.html"},{"title":"psychro_wrapper.f90 – MinimalDX","text":"This file depends on sourcefile~~psychro_wrapper.f90~~EfferentGraph sourcefile~psychro_wrapper.f90 psychro_wrapper.f90 sourcefile~eplus_psychro.f90 eplus_psychro.f90 sourcefile~psychro_wrapper.f90->sourcefile~eplus_psychro.f90 sourcefile~psychrolib.f90 psychrolib.f90 sourcefile~psychro_wrapper.f90->sourcefile~psychrolib.f90 sourcefile~eplus_psychro.f90->sourcefile~psychrolib.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~psychro_wrapper.f90~~AfferentGraph sourcefile~psychro_wrapper.f90 psychro_wrapper.f90 sourcefile~minimal_dx_cooling.f90 minimal_dx_cooling.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~psychro_wrapper.f90 sourcefile~minimal_dx_cooling_driver.f90 minimal_dx_cooling_driver.f90 sourcefile~minimal_dx_cooling_driver.f90->sourcefile~minimal_dx_cooling.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules PsychroWrapper Source Code psychro_wrapper.f90 Source Code ! MinimalDX version 0.1.4 (https://www.github.com/dmey/minimal-dx). ! Copyright 2018-2020 D. Meyer and R. Raustad. Licensed under MIT. module PsychroWrapper !+ Wraps PsychroLib functions. use psychrolib , only : SetUnitSystem , SI , GetMoistAirDensity , GetTWetBulbFromHumRatio , & GetMoistAirEnthalpy , GetHumRatioFromEnthalpyAndTDryBulb , & GetTDryBulbFromEnthalpyAndHumRatio , GetRelHumFromHumRatio , & GetHumRatioFromTDewPoint use EPlusPsychro , only : PsyTsatFnHPb implicit none private public :: GetMoistAirDensity public :: GetTWetBulbFromHumRatio public :: GetMoistAirEnthalpy public :: GetHumRatioFromEnthalpyAndTDryBulb public :: GetTDryBulbFromEnthalpyAndHumRatio public :: GetRelHumFromHumRatio public :: GetHumRatioFromTDewPoint public :: PsyTsatFnHPb public :: InitPsychrometrics contains subroutine InitPsychrometrics () call SetUnitSystem ( SI ) end subroutine InitPsychrometrics end module PsychroWrapper","tags":"","loc":"sourcefile/psychro_wrapper.f90.html"},{"title":"psychrolib.f90 – MinimalDX","text":"Files dependent on this one sourcefile~~psychrolib.f90~~AfferentGraph sourcefile~psychrolib.f90 psychrolib.f90 sourcefile~eplus_psychro.f90 eplus_psychro.f90 sourcefile~eplus_psychro.f90->sourcefile~psychrolib.f90 sourcefile~psychro_wrapper.f90 psychro_wrapper.f90 sourcefile~psychro_wrapper.f90->sourcefile~psychrolib.f90 sourcefile~psychro_wrapper.f90->sourcefile~eplus_psychro.f90 sourcefile~minimal_dx_cooling.f90 minimal_dx_cooling.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~psychro_wrapper.f90 sourcefile~minimal_dx_cooling_driver.f90 minimal_dx_cooling_driver.f90 sourcefile~minimal_dx_cooling_driver.f90->sourcefile~minimal_dx_cooling.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules psychrolib Source Code psychrolib.f90 Source Code ! PsychroLib (version 2.5.0) (https://github.com/psychrometrics/psychrolib). ! Copyright (c) 2018-2020 The PsychroLib Contributors for the current library implementation. ! Copyright (c) 2017 ASHRAE Handbook — Fundamentals for ASHRAE equations and coefficients. ! Licensed under the MIT License. module psychrolib !+ Module overview !+  Contains functions for calculating thermodynamic properties of gas-vapor mixtures !+  and standard atmosphere suitable for most engineering, physical, and meteorological !+  applications. !+ !+  Most of the functions are an implementation of the formulae found in the !+  2017 ASHRAE Handbook - Fundamentals, in both International System (SI), !+  and Imperial (IP) units. Please refer to the information included in !+  each function for their respective reference. !+ !+ Example !+  use psychrolib, only: GetTDewPointFromRelHum, SetUnitSystem, SI !+  ! Set the unit system, for example to SI (can be either 'SI' or 'IP') !+  call SetUnitSystem(SI) !+  ! Calculate the dew point temperature for a dry bulb temperature of 25 C and a relative humidity of 80% !+  print *, GetTDewPointFromRelHum(25.0, 0.80) !+ 21.3094 !+ !+ Copyright !+  - For the current library implementation !+     Copyright (c) 2018-2020 The PsychroLib Contributors. !+  - For equations and coefficients published ASHRAE Handbook — Fundamentals, Chapter 1 !+     Copyright (c) 2017 ASHRAE Handbook — Fundamentals (https://www.ashrae.org) !+ !+ License !+  MIT (https://github.com/psychrometrics/psychrolib/LICENSE.txt) !+ !+ Note from the Authors !+  We have made every effort to ensure that the code is adequate, however, we make no !+  representation with respect to its accuracy. Use at your own risk. Should you notice !+  an error, or if you have a suggestion, please notify us through GitHub at !+  https://github.com/psychrometrics/psychrolib/issues. implicit none private public :: IP public :: SI public :: SetUnitSystem public :: GetUnitSystem public :: isIP public :: GetTRankineFromTFahrenheit public :: GetTFahrenheitFromTRankine public :: GetTKelvinFromTCelsius public :: GetTCelsiusFromTKelvin public :: GetTWetBulbFromTDewPoint public :: GetTWetBulbFromRelHum public :: GetRelHumFromTDewPoint public :: GetRelHumFromTWetBulb public :: GetTDewPointFromRelHum public :: GetTDewPointFromTWetBulb public :: GetVapPresFromRelHum public :: GetRelHumFromVapPres public :: GetTDewPointFromVapPres public :: GetVapPresFromTDewPoint public :: GetTWetBulbFromHumRatio public :: GetHumRatioFromTWetBulb public :: GetHumRatioFromRelHum public :: GetRelHumFromHumRatio public :: GetHumRatioFromTDewPoint public :: GetTDewPointFromHumRatio public :: GetHumRatioFromVapPres public :: GetVapPresFromHumRatio public :: GetDryAirEnthalpy public :: GetDryAirDensity public :: GetDryAirVolume public :: GetTDryBulbFromEnthalpyAndHumRatio public :: GetHumRatioFromEnthalpyAndTDryBulb public :: GetSatVapPres public :: GetSatHumRatio public :: GetSatAirEnthalpy public :: GetVaporPressureDeficit public :: GetDegreeOfSaturation public :: GetMoistAirEnthalpy public :: GetMoistAirVolume public :: GetTDryBulbFromMoistAirVolumeAndHumRatio public :: GetMoistAirDensity public :: GetStandardAtmPressure public :: GetStandardAtmTemperature public :: GetSeaLevelPressure public :: GetStationPressure public :: GetSpecificHumFromHumRatio public :: GetHumRatioFromSpecificHum public :: CalcPsychrometricsFromTWetBulb public :: CalcPsychrometricsFromTDewPoint public :: CalcPsychrometricsFromRelHum public :: dLnPws_ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Global constants !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! real , parameter :: ZERO_FAHRENHEIT_AS_RANKINE = 45 9.67 !+ Zero degree Fahrenheit (°F) expressed as degree Rankine (°R). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 39. real , parameter :: ZERO_CELSIUS_AS_KELVIN = 27 3.15 !+ Zero degree Celsius (°C) expressed as Kelvin (K). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 39. real , parameter :: R_DA_IP = 5 3.350 !+ Universal gas constant for dry air (IP version) in ft lb_Force lb_DryAir⁻¹ R⁻¹. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1. real , parameter :: R_DA_SI = 28 7.042 !+ Universal gas constant for dry air (SI version) in J kg_DryAir⁻¹ K⁻¹. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1. integer , parameter :: IP = 1 integer , parameter :: SI = 2 integer :: PSYCHROLIB_UNITS = 0 ! 0 = undefined. !+ Unit system to use. real :: PSYCHROLIB_TOLERANCE = 1.0 !+ Tolerance of temperature calculations. integer , parameter :: MAX_ITER_COUNT = 100 !+ Maximum number of iterations before exiting while loops. real , parameter :: MIN_HUM_RATIO = 1e-7 !+ Minimum acceptable humidity ratio used/returned by any functions. !+ Any value above 0 or below the MIN_HUM_RATIO will be reset to this value. real , parameter :: FREEZING_POINT_WATER_IP = 3 2.0 !+ float: Freezing point of water in Fahrenheit. real , parameter :: FREEZING_POINT_WATER_SI = 0.0 !+ float: Freezing point of water in Celsius. real , parameter :: TRIPLE_POINT_WATER_IP = 3 2.018 !+ float: Triple point of water in Fahrenheit. real , parameter :: TRIPLE_POINT_WATER_SI = 0.01 !+ float: Triple point of water in Celsius. contains !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Helper functions !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! subroutine SetUnitSystem ( UnitSystem ) !+ Set the system of units to use (SI or IP). !+ Notes: this function *HAS TO BE CALLED* before the library can be used integer , intent ( in ) :: UnitSystem !+ Units: string indicating the system of units chosen (SI or IP) if (. not . ( UnitSystem == SI . or . UnitSystem == IP )) then error stop \"The system of units has to be either SI or IP.\" end if PSYCHROLIB_UNITS = UnitSystem ! Define tolerance on temperature calculations ! The tolerance is the same in IP and SI if ( UnitSystem == IP ) then PSYCHROLIB_TOLERANCE = 0.001 * 9.0 / 5.0 else PSYCHROLIB_TOLERANCE = 0.001 end if end subroutine SetUnitSystem function GetUnitSystem () result ( UnitSystem ) !+ Return the system of units in use. integer :: UnitSystem UnitSystem = PSYCHROLIB_UNITS end function GetUnitSystem function isIP () !+ Check whether the system in use is IP or SI logical :: isIP if ( PSYCHROLIB_UNITS == IP ) then isIP = . true . else if ( PSYCHROLIB_UNITS == SI ) then isIP = . false . else error stop \"The system of units has not been defined.\" end if end function isIP !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversion between temperature units !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetTRankineFromTFahrenheit ( TFahrenheit ) result ( TRankine ) !+ Utility function to convert temperature to degree Rankine (°R) !+ given temperature in degree Fahrenheit (°F). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TFahrenheit !+ Temperature in degree Fahrenheit real :: TRankine !+ Temperature in degree Rankine TRankine = TFahrenheit + ZERO_FAHRENHEIT_AS_RANKINE end function GetTRankineFromTFahrenheit function GetTFahrenheitFromTRankine ( TRankine ) result ( TFahrenheit ) !+ Utility function to convert temperature to degree Fahrenheit (°F) !+ given temperature in degree Rankine (°R). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TRankine !+ Temperature in degree Rankine real :: TFahrenheit !+ Temperature in degree Fahrenheit TFahrenheit = TRankine - ZERO_FAHRENHEIT_AS_RANKINE end function GetTFahrenheitFromTRankine function GetTKelvinFromTCelsius ( TCelsius ) result ( TKelvin ) !+ Utility function to convert temperature to Kelvin (K) !+ given temperature in degree Celsius (°C). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TCelsius !+ Temperature in degree Celsius real :: TKelvin !+ Tempearatyre in Kelvin TKelvin = TCelsius + ZERO_CELSIUS_AS_KELVIN end function GetTKelvinFromTCelsius function GetTCelsiusFromTKelvin ( TKelvin ) result ( TCelsius ) !+ Utility function to convert temperature to degree Celsius (°C) !+ given temperature in Kelvin (K). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TKelvin !+ Tempearatyre in Kelvin real :: TCelsius !+ Temperature in degree Celsius TCelsius = TKelvin - ZERO_CELSIUS_AS_KELVIN end function GetTCelsiusFromTKelvin !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between dew point, wet bulb, and relative humidity !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetTWetBulbFromTDewPoint ( TDryBulb , TDewPoint , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromTDewPoint function GetTWetBulbFromRelHum ( TDryBulb , RelHum , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromRelHum function GetRelHumFromTDewPoint ( TDryBulb , TDewPoint ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and dew-point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if VapPres = GetSatVapPres ( TDewPoint ) SatVapPres = GetSatVapPres ( TDryBulb ) RelHum = VapPres / SatVapPres end function GetRelHumFromTDewPoint function GetRelHumFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetRelHumFromTWetBulb function GetTDewPointFromRelHum ( TDryBulb , RelHum ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and relative humidity. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromRelHum function GetTDewPointFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTDewPointFromTWetBulb !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between dew point, or relative humidity and vapor pressure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetVapPresFromRelHum ( TDryBulb , RelHum ) result ( VapPres ) !+ Return partial pressure of water vapor as a function of relative humidity and temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = RelHum * GetSatVapPres ( TDryBulb ) end function GetVapPresFromRelHum function GetRelHumFromVapPres ( TDryBulb , VapPres ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if RelHum = VapPres / GetSatVapPres ( TDryBulb ) end function GetRelHumFromVapPres function dLnPws_ ( TDryBulb ) result ( dLnPws ) !+ Helper function returning the derivative of the natural log of the saturation vapor pressure !+ as a function of dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: dLnPws !+ Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then dLnPws = 1.0214165E+04 / T ** 2 - 5.3765794E-03 + 2 * 1.9202377E-07 * T & + 3 * 3.5575832E-10 * T ** 2 - 4 * 9.0344688E-14 * T ** 3 + 4.1635019 / T else dLnPws = 1.0440397E+04 / T ** 2 - 2.7022355E-02 + 2 * 1.2890360E-05 * T & - 3 * 2.4780681E-09 * T ** 2 + 6.5459673 / T end if else T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then dLnPws = 5.6745359E+03 / T ** 2 - 9.677843E-03 + 2 * 6.2215701E-07 * T & + 3 * 2.0747825E-09 * T ** 2 - 4 * 9.484024E-13 * T ** 3 + 4.1635019 / T else dLnPws = 5.8002206E+03 / T ** 2 - 4.8640239E-02 + 2 * 4.1764768E-05 * T & - 3 * 1.4452093E-08 * T ** 2 + 6.5459673 / T end if end if end function dLnPws_ function GetTDewPointFromVapPres ( TDryBulb , VapPres ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6 !+ Notes: !+ The dew point temperature is solved by inverting the equation giving water vapor pressure !+ at saturation from temperature rather than using the regressions provided !+ by ASHRAE (eqn. 37 and 38) which are much less accurate and have a !+ narrower range of validity. !+ The Newton-Raphson (NR) method is used on the logarithm of water vapour !+ pressure as a function of temperature, which is a very smooth function !+ Convergence is usually achieved in 3 to 5 iterations. !+ TDryBulb is not really needed here, just used for convenience. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: lnVP !+ Natural logarithm of partial pressure of water vapor pressure in moist air real :: d_lnVP !+ Derivative of function, calculated numerically real :: lnVP_iter !+ Value of log of vapor water pressure used in NR calculation real :: TDewPoint_iter !+ Value of TDewPoint used in NR calculation real , dimension ( 2 ) :: BOUNDS !+ Valid temperature range in °F [IP] or °C [SI] integer :: index !+ Index used in the calculation ! Bounds and step size as a function of the system of units if ( isIP ()) then BOUNDS ( 1 ) = - 14 8.0 BOUNDS ( 2 ) = 39 2.0 else BOUNDS ( 1 ) = - 10 0.0 BOUNDS ( 2 ) = 20 0.0 end if ! Validity check -- bounds outside which a solution cannot be found if ( VapPres < GetSatVapPres ( BOUNDS ( 1 )) . or . VapPres > GetSatVapPres ( BOUNDS ( 2 ))) then error stop \"Error: partial pressure of water vapor is outside range of validity of equations\" end if ! We use NR to approximate the solution. TDewPoint = TDryBulb lnVP = log ( VapPres ) index = 1 do while (. true .) TDewPoint_iter = TDewPoint ! TDewPoint_iter used in NR calculation lnVP_iter = log ( GetSatVapPres ( TDewPoint_iter )) ! Derivative of function, calculated analytically d_lnVP = dLnPws_ ( TDewPoint_iter ) ! New estimate, bounded by the search domain defined above TDewPoint = TDewPoint_iter - ( lnVP_iter - lnVP ) / d_lnVP TDewPoint = max ( TDewPoint , BOUNDS ( 1 )) TDewPoint = min ( TDewPoint , BOUNDS ( 2 )) if ( abs ( TDewPoint - TDewPoint_iter ) <= PSYCHROLIB_TOLERANCE ) then exit end if if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTDewPointFromVapPres. Stopping.\" end if index = index + 1 end do TDewPoint = min ( TDewPoint , TDryBulb ) end function GetTDewPointFromVapPres function GetVapPresFromTDewPoint ( TDewPoint ) result ( VapPres ) !+ Return vapor pressure given dew point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) end function GetVapPresFromTDewPoint !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions from wet-bulb temperature, dew-point temperature, or relative humidity to humidity ratio !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: TDewPoint !+ TDewPoint : Dew-point temperature in °F [IP] or °C [SI] real :: TWetBulbSup !+ Upper value of wet bulb temperature in bissection method (initial guess is from dry bulb temperature) in °F [IP] or °C [SI] real :: TWetBulbInf !+ Lower value of wet bulb temperature in bissection method (initial guess is from dew point temperature) in °F [IP] or °C [SI] real :: Wstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO integer :: index !+ index used in iteration if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , BoundedHumRatio , Pressure ) ! Initial guesses TWetBulbSup = TDryBulb TWetBulbInf = TDewPoint TWetBulb = ( TWetBulbInf + TWetBulbSup ) / 2.0 index = 1 ! Bisection loop do while (( TWetBulbSup - TWetBulbInf ) > PSYCHROLIB_TOLERANCE ) ! Compute humidity ratio at temperature Tstar Wstar = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) ! Get new bounds if ( Wstar > BoundedHumRatio ) then TWetBulbSup = TWetBulb else TWetBulbInf = TWetBulb end if ! New guess of wet bulb temperature TWetBulb = ( TWetBulbSup + TWetBulbInf ) / 2.0 if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTWetBulbFromHumRatio. Stopping.\" end if index = index + 1 end do end function GetTWetBulbFromHumRatio function GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: Wsstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if Wsstar = GetSatHumRatio ( TWetBulb , Pressure ) if ( isIP ()) then if ( TWetBulb >= FREEZING_POINT_WATER_IP ) then HumRatio = (( 109 3.0 - 0.556 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 109 3.0 + 0.444 * TDryBulb - TWetBulb ) else HumRatio = (( 122 0.0 - 0.04 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 122 0.0 + 0.444 * TDryBulb - 0.48 * TWetBulb ) end if else if ( TWetBulb >= FREEZING_POINT_WATER_SI ) then HumRatio = (( 250 1.0 - 2.326 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 250 1.0 + 1.86 * TDryBulb - 4.186 * TWetBulb ) else HumRatio = (( 283 0.0 - 0.24 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 283 0.0 + 1.86 * TDryBulb - 2.1 * TWetBulb ) end if end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromTWetBulb function GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, relative humidity, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromRelHum function GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) RelHum = GetRelHumFromVapPres ( TDryBulb , VapPres ) end function GetRelHumFromHumRatio function GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dew-point temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromTDewPoint function GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromHumRatio !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between humidity ratio and vapor pressure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetHumRatioFromVapPres ( VapPres , Pressure ) result ( HumRatio ) !+ Return humidity ratio given water vapor pressure and atmospheric pressure. !+ Reference: !+ ASHRAE Fundamentals (2005) ch. 6 eqn. 22; !+ ASHRAE Fundamentals (2009) ch. 1 eqn. 22. real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if HumRatio = 0.621945 * VapPres / ( Pressure - VapPres ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromVapPres function GetVapPresFromHumRatio ( HumRatio , Pressure ) result ( VapPres ) !+ Return vapor pressure given humidity ratio and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) VapPres = Pressure * BoundedHumRatio / ( 0.621945 + BoundedHumRatio ) end function GetVapPresFromHumRatio !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between humidity ratio and specific humidity !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetSpecificHumFromHumRatio ( HumRatio ) result ( SpecificHum ) !+ Return the specific humidity from humidity ratio (aka mixing ratio). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] real :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) SpecificHum = BoundedHumRatio / ( 1.0 + BoundedHumRatio ) end function GetSpecificHumFromHumRatio function GetHumRatioFromSpecificHum ( SpecificHum ) result ( HumRatio ) !+ Return the humidity ratio (aka mixing ratio) from specific humidity. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio) real , intent ( in ) :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] if ( SpecificHum < 0.0 . or . SpecificHum >= 1.0 ) then error stop \"Error: specific humidity is outside range [0, 1)\" end if HumRatio = SpecificHum / ( 1.0 - SpecificHum ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromSpecificHum !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Dry Air Calculations !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetDryAirEnthalpy ( TDryBulb ) result ( DryAirEnthalpy ) !+ Return dry-air enthalpy given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 28 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: DryAirEnthalpy !+ Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] if ( isIP ()) then DryAirEnthalpy = 0.240 * TDryBulb else DryAirEnthalpy = 1006 * TDryBulb end if end function GetDryAirEnthalpy function GetDryAirDensity ( TDryBulb , Pressure ) result ( DryAirDensity ) !+ Return dry-air density given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirDensity !+ Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI] if ( isIP ()) then DryAirDensity = ( 144 * Pressure ) / R_DA_IP / GetTRankineFromTFahrenheit ( TDryBulb ) else DryAirDensity = Pressure / R_DA_SI / GetTKelvinFromTCelsius ( TDryBulb ) end if end function GetDryAirDensity function GetDryAirVolume ( TDryBulb , Pressure ) result ( DryAirVolume ) !+ Return dry-air volume given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirVolume !+ Dry air volume in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] if ( isIP ()) then DryAirVolume = GetTRankineFromTFahrenheit ( TDryBulb ) * R_DA_IP / ( 144 * Pressure ) else DryAirVolume = GetTKelvinFromTCelsius ( TDryBulb ) * R_DA_SI / Pressure end if end function GetDryAirVolume function GetTDryBulbFromEnthalpyAndHumRatio ( MoistAirEnthalpy , HumRatio ) result ( TDryBulb ) !+ Return dry bulb temperature from enthalpy and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for temperature. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = ( MoistAirEnthalpy - 106 1.0 * BoundedHumRatio ) / ( 0.240 + 0.444 * BoundedHumRatio ) else TDryBulb = ( MoistAirEnthalpy / 100 0.0 - 250 1.0 * BoundedHumRatio ) / ( 1.006 + 1.86 * BoundedHumRatio ) end if end function GetTDryBulbFromEnthalpyAndHumRatio function GetHumRatioFromEnthalpyAndTDryBulb ( MoistAirEnthalpy , TDryBulb ) result ( HumRatio ) !+ Return humidity ratio from enthalpy and dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for humidity ratio. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( isIP ()) then HumRatio = ( MoistAirEnthalpy - 0.240 * TDryBulb ) / ( 106 1.0 + 0.444 * TDryBulb ) else HumRatio = ( MoistAirEnthalpy / 100 0.0 - 1.006 * TDryBulb ) / ( 250 1.0 + 1.86 * TDryBulb ) end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromEnthalpyAndTDryBulb !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Saturated Air Calculations !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetSatVapPres ( TDryBulb ) result ( SatVapPres ) !+ Return saturation vapor pressure given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 !+ Important note: the ASHRAE formulae are defined above and below the freezing point but have !+ a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae !+ should be defined above and below the triple point of water (not the feezing point) in which case !+ the discontinuity vanishes. It is essential to use the triple point of water otherwise function !+ GetTDewPointFromVapPres, which inverts the present function, does not converge properly around !+ the freezing point. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: LnPws !+ Log of Vapor Pressure of saturated air (dimensionless) real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then if ( TDryBulb < - 14 8.0 . or . TDryBulb > 39 2.0 ) then error stop \"Error: dry bulb temperature must be in range [-148, 392]°F\" end if T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then LnPws = ( - 1.0214165E+04 / T - 4.8932428 - 5.3765794E-03 * T + 1.9202377E-07 * T ** 2 & + 3.5575832E-10 * T ** 3 - 9.0344688E-14 * T ** 4 + 4.1635019 * log ( T )) else LnPws = - 1.0440397E+04 / T - 1.1294650E+01 - 2.7022355E-02 * T + 1.2890360E-05 * T ** 2 & - 2.4780681E-09 * T ** 3 + 6.5459673 * log ( T ) end if else if ( TDryBulb < - 10 0.0 . or . TDryBulb > 20 0.0 ) then error stop \"Error: dry bulb temperature must be in range [-100, 200]°C\" end if T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then LnPws = - 5.6745359E+03 / T + 6.3925247 - 9.677843E-03 * T + 6.2215701E-07 * T ** 2 & + 2.0747825E-09 * T ** 3 - 9.484024E-13 * T ** 4 + 4.1635019 * log ( T ) else LnPws = - 5.8002206E+03 / T + 1.3914993 - 4.8640239E-02 * T + 4.1764768E-05 * T ** 2 & - 1.4452093E-08 * T ** 3 + 6.5459673 * log ( T ) end if end if SatVapPres = exp ( LnPws ) end function GetSatVapPres function GetSatHumRatio ( TDryBulb , Pressure ) result ( SatHumRatio ) !+ Return humidity ratio of saturated air given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatHumRatio !+ Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: SatVaporPres !+ Vapor pressure of saturated air in in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] SatVaporPres = GetSatVapPres ( TDryBulb ) SatHumRatio = 0.621945 * SatVaporPres / ( Pressure - SatVaporPres ) ! Validity check. SatHumRatio = max ( SatHumRatio , MIN_HUM_RATIO ) end function GetSatHumRatio function GetSatAirEnthalpy ( TDryBulb , Pressure ) result ( SatAirEnthalpy ) !+ Return saturated air enthalpy given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatAirEnthalpy !+ Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] SatAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , GetSatHumRatio ( TDryBulb , Pressure )) end function GetSatAirEnthalpy !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Moist Air Calculations !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetVaporPressureDeficit ( TDryBulb , HumRatio , Pressure ) result ( VaporPressureDeficit ) !+ Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ Oke (1987) eqn 2.13a real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VaporPressureDeficit !+ Vapor pressure deficit in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VaporPressureDeficit = GetSatVapPres ( TDryBulb ) * ( 1.0 - RelHum ) end function GetVaporPressureDeficit function GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) result ( DegreeOfSaturation ) !+ Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation !+ at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn 12 !+ Notes: !+ This definition is absent from the 2017 Handbook. Using 2009 version instead. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DegreeOfSaturation !+ Degree of saturation in arbitrary unit real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) DegreeOfSaturation = BoundedHumRatio / GetSatHumRatio ( TDryBulb , Pressure ) end function GetDegreeOfSaturation function GetMoistAirEnthalpy ( TDryBulb , HumRatio ) result ( MoistAirEnthalpy ) !+ Return moist air enthalpy given dry-bulb temperature and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirEnthalpy = 0.240 * TDryBulb + BoundedHumRatio * ( 106 1.0 + 0.444 * TDryBulb ) else MoistAirEnthalpy = ( 1.006 * TDryBulb + BoundedHumRatio * ( 250 1.0 + 1.86 * TDryBulb )) * 100 0.0 end if end function GetMoistAirEnthalpy function GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) result ( MoistAirVolume ) !+ Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirVolume = R_DA_IP * GetTRankineFromTFahrenheit ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / ( 14 4.0 * Pressure ) else MoistAirVolume = R_DA_SI * GetTKelvinFromTCelsius ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / Pressure end if end function GetMoistAirVolume function GetTDryBulbFromMoistAirVolumeAndHumRatio ( MoistAirVolume , HumRatio , Pressure ) result ( TDryBulb ) !+ Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². !+ Based on the `GetMoistAirVolume` function, rearranged for dry-bulb temperature. real , intent ( in ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = GetTFahrenheitFromTRankine ( MoistAirVolume * ( 144 * Pressure ) & / ( R_DA_IP * ( 1 + 1.607858 * BoundedHumRatio ))) else TDryBulb = GetTCelsiusFromTKelvin ( MoistAirVolume * Pressure & / ( R_DA_SI * ( 1 + 1.607858 * BoundedHumRatio ))) end if end function GetTDryBulbFromMoistAirVolumeAndHumRatio function GetMoistAirDensity ( TDryBulb , HumRatio , Pressure ) result ( MoistAirDensity ) !+ Return moist air density given humidity ratio, dry bulb temperature, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 11 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirDensity !+ Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) MoistAirDensity = ( 1.0 + BoundedHumRatio ) / GetMoistAirVolume ( TDryBulb , BoundedHumRatio , Pressure ) end function GetMoistAirDensity !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Standard atmosphere !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetStandardAtmPressure ( Altitude ) result ( StandardAtmPressure ) !+ Return standard atmosphere barometric pressure, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmPressure !+ Standard atmosphere barometric pressure in Psi [IP] or Pa [SI] if ( isIP ()) then StandardAtmPressure = 1 4.696 * ( 1.0 - 6.8754e-06 * Altitude ) ** 5.2559 else StandardAtmPressure = 101325 * ( 1 - 2.25577e-05 * Altitude ) ** 5.2559 end if end function GetStandardAtmPressure function GetStandardAtmTemperature ( Altitude ) result ( StandardAtmTemperature ) !+ Return standard atmosphere temperature, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmTemperature !+ Standard atmosphere dry-bulb temperature in °F [IP] or °C [SI] if ( isIP ()) then StandardAtmTemperature = 5 9.0 - 0.00356620 * Altitude else StandardAtmTemperature = 1 5.0 - 0.0065 * Altitude end if end function GetStandardAtmTemperature function GetSeaLevelPressure ( StnPressure , Altitude , TDryBulb ) result ( SeaLevelPressure ) !+ Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure. !+ Reference: !+ Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959, !+ ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition, !+ Brooks/Cole 2000, ch. 1. !+ Notes: !+ The standard procedure for the US is to use for TDryBulb the average !+ of the current station temperature and the station temperature from 12 hours ago. real , intent ( in ) :: StnPressure !+ Observed station pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real :: TColumn !+ Average temperature in column of air in R [IP] or K [SI] real :: H !+ scale height (dimensionless) if ( isIP ()) then ! Calculate average temperature in column of air, assuming a lapse rate ! of 3.6 °F/1000ft TColumn = TDryBulb + 0.0036 * Altitude / 2.0 ! Determine the scale height H = 5 3.351 * GetTRankineFromTFahrenheit ( TColumn ) else ! Calculate average temperature in column of air, assuming a lapse rate ! of 6.5 °C/km TColumn = TDryBulb + 0.0065 * Altitude / 2.0 ! Determine the scale height H = 28 7.055 * GetTKelvinFromTCelsius ( TColumn ) / 9.807 end if ! Calculate the sea level pressure SeaLevelPressure = StnPressure * exp ( Altitude / H ) end function GetSeaLevelPressure function GetStationPressure ( SeaLevelPressure , Altitude , TDryBulb ) result ( StationPressure ) !+ Return station pressure from sea level pressure. !+ Reference: !+ See 'GetSeaLevelPressure' !+ Notes: !+ This function is just the inverse of 'GetSeaLevelPressure'. real , intent ( in ) :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: StationPressure !+ Station pressure in Psi [IP] or Pa [SI] StationPressure = SeaLevelPressure / GetSeaLevelPressure ( 1.0 , Altitude , TDryBulb ) end function GetStationPressure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Functions to set all psychrometric values !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! subroutine CalcPsychrometricsFromTWetBulb ( TDryBulb , & TWetBulb , & Pressure , & HumRatio , & TDewPoint , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, dew-point temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, wet-bulb temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTWetBulb subroutine CalcPsychrometricsFromTDewPoint ( TDryBulb , & TDewPoint , & Pressure , & HumRatio , & TWetBulb , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, dew-point temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTDewPoint subroutine CalcPsychrometricsFromRelHum ( TDryBulb , & RelHum , & Pressure , & HumRatio , & TWetBulb , & TDewPoint , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, relative humidity and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromRelHum end module psychrolib","tags":"","loc":"sourcefile/psychrolib.f90.html"},{"title":"eplus_psychro.f90 – MinimalDX","text":"This file depends on sourcefile~~eplus_psychro.f90~~EfferentGraph sourcefile~eplus_psychro.f90 eplus_psychro.f90 sourcefile~psychrolib.f90 psychrolib.f90 sourcefile~eplus_psychro.f90->sourcefile~psychrolib.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~eplus_psychro.f90~~AfferentGraph sourcefile~eplus_psychro.f90 eplus_psychro.f90 sourcefile~psychro_wrapper.f90 psychro_wrapper.f90 sourcefile~psychro_wrapper.f90->sourcefile~eplus_psychro.f90 sourcefile~minimal_dx_cooling.f90 minimal_dx_cooling.f90 sourcefile~minimal_dx_cooling.f90->sourcefile~psychro_wrapper.f90 sourcefile~minimal_dx_cooling_driver.f90 minimal_dx_cooling_driver.f90 sourcefile~minimal_dx_cooling_driver.f90->sourcefile~minimal_dx_cooling.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules EPlusPsychro Source Code eplus_psychro.f90 Source Code ! MinimalDX version 0.1.2 (https://www.github.com/dmey/minimal-dx). ! ! Description ! This module is meant as a wrapper for the `PsyTsatFnHPb` function as it is missing from PsychroLib. ! The `PsyTsatFnHPb` function was copied and pasted from the following link: ! https://github.com/NREL/EnergyPlusRelease/blob/1ba84749/SourceCode/PsychRoutines.f90#L2331-L2542 ! ! Changes ! The following changes were made to the`§PsyTsatFnHPb` function: ! - D. Meyer (20190112): replace EnergyPlus function `PsyHFnTdbW` and !   `PsyWFnTdbTwbPb` with `GetSatAirEnthalpy` from PsychroLib. ! - D. Meyer (20190112): remove unused preprocessing directives. ! ! Copyright notice ! EnergyPlus, Copyright (c) 1996-2019, The Board of Trustees of the University of Illinois, ! The Regents of the University of California, through Lawrence Berkeley National Laboratory ! (subject to receipt of any required approvals from the U.S. Dept. of Energy), Oak Ridge ! National Laboratory, managed by UT-Battelle, Alliance for Sustainable Energy, LLC, and other ! contributors. All rights reserved. ! ! NOTICE: This Software was developed under funding from the U.S. Department of Energy and the ! U.S. Government consequently retains certain rights. As such, the U.S. Government has been ! granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable, ! worldwide license in the Software to reproduce, distribute copies to the public, prepare ! derivative works, and perform publicly and display publicly, and to permit others to do so. ! ! Redistribution and use in source and binary forms, with or without modification, are permitted ! provided that the following conditions are met: ! ! (1) Redistributions of source code must retain the above copyright notice, this list of !     conditions and the following disclaimer. ! ! (2) Redistributions in binary form must reproduce the above copyright notice, this list of !     conditions and the following disclaimer in the documentation and/or other materials !     provided with the distribution. ! ! (3) Neither the name of the University of California, Lawrence Berkeley National Laboratory, !     the University of Illinois, U.S. Dept. of Energy nor the names of its contributors may be !     used to endorse or promote products derived from this software without specific prior !     written permission. ! ! (4) Use of EnergyPlus(TM) Name. If Licensee (i) distributes the software in stand-alone form !     without changes from the version obtained under this License, or (ii) Licensee makes a !     reference solely to the software portion of its product, Licensee must refer to the !     software as \"EnergyPlus version X\" software, where \"X\" is the version number Licensee !     obtained under this License and may not use a different name for the software. Except as !     specifically required in this Section (4), Licensee shall not use in a company name, a !     product name, in advertising, publicity, or other promotional activities any name, trade !     name, trademark, logo, or other designation of \"EnergyPlus\", \"E+\", \"e+\" or confusingly !     similar designation, without the U.S. Department of Energy's prior written consent. ! ! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR ! IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY ! AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR ! CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR ! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR ! SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ! THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR ! OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE ! POSSIBILITY OF SUCH DAMAGE. MODULE EPlusPsychro IMPLICIT NONE ! Enforce explicit typing of all variables PRIVATE ! Everything private unless explicitly made public PUBLIC PsyTsatFnHPb CONTAINS FUNCTION PsyTsatFnHPb ( H , PB , calledfrom ) RESULT ( T ) ! FUNCTION INFORMATION: !       AUTHOR         George Shih !       DATE WRITTEN   May 1976 !       MODIFIED       July 2003; LKL -- peg min/max values (outside range of functions) !       RE-ENGINEERED  na ! PURPOSE OF THIS FUNCTION: ! This function provides the saturation temperature from the enthalpy ! and barometric pressure. ! METHODOLOGY EMPLOYED: ! na ! REFERENCES: ! ASHRAE HANDBOOK OF FUNDAMENTALS, 1972, P99, EQN 22 ! USE STATEMENTS: USE psychrolib , ONLY : GetSatAirEnthalpy IMPLICIT NONE ! Enforce explicit typing of all variables in this routine ! FUNCTION ARGUMENT DEFINITIONS: REAL , intent ( in ) :: H ! enthalpy {J/kg} REAL , intent ( in ) :: PB ! barometric pressure {Pascals} character ( len =* ), intent ( in ), optional :: calledfrom ! routine this function was called from (error messages) REAL :: T ! result=> saturation temperature {C} ! FUNCTION PARAMETER DEFINITIONS: ! na ! INTERFACE BLOCK SPECIFICATIONS ! na ! DERIVED TYPE DEFINITIONS ! na ! FUNCTION LOCAL VARIABLE DECLARATIONS: REAL T1 ! APPROXIMATE SATURATION TEMPERATURE (C) REAL T2 ! APPROXIMATE SATURATION TEMPERATURE (C) REAL TN ! NEW ASSUMED SATURATION TEMPERATURE (C) REAL H1 ! APPROXIMATE ENTHALPY (J/KG) REAL H2 ! APPROXIMATE ENTHALPY (J/KG) REAL Y1 ! ERROR IN ENTHALPY REAL Y2 ! ERROR IN ENTHALPY INTEGER IterCount REAL HH ! temporary enthalpy (calculation) value LOGICAL FlagError ! Set when errors should be flagged REAL :: Hloc ! local value of H !                                      CHECK H IN RANGE. HH = H + 1.78637e4 IF ( H >= 0. ) THEN Hloc = MAX ( 0.00001 , H ) ELSE IF ( H < 0. ) THEN Hloc = MIN ( - . 00001 , H ) END IF FlagError = . false . ! IF ( HH > 7.5222e4 ) GO TO 20 IF ( HH > 2.7297e4 ) GO TO 60 IF ( HH > - 6.7012e2 ) GO TO 50 IF ( HH > - 2.2138e4 ) GO TO 40 IF ( HH < - 4.24e4 ) HH =- 4.24e4 ! Peg to minimum GO TO 30 20 CONTINUE IF ( HH < 1.8379e5 ) GO TO 70 IF ( HH < 4.7577e5 ) GO TO 80 IF ( HH < 1.5445e6 ) GO TO 90 IF ( HH < 3.8353e6 ) GO TO 100 IF ( HH > 4.5866e7 ) HH = 4.5866e7 ! Peg to maximum GO TO 110 ! !                                      TEMP. IS FROM -60 C  TO  -40 C 30 CONTINUE T = F6 ( HH , - 1 9.44e0 , 8.53675e-4 , - 5.12637e-9 , - 9.85546e-14 , - 1.00102e-18 , - 4.2705e-24 ) GO TO 120 !                                      TEMP. IS FROM -40 C  TO  -20 C 40 CONTINUE T = F6 ( HH , - 1.94224e1 , 8.5892e-4 , - 4.50709e-9 , - 6.19492e-14 , 8.71734e-20 , 8.73051e-24 ) GO TO 120 !                                      TEMP. IS FROM -20 C  TO    0 C 50 CONTINUE T = F6 ( HH , - 1.94224e1 , 8.59061e-4 , - 4.4875e-9 , - 5.76696e-14 , 7.72217e-19 , 3.97894e-24 ) GO TO 120 !                                      TEMP. IS FROM   0 C  TO   20 C 60 CONTINUE T = F6 ( HH , - 2.01147e1 , 9.04936e-4 , - 6.83305e-9 , 2.3261e-14 , 7.27237e-20 , - 6.31939e-25 ) GO TO 120 !                                      TEMP. IS FROM  20 C  TO   40 C 70 CONTINUE T = F6 ( HH , - 1.82124e1 , 8.31683e-4 , - 6.16461e-9 , 3.06411e-14 , - 8.60964e-20 , 1.03003e-25 ) GO TO 120 !                                      TEMP. IS FROM  40 C  TO   60 C 80 CONTINUE T = F6 ( HH , - 1.29419e0 , 3.88538e-4 , - 1.30237e-9 , 2.78254e-15 , - 3.27225e-21 , 1.60969e-27 ) GO TO 120 !                                      TEMP. IS FROM   60 C TO   80 C 90 CONTINUE T = F6 ( HH , 2.39214e1 , 1.27519e-4 , - 1.52089e-10 , 1.1043e-16 , - 4.33919e-23 , 7.05296e-30 ) GO TO 120 !                                      TEMP. IS FROM   80 C TO   90 C 100 CONTINUE T = F6 ( HH , 4.88446e1 , 3.85534e-5 , - 1.78805e-11 , 4.87224e-18 , - 7.15283e-25 , 4.36246e-32 ) GO TO 120 !                                      TEMP. IS FROM   90 C TO  100C 110 CONTINUE T = F7 ( HH , 7.60565e11 , 5.80534e4 , - 7.36433e-3 , 5.11531e-10 , - 1.93619e-17 , 3.70511e-25 , - 2.77313e-33 ) !                                      IF THE BAROMETRIC PRESSURE IS !                                      EQUAL TO 1.0133E5 , SATURATION !                                      TEMP. IS CALCULATED BY ABOVE EQUA !                                      OTHERWISE TEMP. IS COMPUTED BY !                                      FOLLOWING ITERATION METHOD 120 CONTINUE IF ( ABS ( PB - 1.0133e5 ) / 1.0133e5 <= 0.01 ) GO TO 170 IterCount = 0 T1 = T H1 = GetSatAirEnthalpy ( T1 , PB ) Y1 = H1 - Hloc IF ( ABS ( Y1 / Hloc ) <= 0.1e-4 ) GO TO 140 T2 = T1 * 0.9 130 IterCount = IterCount + 1 H2 = GetSatAirEnthalpy ( T2 , PB ) Y2 = H2 - Hloc IF ( ABS ( Y2 / Hloc ) <= 0.1e-4 ) GO TO 150 IF ( Y2 == Y1 ) GO TO 150 TN = T2 - Y2 / ( Y2 - Y1 ) * ( T2 - T1 ) IF ( IterCount > 30 ) GO TO 160 T1 = T2 T2 = TN Y1 = Y2 GO TO 130 140 CONTINUE T = T1 GO TO 170 150 CONTINUE T = T2 GO TO 170 160 CONTINUE 170 CONTINUE !   result is T RETURN CONTAINS REAL FUNCTION F6 ( X , A0 , A1 , A2 , A3 , A4 , A5 ) IMPLICIT NONE REAL X REAL A0 , A1 , A2 , A3 , A4 , A5 F6 = A0 + X * ( A1 + X * ( A2 + X * ( A3 + X * ( A4 + X * A5 )))) RETURN END FUNCTION F6 REAL FUNCTION F7 ( X , A0 , A1 , A2 , A3 , A4 , A5 , A6 ) IMPLICIT NONE REAL X , A6 REAL A0 , A1 , A2 , A3 , A4 , A5 F7 = ( A0 + X * ( A1 + X * ( A2 + X * ( A3 + X * ( A4 + X * ( A5 + X * A6 )))))) / 1.0e10 RETURN END FUNCTION F7 END FUNCTION PsyTsatFnHPb END MODULE EPlusPsychro","tags":"","loc":"sourcefile/eplus_psychro.f90.html"},{"title":"CalcMinimalDXCooling – MinimalDX","text":"public subroutine CalcMinimalDXCooling(OutdoorTDryBulb, OutdoorHumRatio, OutdoorPressure, InletTDryBulb, InletHumRatio, RatedCOP, RatedTotCap, PartLoadRatio, RatedAirMassFlowRate, OutletTemperature, OutletHumRatio, ElecCoolingPower, SensCoolingEnergyRate, LatCoolingEnergyRate, TotalCoolingEnergyRate, TotalSensibleHeatOut) Uses PsychroWrapper MinimalDXFan proc~~calcminimaldxcooling~~UsesGraph proc~calcminimaldxcooling CalcMinimalDXCooling module~psychrowrapper PsychroWrapper proc~calcminimaldxcooling->module~psychrowrapper module~minimaldxfan MinimalDXFan proc~calcminimaldxcooling->module~minimaldxfan module~psychrolib psychrolib module~psychrowrapper->module~psychrolib module~epluspsychro EPlusPsychro module~psychrowrapper->module~epluspsychro Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil.\n Adapted from EnergyPlus CalcDoe2DXCoil by D.Meyer and R. Raustad (2018). ORIGINAL ENERGY PLUS SUBROUTINE INFORMATION: AUTHOR         Fred Buhl DATE WRITTEN   May 2000 MODIFIED       Shirey, Feb/October 2001, Feb/Mar 2004 Feb 2005 M. J. Witte, GARD Analytics, Inc. Add new coil type COIL:DX:MultiMode:CoolingEmpirical: April 2010 Chandan Sharma, FSEC, Added basin heater RE-ENGINEERED  Don Shirey, Aug/Sept 2000 PURPOSE OF THIS SUBROUTINE: Calculates the air-side performance and electrical energy use of a direct-\n expansion, air-cooled cooling unit. METHODOLOGY EMPLOYED: This routine simulates the performance of air-cooled DX cooling equipment.\n The routine requires the user to enter the total cooling capacity, sensible heat ratio,\n and COP for the unit at ARI 210/240 rating conditions (26.67C [80F] dry-bulb, 19.44C [67F]\n wet-bulb air entering the cooling coil, 35C [95F] dry-bulb air entering the outdoor\n condenser. Since different manufacturer's rate their equipment at different air flow rates,\n the supply air flow rate corresponding to the rated capacities and rated COP must also be\n entered (should be between 300 cfm/ton and 450 cfm/ton). The rated information entered by\n the user should NOT include the thermal or electrical impacts of the supply air fan, as\n this is addressed by another module. With the rated performance data entered by the user, the model employs some of the\n DOE-2.1E curve fits to adjust the capacity and efficiency of the unit as a function\n of entering air temperatures and supply air flow rate (actual vs rated flow). The model\n does NOT employ the exact same methodology to calculate performance as DOE-2, although\n some of the DOE-2 curve fits are employed by this model. The model checks for coil dryout conditions, and adjusts the calculated performance\n appropriately. REFERENCES: ASHRAE HVAC 2 Toolkit page 4-81. Henderson, H.I. Jr., K. Rengarajan and D.B. Shirey, III. 1992.The impact of comfort\n control on air conditioner energy use in humid climates. ASHRAE Transactions 98(2):\n 104-113. Henderson, H.I. Jr., Danny Parker and Y.J. Huang. 2000.Improving DOE-2's RESYS routine:\n User Defined Functions to Provide More Accurate Part Load Energy Use and Humidity\n Predictions. Proceedings of ACEEE Conference. LINKS: 1. http://bigladdersoftware.com/epx/docs/8-7/engineering-reference/coils.html#single-speed-electric-dx-air-cooling-coil 2. https://github.com/NREL/EnergyPlusRelease/blob/1ba8474958dbac5a371362731b23310d40e0635d/SourceCode/DXCoil.f90#L8434 Arguments Type Intent Optional Attributes Name real, intent(in) :: OutdoorTDryBulb Outdoor dry bulb air temperature [°C] real, intent(in) :: OutdoorHumRatio Outdoor air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: OutdoorPressure Outdoor barometric pressure [Pa] real, intent(in) :: InletTDryBulb Indoor (inlet) dry bulb air temperature [°C] real, intent(in) :: InletHumRatio Indoor (inlet) air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: RatedCOP Rated Coefficient Of Performance (COP) [1] real, intent(in) :: RatedTotCap Rated (total) system capacity [W] real, intent(in) :: PartLoadRatio Part load ratio (PLR). This is the actual cooling effect produced by the AC unit divided by the maximum\n cooling effect available - i.e. PLR = (SensibleCoolingLoad / SensCoolingEnergyRate) [1] real, intent(in) :: RatedAirMassFlowRate Rated air mass flow rate [kg s⁻¹] real, intent(out) :: OutletTemperature Actual (calculated) outlet air dry bulb temperature existing the cooling coil [°C] real, intent(out) :: OutletHumRatio Actual (calculated) outlet air humidity ratio existing the cooling coil [kgH₂O kgAIR⁻¹] real, intent(out) :: ElecCoolingPower Calculated electrical power consumed by the DX unit [W] real, intent(out) :: SensCoolingEnergyRate Sensible cooling power used to calculate the PLR. This is the maximum amount of sensible heat rate that the coil\n is capable of extracting from the indoor environment for the specified conditions. [W] real, intent(out) :: LatCoolingEnergyRate real, intent(out) :: TotalCoolingEnergyRate Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) [W] real, intent(out) :: TotalSensibleHeatOut Total power rejected by the evaporator into the outdoor environment\n i.e. TotalCoolingEnergyRate + ElecCoolingPower [W] Calls proc~~calcminimaldxcooling~~CallsGraph proc~calcminimaldxcooling CalcMinimalDXCooling proc~getonofffan GetOnOffFan proc~calcminimaldxcooling->proc~getonofffan proc~getmoistairdensity GetMoistAirDensity proc~calcminimaldxcooling->proc~getmoistairdensity proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettdrybulbfromenthalpyandhumratio GetTDryBulbFromEnthalpyAndHumRatio proc~calcminimaldxcooling->proc~gettdrybulbfromenthalpyandhumratio proc~psytsatfnhpb PsyTsatFnHPb proc~calcminimaldxcooling->proc~psytsatfnhpb proc~gethumratiofromenthalpyandtdrybulb GetHumRatioFromEnthalpyAndTDryBulb proc~calcminimaldxcooling->proc~gethumratiofromenthalpyandtdrybulb proc~initpsychrometrics InitPsychrometrics proc~calcminimaldxcooling->proc~initpsychrometrics proc~getmoistairenthalpy GetMoistAirEnthalpy proc~calcminimaldxcooling->proc~getmoistairenthalpy proc~getmoistairvolume GetMoistAirVolume proc~getmoistairdensity->proc~getmoistairvolume proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~isip isIP proc~gettdrybulbfromenthalpyandhumratio->proc~isip proc~getsatairenthalpy GetSatAirEnthalpy proc~psytsatfnhpb->proc~getsatairenthalpy proc~gethumratiofromenthalpyandtdrybulb->proc~isip proc~setunitsystem SetUnitSystem proc~initpsychrometrics->proc~setunitsystem proc~getmoistairenthalpy->proc~isip proc~getsatairenthalpy->proc~getmoistairenthalpy proc~getsathumratio GetSatHumRatio proc~getsatairenthalpy->proc~getsathumratio proc~getmoistairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getmoistairvolume->proc~gettkelvinfromtcelsius proc~gethumratiofromtwetbulb->proc~isip proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~calcminimaldxcooling~~CalledByGraph proc~calcminimaldxcooling CalcMinimalDXCooling proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code CalcMinimalDXCooling Source Code subroutine CalcMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , PartLoadRatio , RatedAirMassFlowRate , & ! I OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , SensCoolingEnergyRate , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) ! O !+ Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil. !+ Adapted from EnergyPlus `CalcDoe2DXCoil` by D.Meyer and R. Raustad (2018). !+ !+####ORIGINAL ENERGY PLUS SUBROUTINE INFORMATION: !+       AUTHOR         Fred Buhl !+       DATE WRITTEN   May 2000 !+       MODIFIED       Shirey, Feb/October 2001, Feb/Mar 2004 !+                      Feb 2005 M. J. Witte, GARD Analytics, Inc. !+                      Add new coil type COIL:DX:MultiMode:CoolingEmpirical: !+                      April 2010 Chandan Sharma, FSEC, Added basin heater !+       RE-ENGINEERED  Don Shirey, Aug/Sept 2000 !+ !+ !+####PURPOSE OF THIS SUBROUTINE: !+ Calculates the air-side performance and electrical energy use of a direct- !+ expansion, air-cooled cooling unit. !+ !+####METHODOLOGY EMPLOYED: !+ This routine simulates the performance of air-cooled DX cooling equipment. !+ The routine requires the user to enter the total cooling capacity, sensible heat ratio, !+ and COP for the unit at ARI 210/240 rating conditions (26.67C [80F] dry-bulb, 19.44C [67F] !+ wet-bulb air entering the cooling coil, 35C [95F] dry-bulb air entering the outdoor !+ condenser. Since different manufacturer's rate their equipment at different air flow rates, !+ the supply air flow rate corresponding to the rated capacities and rated COP must also be !+ entered (should be between 300 cfm/ton and 450 cfm/ton). The rated information entered by !+ the user should NOT include the thermal or electrical impacts of the supply air fan, as !+ this is addressed by another module. !+ !+ With the rated performance data entered by the user, the model employs some of the !+ DOE-2.1E curve fits to adjust the capacity and efficiency of the unit as a function !+ of entering air temperatures and supply air flow rate (actual vs rated flow). The model !+ does NOT employ the exact same methodology to calculate performance as DOE-2, although !+ some of the DOE-2 curve fits are employed by this model. !+ !+ The model checks for coil dryout conditions, and adjusts the calculated performance !+ appropriately. !+ !+####REFERENCES: !+ ASHRAE HVAC 2 Toolkit page 4-81. !+ !+ Henderson, H.I. Jr., K. Rengarajan and D.B. Shirey, III. 1992.The impact of comfort !+ control on air conditioner energy use in humid climates. ASHRAE Transactions 98(2): !+ 104-113. !+ !+ Henderson, H.I. Jr., Danny Parker and Y.J. Huang. 2000.Improving DOE-2's RESYS routine: !+ User Defined Functions to Provide More Accurate Part Load Energy Use and Humidity !+ Predictions. Proceedings of ACEEE Conference. !+ !+####LINKS: !+ !+ 1. !+ <http://bigladdersoftware.com/epx/docs/8-7/engineering-reference/coils.html#single-speed-electric-dx-air-cooling-coil> !+ !+ 2. !+ <https://github.com/NREL/EnergyPlusRelease/blob/1ba8474958dbac5a371362731b23310d40e0635d/SourceCode/DXCoil.f90#L8434> use PsychroWrapper , only : InitPsychrometrics , GetMoistAirDensity , GetTWetBulbFromHumRatio , & GetMoistAirEnthalpy , GetHumRatioFromEnthalpyAndTDryBulb , & GetTDryBulbFromEnthalpyAndHumRatio , PsyTsatFnHPb use MinimalDXFan , only : GetOnOffFan ! Subroutine arguments real , intent ( in ) :: OutdoorTDryBulb !+ Outdoor dry bulb air temperature `[°C]` real , intent ( in ) :: OutdoorHumRatio ! Currently not used but maybe used in the future for air-to-water types. !+ Outdoor air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: OutdoorPressure !+ Outdoor barometric pressure `[Pa]` real , intent ( in ) :: InletTDryBulb !+ Indoor (inlet) dry bulb air temperature `[°C]` real , intent ( in ) :: InletHumRatio !+ Indoor (inlet) air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: RatedCOP !+ Rated Coefficient Of Performance (COP) `[1]` real , intent ( in ) :: RatedTotCap !+ Rated (total) system capacity `[W]` real , intent ( in ) :: PartLoadRatio !+ Part load ratio (PLR). This is the actual cooling effect produced by the AC unit divided by the maximum !+ cooling effect available - i.e. `PLR = (SensibleCoolingLoad / SensCoolingEnergyRate)` `[1]` real , intent ( in ) :: RatedAirMassFlowRate !+ Rated air mass flow rate `[kg s⁻¹]` real , intent ( out ) :: OutletTemperature !+ Actual (calculated) outlet air dry bulb temperature existing the cooling coil `[°C]` real , intent ( out ) :: OutletHumRatio !+ Actual (calculated) outlet air humidity ratio existing the cooling coil `[kgH₂O kgAIR⁻¹]` real , intent ( out ) :: ElecCoolingPower !+ Calculated electrical power consumed by the DX unit `[W]` real , intent ( out ) :: SensCoolingEnergyRate !+ Sensible cooling power used to calculate the PLR. This is the maximum amount of sensible heat rate that the coil !+ is capable of extracting from the indoor environment for the specified conditions. `[W]` real , intent ( out ) :: LatCoolingEnergyRate ! Total latent cooling energy rate extracted by the coil from the indoor environment `[J kg⁻¹]` real , intent ( out ) :: TotalCoolingEnergyRate !+ Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) `[W]` real , intent ( out ) :: TotalSensibleHeatOut !+ Total power rejected by the evaporator into the outdoor environment !+ i.e. TotalCoolingEnergyRate + ElecCoolingPower `[W]` ! Local variables integer :: Counter ! Counter for dry evaporator iterations                             [1] real :: IndoorAirDensity ! Air density of moist air                                          [kg m⁻3] real :: InletTWetBulb ! Indoor (inlet) air wet bulb temperature                           [°C] real :: hDelta ! Change in air enthalpy across the cooling coil                    [J kg⁻¹] real :: hADP ! Apparatus dew point (ADP) enthalpy                                [J kg⁻¹] real :: wADP ! Apparatus dew point (ADP) humidity ratio                          [kgH₂O kgAIR⁻¹] real :: tADP ! Temperature of air at ADP conditions                              [°C] real :: hTinwADP ! Enthalpy at inlet dry-bulb and wADP                               [J kg⁻¹] real :: InletAirHumRatTemp ! Inlet air humidity ratio used in ADP/BF loop                      [kgH₂O kgAIR⁻¹] real :: hTinwout ! Enthalpy at inlet dry-bulb and outlet humidity ratio              [J kg⁻¹] real :: InletAirEnthalpy ! Enthalpy at inlet dry-bulb and outlet humidity ratio              [J kg⁻¹] real :: werror ! Deviation of humidity ratio in dry evaporator iteration loop      [1] real :: CBF ! Calculated coil bypass factor using relation CBF = exp(-NTU)      [1] real :: ACCoolingCAPFTemp ! Total cooling capacity modifier curve function of temperature     [1] real :: ACCoolingCAPFFF ! Total cooling capacity modifier curve function of flow fraction   [1] real :: ACCoolingEIRFTemp ! Energy input ratio modifier curve function of temperature         [1] real :: ACCoolingEIRFFF ! Energy input ratio modifier curve function of flow fraction       [1] real :: ACCoolingPLFFPLR ! Part load factor, accounts for thermal lag at compressor ! startup, used in power calculation                                [1] real :: SHR ! Actual coil sensible heat rate                                    [W] real :: A0 ! NTU * air mass flow rate, used in CBF calculation                 [1] real :: ADiff ! Used for exponential (-A0/AirMassFlowRate)                        [1] real :: FullLoadOutAirEnth ! Outlet air enthalpy at full load conditions                       [J kg⁻¹] real :: FullLoadOutAirHumRat ! Outlet air humidity ratio at full load conditions                 [kgH₂O kgAIR⁻¹] real :: FullLoadOutAirTemp ! Outlet dry bulb air temperature at full load conditions           [°C] real :: OutletAirEnthalpy ! Supply air enthalpy (average value for constant fan)              [J kg⁻¹] real :: MinAirHumRat ! Minimum value between the inlet air humidity ratio and ! the outlet air humidity ratio                                     [kgH₂O kgAIR⁻¹] real :: AirMassFlowRate ! Air mass flow rate use in the subroutine for calculations         [kg s⁻¹] real :: EIR ! EIR at part load and off rated conditions                         [1] real :: TotalCoolingCapacity ! Gross total cooling capacity at off-rated conditions              [W] real :: FanPower ! Power of the fan to be simulated                                  [W] real :: CoolingCoilRuntimeFraction ! Run time fraction of the DX cooling unit                          [1] ! Local parameters integer , parameter :: MaxIter = 30 ! Maximum number of iterations for dry evaporator calculations      [1] real , parameter :: RF = 0.4 ! Relaxation factor for dry evaporator iterations                   [1] real , parameter :: TOLERANCE = 0.01 ! Error tolerance for dry evaporator iterations                     [1] real , parameter :: RatedCBF = 0.1 ! Coil bypass factor at off rated conditions                        [1] FIXME: temp value for now. real , parameter :: ExpLowerLimit = - 2 0. ! Exponent lower limit                                              [1] real , parameter :: AirFlowRatio = 1. ! Ratio of compressor on airflow to average time-step airflow ! Set to 1. Used only by DX coils with different air flow during ! cooling and when no cooling is ! required (constant fan, fan speed changes)                        [1] integer , parameter :: FanMode = 0 ! Mode of operation: 1 for on, 0 for off                            [1] real , parameter :: MotEff = 0.75 ! Fan motor efficiency                                              [1] real , parameter :: MotInAirFrac = 1. ! Fraction of motor heat entering air stream                        [1] ! Performance curves coefficients ! Reference: !https://github.com/NREL/EnergyPlus/blob/develop/datasets/ResidentialACsAndHPsPerfCurves.idf#L33-L123 ! Coefficients for ACCoolingCAPFTemp -- Total cooling capacity function of temperature curve (bi-quadratic). ! Minimum and maximum values of x and y are 0 and 50 respectively with curve output in rage 0 to 5 real , parameter :: A1 = 1.5509 ! Coefficient1 Constant real , parameter :: B1 = - 0.07505 ! Coefficient2 x real , parameter :: C1 = 0.0031 ! Coefficient3 x**2 real , parameter :: D1 = 0.0024 ! Coefficient4 y real , parameter :: E1 = - 0.00005 ! Coefficient5 y**2 real , parameter :: F1 = - 0.00043 ! Coefficient6 x*y real , parameter :: ACCoolingCAPFTempMin = 0.63 ! Minimum curve output value real , parameter :: ACCoolingCAPFTempMax = 1.57 ! Maximum curve output value ! Coefficients for ACCoolingCAPFFF -- total cooling capacity function of flow fraction curve (quadratic). ! Minimum and maximum values of x are 0 and 1.5 respectively with curve output in range 0 to 2 real , parameter :: A2 = 0.71861 ! Coefficient1 Constant real , parameter :: B2 = 0.4101 ! Coefficient2 x real , parameter :: C2 = - 0.12871 ! Coefficient3 x**2 real , parameter :: ACCoolingCAPFFFMin = 0. ! Minimum curve output value real , parameter :: ACCoolingCAPFFFMax = 2. ! Maximum curve output value ! Coefficients for ACCoolingEIRFTemp -- Energy input ratio function of temperature curve (bi-quadratic). ! Minimum and maximum values of x and y are 0 and 50 respectively with curve output in rage 0 to 5 real , parameter :: A3 = - 0.30428 ! Coefficient1 Constant real , parameter :: B3 = 0.11805 ! Coefficient2 x real , parameter :: C3 = - 0.00342 ! Coefficient3 x**2 real , parameter :: D3 = - 0.00626 ! Coefficient4 y real , parameter :: E3 = 0.0007 ! Coefficient5 y**2 real , parameter :: F3 = - 0.00047 ! Coefficient6 x*y real , parameter :: ACCoolingEIRFTempMin = 0.83 ! Minimum curve output value real , parameter :: ACCoolingEIRFTempMax = 1.21 ! Maximum curve output value ! Coefficients for ACCoolingEIRFFF -- Energy input ratio function of flow fraction curve (quadratic). ! Minimum and maximum values of x are 0 and 1.5 respectively with curve output in range 0 to 2 real , parameter :: A4 = 1.32299905 ! Coefficient1 Constant real , parameter :: B4 = - 0.477711207 ! Coefficient2 x real , parameter :: C4 = 0.154712157 ! Coefficient3 x**2 real , parameter :: ACCoolingEIRFFFMin = 0. ! Minimum curve output value real , parameter :: ACCoolingEIRFFFMax = 2. ! Maximum curve output value ! Part Load Fraction curve (quadratic) as a function of Part Load Ratio is default from ! Table 6. BEopt AC Rated Value Inputs of NREL report NREL/TP-5500-56354 ! Minimum and maximum values of x are 0 and 1.5 respectively real , parameter :: A5 = 0.9 !- Coefficient1 Constant real , parameter :: B5 = 0.1 !- Coefficient2 x real , parameter :: C5 = 0. !- Coefficient3 x**2 call InitPsychrometrics () Counter = 0 ! Calculate wet bulb temperature entering the cooling coil InletTWetBulb = GetTWetBulbFromHumRatio ( InletTDryBulb , InletHumRatio , OutdoorPressure ) ! Inlet Moist air enthalpy InletAirEnthalpy = GetMoistAirEnthalpy ( InletTDryBulb , InletHumRatio ) ! Calculate air density of indoor air using outdoor pressure. Assume indoor pressure = outdoor pressure IndoorAirDensity = GetMoistAirDensity ( InletTDryBulb , InletHumRatio , OutdoorPressure ) ! Check that the part load ratio is greater than 0 (i.e. DX unit is off) else just pass through conditions. if ( PartLoadRatio > 0 ) then ! Set the rated mass flow rate equal the mass flow rate used in the subroutine then check ! that the air mass flow rate is within bounds else set air mass flow rate accordingly AirMassFlowRate = RatedAirMassFlowRate if ( AirMassFlowRate / IndoorAirDensity / RatedTotCap < 0.00004027 ) then AirMassFlowRate = 0.00004027 * RatedTotCap * IndoorAirDensity print * , 'Warning: air mass flow rate must be greater than 0.00004027m3/s/W' print * , 'Resetting the air mass flow rate to: ' , AirMassFlowRate , ' kg/s' else if ( AirMassFlowRate / IndoorAirDensity / RatedTotCap > 0.00006041 ) then AirMassFlowRate = 0.00006041 * RatedTotCap * IndoorAirDensity print * , 'Warning: air mass flow rate must be lower than 0.00006041m3/s/W' print * , 'Resetting the air mass flow rate to: ' , AirMassFlowRate , ' kg/s' end if ! Modify the inlet air temperature to account for heat added by the fan motor ! The fan power is assumed to be 0.04151 W/W of the rated capacity FanPower = 0.04151 * RatedTotCap InletAirEnthalpy = GetOnOffFan ( FanMode , MotEff , FanPower , MotInAirFrac , InletAirEnthalpy , AirMassFlowRate ) ! Adjust coil bypass factor for actual air flow rate. Use relation CBF = exp(-NTU) where ! NTU = A0/(m*cp). Relationship models the cooling coil as a heat exchanger with Cmin/Cmax = 0. if ( RatedCBF > 0. ) then A0 = - log ( RatedCBF ) * RatedAirMassFlowRate else A0 = 0. end if ADiff = - A0 / AirMassFlowRate if ( ADiff >= ExpLowerLimit ) then CBF = exp ( ADiff ) else CBF = 0. end if ! Get total capacity modifying factor (function of temperature) for off-rated conditions ! InletAirHumRat may be modified in this ADP/BF loop, use temporary variable for calculations InletAirHumRatTemp = InletHumRatio ! Assuming an air-cooled condenser only. do ! Total cooling capacity modifier curve function of temperature ACCoolingCAPFTemp = A1 + B1 * InletTWetBulb + C1 * InletTWetBulb ** 2 & + D1 * OutdoorTDryBulb + E1 * OutdoorTDryBulb ** 2 & + F1 * InletTWetBulb * OutdoorTDryBulb ! Limit the cooling capacity modifier curve function of temperature to the its set bounds if ( ACCoolingCAPFTemp < ACCoolingCAPFTempMin ) then ACCoolingCAPFTemp = ACCoolingCAPFTempMin print * , 'Warning: the total cooling capacity modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFTempMin else if ( ACCoolingCAPFTemp > ACCoolingCAPFTempMax ) then ACCoolingCAPFTemp = ACCoolingCAPFTempMax print * , 'Warning: the total cooling capacity modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFTempMax end if ! Total cooling capacity modifier curve function of flow fraction ACCoolingCAPFFF = A2 + B2 * AirFlowRatio + C2 * AirFlowRatio ** 2 ! Limit the cooling capacity modifier curve to the its set bounds if ( ACCoolingCAPFFF < ACCoolingCAPFFFMin ) then ACCoolingCAPFFF = ACCoolingCAPFFFMin print * , 'Warning: the total cooling capacity modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFFFMin else if ( ACCoolingCAPFFF > ACCoolingCAPFFFMax ) then ACCoolingCAPFFF = ACCoolingCAPFFFMax print * , 'Warning: the total cooling capacity modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingCAPFFFMax end if ! Calculate the total cooling capacity TotalCoolingCapacity = RatedTotCap * ACCoolingCAPFTemp * ACCoolingCAPFFF ! Calculate apparatus dew point conditions using TotalCoolingCapacity and CBF hDelta = TotalCoolingCapacity / AirMassFlowRate ! Apparatus dew point enthalpy hADP = InletAirEnthalpy - hDelta / ( 1. - CBF ) ! Apparatus dew point saturated temperature tADP = PsyTsatFnHPb ( hADP , OutdoorPressure ) ! Apparatus dew point humidity ratio wADP = GetHumRatioFromEnthalpyAndTDryBulb ( hADP , tADP ) ! Apparatus dew point enthalpy hTinwADP = GetMoistAirEnthalpy ( InletTDryBulb , wADP ) if ( ( InletAirEnthalpy - hADP ) > 1.d-10 ) then SHR = min ( ( hTinwADP - hADP ) / ( InletAirEnthalpy - hADP ), 1. ) else SHR = 1. end if ! Check for dry evaporator conditions (win < wadp) if ( wADP > InletAirHumRatTemp . or . ( Counter >= 1 . and . Counter < MaxIter ) ) then if ( InletAirHumRatTemp == 0. ) InletAirHumRatTemp = 0.00001 werror = ( InletAirHumRatTemp - wADP ) / InletAirHumRatTemp ! Increase InletAirHumRatTemp at constant InletAirTemp to find coil dry-out point. Then use the ! capacity at the dry-out point to determine exiting conditions from coil. This is required ! since the ACCoolingCAPFTemp doesn't work properly with dry-coil conditions. InletAirHumRatTemp = RF * wADP + ( 1. - RF ) * InletAirHumRatTemp InletTWetBulb = GetTWetBulbFromHumRatio ( InletTDryBulb , InletAirHumRatTemp , OutdoorPressure ) Counter = Counter + 1 if ( abs ( werror ) > TOLERANCE ) then cycle else exit end if else exit end if end do ACCoolingPLFFPLR = A5 + B5 * PartLoadRatio + C5 * PartLoadRatio ** 2 if ( ACCoolingPLFFPLR < 0.7 ) then ACCoolingPLFFPLR = 0.7 end if CoolingCoilRuntimeFraction = PartLoadRatio / ACCoolingPLFFPLR ! Calculate full load output conditions if ( SHR > 1. . or . Counter > 0 ) SHR = 1. FullLoadOutAirEnth = InletAirEnthalpy - TotalCoolingCapacity / AirMassFlowRate hTinwout = InletAirEnthalpy - ( 1. - SHR ) * hDelta if ( SHR < 1. ) then FullLoadOutAirHumRat = GetHumRatioFromEnthalpyAndTDryBulb ( hTinwout , InletTDryBulb ) else FullLoadOutAirHumRat = InletHumRatio end if FullLoadOutAirTemp = GetTDryBulbFromEnthalpyAndHumRatio ( FullLoadOutAirEnth , FullLoadOutAirHumRat ) ! Check for saturation error and modify temperature at constant enthalpy if ( FullLoadOutAirTemp < PsyTsatFnHPb ( FullLoadOutAirEnth , OutdoorPressure ) ) then FullLoadOutAirTemp = PsyTsatFnHPb ( FullLoadOutAirEnth , OutdoorPressure ) FullLoadOutAirHumRat = GetHumRatioFromEnthalpyAndTDryBulb ( FullLoadOutAirEnth , FullLoadOutAirTemp ) end if ! Continuos fan, cycling compressor OutletAirEnthalpy = ( ( PartLoadRatio * AirFlowRatio ) * FullLoadOutAirEnth + & ( 1. - ( PartLoadRatio * AirFlowRatio ) ) * InletAirEnthalpy ) OutletHumRatio = ( ( PartLoadRatio * AirFlowRatio ) * FullLoadOutAirHumRat + & ( 1. - ( PartLoadRatio * AirFlowRatio ) ) * InletHumRatio ) OutletTemperature = GetTDryBulbFromEnthalpyAndHumRatio ( OutletAirEnthalpy , OutletHumRatio ) ! Check for saturation error and modify temperature at constant enthalpy if ( OutletTemperature < PsyTsatFnHPb ( OutletAirEnthalpy , OutdoorPressure ) ) then OutletTemperature = PsyTsatFnHPb ( OutletAirEnthalpy , OutdoorPressure ) OutletHumRatio = GetHumRatioFromEnthalpyAndTDryBulb ( OutletAirEnthalpy , OutletTemperature ) end if ! Energy input ratio modifier curve function of temperature ACCoolingEIRFTemp = A3 + B3 * InletTWetBulb + C3 * InletTWetBulb ** 2 & + D3 * OutdoorTDryBulb + E3 * OutdoorTDryBulb ** 2 & + F3 * InletTWetBulb * OutdoorTDryBulb ! Limit the energy input ratio modifier curve function of temperature to its set bounds if ( ACCoolingEIRFTemp < ACCoolingEIRFTempMin ) then ACCoolingEIRFTemp = ACCoolingEIRFTempMin print * , 'Warning: the energy input ratio modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFTempMin else if ( ACCoolingEIRFTemp > ACCoolingEIRFTempMax ) then ACCoolingEIRFTemp = ACCoolingEIRFTempMax print * , 'Warning: the energy input ratio modifier curve function of temperature exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFTempMax end if ! Energy input ratio modifier curve function of flow fraction ACCoolingEIRFFF = A4 + B4 * AirFlowRatio + C4 * AirFlowRatio ** 2 ! Limit the energy input ratio modifier curve function of flow fraction to its set bounds if ( ACCoolingEIRFFF < ACCoolingEIRFFFMin ) then ACCoolingEIRFFF = ACCoolingEIRFFFMin print * , 'Warning: the energy input ratio modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFFFMin else if ( ACCoolingEIRFFF > ACCoolingEIRFFFMax ) then ACCoolingEIRFFF = ACCoolingEIRFFFMax print * , 'Warning: the energy input ratio modifier curve function of flow fraction exceeds its set bounds' print * , 'The curve has been reset to: ' , ACCoolingEIRFFFMax end if ! Calculate the actual EIR for the DX unit under specified conditions EIR = ( 1. / RatedCOP ) * ACCoolingEIRFFF * ACCoolingEIRFTemp ! Calculate the electrical power consumed by the DX unit (compressors plus outdoor condenser fans) ElecCoolingPower = TotalCoolingCapacity * EIR * CoolingCoilRuntimeFraction TotalCoolingEnergyRate = AirMassFlowRate * ( InletAirEnthalpy - OutletAirEnthalpy ) ! Calculate the total sensible cooling energy extracted by the DX coils MinAirHumRat = min ( InletHumRatio , OutletHumRatio ) SensCoolingEnergyRate = AirMassFlowRate * & ( GetMoistAirEnthalpy ( InletTDryBulb , MinAirHumRat ) - & GetMoistAirEnthalpy ( OutletTemperature , MinAirHumRat ) ) ! Don't let sensible capacity be greater than total capacity if ( SensCoolingEnergyRate > TotalCoolingEnergyRate ) then SensCoolingEnergyRate = TotalCoolingEnergyRate print * , 'Warning: the sensible capacity is greater than the total capacity' print * , 'The sensible capacity has been set to equal the total capacity' end if ! Calculation of the latent cooling power LatCoolingEnergyRate = TotalCoolingEnergyRate - SensCoolingEnergyRate ! Calculation of total available capacity - this is also the total amount ! of thermal energy rejected by the evaporator (external unit) TotalSensibleHeatOut = TotalCoolingEnergyRate + ElecCoolingPower ! If/when the fan is on, we add the power consumed by the fan to the electrical power consumed by the DX unit if ( FanMode == 1 ) ElecCoolingPower = ElecCoolingPower + FanPower else ! The DX coil is off. Pass through conditions OutletTemperature = InletTDryBulb OutletHumRatio = InletHumRatio ElecCoolingPower = 0. SensCoolingEnergyRate = 0. LatCoolingEnergyRate = 0. TotalCoolingEnergyRate = 0. TotalSensibleHeatOut = 0. end if end subroutine CalcMinimalDXCooling","tags":"","loc":"proc/calcminimaldxcooling.html"},{"title":"SimMinimalDXCooling – MinimalDX","text":"public subroutine SimMinimalDXCooling(OutdoorTDryBulb, OutdoorHumRatio, OutdoorPressure, InletTDryBulb, InletHumRatio, RatedCOP, RatedTotCap, SensibleCoolingLoad, RatedAirMassFlowRate, COP, TotalCoolingCapacity, OutletTemperature, OutletHumRatio, ElecCoolingPower, LatCoolingEnergyRate, TotalCoolingEnergyRate, TotalSensibleHeatOut) Uses MinimalDXCooling proc~~simminimaldxcooling~~UsesGraph proc~simminimaldxcooling SimMinimalDXCooling module~minimaldxcooling MinimalDXCooling proc~simminimaldxcooling->module~minimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil.\n This is the subroutine to call from your program. Arguments Type Intent Optional Attributes Name real, intent(in) :: OutdoorTDryBulb Outdoor dry bulb air temperature [°C] real, intent(in) :: OutdoorHumRatio Outdoor air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: OutdoorPressure Outdoor barometric pressure [Pa] real, intent(in) :: InletTDryBulb Indoor (inlet) dry bulb air temperature [°C] real, intent(in) :: InletHumRatio Indoor (inlet) air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: RatedCOP Rated Coefficient Of Performance (COP) [1] real, intent(in) :: RatedTotCap Rated (total) system capacity [W] real, intent(in) :: SensibleCoolingLoad Building sensible load to be met [W] real, intent(in) :: RatedAirMassFlowRate rated air mass flow rate [kg s⁻¹] real, intent(out) :: COP Actual (calculated) Coefficient Of Performance (COP) [1] real, intent(out) :: TotalCoolingCapacity Actual (calculated) total system capacity [W] real, intent(out) :: OutletTemperature Actual (calculated) outlet air dry bulb temperature existing the cooling coil [°C] real, intent(out) :: OutletHumRatio Actual (calculated) outlet air humidity ratio existing the cooling coil [kgH₂O kgAIR⁻¹] real, intent(out) :: ElecCoolingPower Calculated electrical power consumed by the DX unit [W] real, intent(out) :: LatCoolingEnergyRate real, intent(out) :: TotalCoolingEnergyRate Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) [W] real, intent(out) :: TotalSensibleHeatOut Total power rejected by the evaporator into the outdoor environment\n i.e. TotalCoolingEnergyRate + ElecCoolingPower [W] Calls proc~~simminimaldxcooling~~CallsGraph proc~simminimaldxcooling SimMinimalDXCooling proc~calcminimaldxcooling CalcMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling proc~getonofffan GetOnOffFan proc~calcminimaldxcooling->proc~getonofffan proc~getmoistairdensity GetMoistAirDensity proc~calcminimaldxcooling->proc~getmoistairdensity proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettdrybulbfromenthalpyandhumratio GetTDryBulbFromEnthalpyAndHumRatio proc~calcminimaldxcooling->proc~gettdrybulbfromenthalpyandhumratio proc~psytsatfnhpb PsyTsatFnHPb proc~calcminimaldxcooling->proc~psytsatfnhpb proc~gethumratiofromenthalpyandtdrybulb GetHumRatioFromEnthalpyAndTDryBulb proc~calcminimaldxcooling->proc~gethumratiofromenthalpyandtdrybulb proc~initpsychrometrics InitPsychrometrics proc~calcminimaldxcooling->proc~initpsychrometrics proc~getmoistairenthalpy GetMoistAirEnthalpy proc~calcminimaldxcooling->proc~getmoistairenthalpy proc~getmoistairvolume GetMoistAirVolume proc~getmoistairdensity->proc~getmoistairvolume proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~isip isIP proc~gettdrybulbfromenthalpyandhumratio->proc~isip proc~getsatairenthalpy GetSatAirEnthalpy proc~psytsatfnhpb->proc~getsatairenthalpy proc~gethumratiofromenthalpyandtdrybulb->proc~isip proc~setunitsystem SetUnitSystem proc~initpsychrometrics->proc~setunitsystem proc~getmoistairenthalpy->proc~isip proc~getsatairenthalpy->proc~getmoistairenthalpy proc~getsathumratio GetSatHumRatio proc~getsatairenthalpy->proc~getsathumratio proc~getmoistairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getmoistairvolume->proc~gettkelvinfromtcelsius proc~gethumratiofromtwetbulb->proc~isip proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code SimMinimalDXCooling Source Code subroutine SimMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , SensibleCoolingLoad , RatedAirMassFlowRate , & ! I COP , TotalCoolingCapacity , & ! O OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) ! O !+ Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil. !+ This is the subroutine to call from your program. use MinimalDXCooling , only : CalcMinimalDXCooling ! Subroutine arguments real , intent ( in ) :: OutdoorTDryBulb !+ Outdoor dry bulb air temperature `[°C]` real , intent ( in ) :: OutdoorHumRatio !+ Outdoor air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: OutdoorPressure !+ Outdoor barometric pressure `[Pa]` real , intent ( in ) :: InletTDryBulb !+ Indoor (inlet) dry bulb air temperature `[°C]` real , intent ( in ) :: InletHumRatio !+ Indoor (inlet) air humidity ratio `[kgH₂O kgAIR⁻¹]` real , intent ( in ) :: RatedCOP !+ Rated Coefficient Of Performance (COP) `[1]` real , intent ( in ) :: RatedTotCap !+ Rated (total) system capacity `[W]` real , intent ( in ) :: SensibleCoolingLoad !+ Building sensible load to be met `[W]` real , intent ( in ) :: RatedAirMassFlowRate !+ rated air mass flow rate `[kg s⁻¹]` real , intent ( out ) :: COP !+ Actual (calculated) Coefficient Of Performance (COP) `[1]` real , intent ( out ) :: TotalCoolingCapacity !+ Actual (calculated) total system capacity `[W]` real , intent ( out ) :: OutletTemperature !+ Actual (calculated) outlet air dry bulb temperature existing the cooling coil `[°C]` real , intent ( out ) :: OutletHumRatio !+ Actual (calculated) outlet air humidity ratio existing the cooling coil `[kgH₂O kgAIR⁻¹]` real , intent ( out ) :: ElecCoolingPower !+ Calculated electrical power consumed by the DX unit `[W]` real , intent ( out ) :: LatCoolingEnergyRate ! Total latent cooling energy rate extracted by the coil from the indoor environment `[J kg⁻¹]` real , intent ( out ) :: TotalCoolingEnergyRate !+ Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) `[W]` real , intent ( out ) :: TotalSensibleHeatOut !+ Total power rejected by the evaporator into the outdoor environment !+ i.e. TotalCoolingEnergyRate + ElecCoolingPower `[W]` ! Local variables real :: PartLoadRatio real :: SensCoolingEnergyRate !+ Sensible cooling power used to calculate the PLR. This is the maximum amount of sensible heat rate that the coil !+ is capable of extracting from the indoor environment for the specified conditions. `[W]` ! Get SensibleCoolingLoad and SensCoolingEnergyRates to calculate actual PartLoadRatio PartLoadRatio = 1. call CalcMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , PartLoadRatio , RatedAirMassFlowRate , & ! I OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , SensCoolingEnergyRate , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) ! Calculate PartLoadRatio from previous call PartLoadRatio = SensibleCoolingLoad / SensCoolingEnergyRate ! Keep PartLoadRatio  bounded between 0 and 1 if ( PartLoadRatio < 0. ) PartLoadRatio = 0. if ( PartLoadRatio > 1. ) PartLoadRatio = 1. ! Call CalcDoe2DXCoil again with correct part load ratio call CalcMinimalDXCooling ( OutdoorTDryBulb , OutdoorHumRatio , OutdoorPressure , & ! I InletTDryBulb , InletHumRatio , & ! I RatedCOP , RatedTotCap , PartLoadRatio , RatedAirMassFlowRate , & ! I OutletTemperature , OutletHumRatio , & ! O ElecCoolingPower , SensCoolingEnergyRate , LatCoolingEnergyRate , & ! O TotalCoolingEnergyRate , TotalSensibleHeatOut ) COP = TotalCoolingEnergyRate / ElecCoolingPower TotalCoolingCapacity = TotalCoolingEnergyRate / PartLoadRatio end subroutine SimMinimalDXCooling","tags":"","loc":"proc/simminimaldxcooling.html"},{"title":"GetOnOffFan – MinimalDX","text":"public function GetOnOffFan(Mode, MotEff, FanPower, MotInAirFrac, InletAirEnthalpy, AirMassFlowRate) result(OutletAirEnthalpy) Simplified version of SimOnOffFan subroutine in EnergyPlus\n Given the mode of operation (on or off), fan motor efficiency, power of the fan, fraction of motor heat entering air stream\n moist air enthaply of the air entering the fan, and mass flow rate, it returns the moist air enthaply of the air\n after it has passed through the fan. It assumes sensible heating process only - i.e. it does not change the moisture\n in the air - and the mass flow rate across the component remains the same.\n Original Credits: NREL Energy Plus, Shirey, R. Raustad - FSEC, Brent Griffith,  Chandan Sharma, Rongpeng Zhang\n Reference: ASHRAE HVAC 2 Toolkit, page 2-3 (FANSIM)\n https://github.com/NREL/EnergyPlus/blob/d37252156cb0eef0cb9b1af5ce7dcd7423011649/src/EnergyPlus/Fans.cc#L1967-L1989\n This fan does not change the moisture or Mass Flow across the component Arguments Type Intent Optional Attributes Name integer, intent(in) :: Mode real, intent(in) :: MotEff real, intent(in) :: FanPower real, intent(in) :: MotInAirFrac real, intent(in) :: InletAirEnthalpy real, intent(in) :: AirMassFlowRate Return Value real Called by proc~~getonofffan~~CalledByGraph proc~getonofffan GetOnOffFan proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~getonofffan proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetOnOffFan Source Code function GetOnOffFan ( Mode , MotEff , FanPower , MotInAirFrac , InletAirEnthalpy , AirMassFlowRate ) result ( OutletAirEnthalpy ) !+ Simplified version of SimOnOffFan subroutine in EnergyPlus !+ Given the mode of operation (on or off), fan motor efficiency, power of the fan, fraction of motor heat entering air stream !+ moist air enthaply of the air entering the fan, and mass flow rate, it returns the moist air enthaply of the air !+ after it has passed through the fan. It assumes sensible heating process only - i.e. it does not change the moisture !+ in the air - and the mass flow rate across the component remains the same. !+ Original Credits: NREL Energy Plus, Shirey, R. Raustad - FSEC, Brent Griffith,  Chandan Sharma, Rongpeng Zhang !+ Reference: ASHRAE HVAC 2 Toolkit, page 2-3 (FANSIM) !+ https://github.com/NREL/EnergyPlus/blob/d37252156cb0eef0cb9b1af5ce7dcd7423011649/src/EnergyPlus/Fans.cc#L1967-L1989 !+ This fan does not change the moisture or Mass Flow across the component ! Function arguments: integer , intent ( in ) :: Mode ! Mode of operation: 1 for on, 0 for off                [1] real , intent ( in ) :: MotEff ! Fan motor efficiency                                  [1] real , intent ( in ) :: FanPower ! Power of the fan to be simulated                      [W] real , intent ( in ) :: MotInAirFrac ! Fraction of motor heat entering air stream            [1] real , intent ( in ) :: InletAirEnthalpy ! Moist air enthaply of the air before entering the fan [J/kg] real , intent ( in ) :: AirMassFlowRate ! Mass flow rate through the Fan being simulated        [kg/Sec] real :: OutletAirEnthalpy ! Moist air enthaply of the air after entering the fan  [J/kg] ! Local variables real :: FanShaftPower real :: PowerLossToAir if ( Mode == 1 ) then ! Power delivered to shaft FanShaftPower = MotEff * FanPower PowerLossToAir = FanShaftPower + ( FanPower - FanShaftPower ) * MotInAirFrac OutletAirEnthalpy = InletAirEnthalpy + PowerLossToAir / AirMassFlowRate else if ( Mode == 0 ) then ! Fan is off and not operating no power consumed and mass flow rate. OutletAirEnthalpy = InletAirEnthalpy else error stop 'Fan Mode must either be 1 for on or 0 for off' end if end function GetOnOffFan","tags":"","loc":"proc/getonofffan.html"},{"title":"InitPsychrometrics – MinimalDX","text":"public subroutine InitPsychrometrics() Arguments None Calls proc~~initpsychrometrics~~CallsGraph proc~initpsychrometrics InitPsychrometrics proc~setunitsystem SetUnitSystem proc~initpsychrometrics->proc~setunitsystem Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~initpsychrometrics~~CalledByGraph proc~initpsychrometrics InitPsychrometrics proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~initpsychrometrics proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code InitPsychrometrics Source Code subroutine InitPsychrometrics () call SetUnitSystem ( SI ) end subroutine InitPsychrometrics","tags":"","loc":"proc/initpsychrometrics.html"},{"title":"GetUnitSystem – MinimalDX","text":"public function GetUnitSystem() result(UnitSystem) Return the system of units in use. Arguments None Return Value integer Contents Source Code GetUnitSystem Source Code function GetUnitSystem () result ( UnitSystem ) !+ Return the system of units in use. integer :: UnitSystem UnitSystem = PSYCHROLIB_UNITS end function GetUnitSystem","tags":"","loc":"proc/getunitsystem.html"},{"title":"isIP – MinimalDX","text":"public function isIP() Check whether the system in use is IP or SI Arguments None Return Value logical Called by proc~~isip~~CalledByGraph proc~isip isIP proc~getdryairenthalpy GetDryAirEnthalpy proc~getdryairenthalpy->proc~isip proc~getdryairdensity GetDryAirDensity proc~getdryairdensity->proc~isip proc~getdryairvolume GetDryAirVolume proc~getdryairvolume->proc~isip proc~getmoistairvolume GetMoistAirVolume proc~getmoistairvolume->proc~isip proc~getstandardatmtemperature GetStandardAtmTemperature proc~getstandardatmtemperature->proc~isip proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~dlnpws_ dLnPws_ proc~dlnpws_->proc~isip proc~gettdrybulbfromenthalpyandhumratio GetTDryBulbFromEnthalpyAndHumRatio proc~gettdrybulbfromenthalpyandhumratio->proc~isip proc~gethumratiofromenthalpyandtdrybulb GetHumRatioFromEnthalpyAndTDryBulb proc~gethumratiofromenthalpyandtdrybulb->proc~isip proc~getsealevelpressure GetSeaLevelPressure proc~getsealevelpressure->proc~isip proc~getmoistairenthalpy GetMoistAirEnthalpy proc~getmoistairenthalpy->proc~isip proc~getstandardatmpressure GetStandardAtmPressure proc~getstandardatmpressure->proc~isip proc~getsatvappres GetSatVapPres proc~getsatvappres->proc~isip proc~gettdrybulbfrommoistairvolumeandhumratio GetTDryBulbFromMoistAirVolumeAndHumRatio proc~gettdrybulbfrommoistairvolumeandhumratio->proc~isip proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~dlnpws_ proc~gettdewpointfromvappres->proc~getsatvappres proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~gettdewpointfromrelhum->proc~gettdewpointfromvappres proc~getvappresfromrelhum GetVapPresFromRelHum proc~gettdewpointfromrelhum->proc~getvappresfromrelhum proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromvappres->proc~getsatvappres proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getmoistairvolume proc~calcpsychrometricsfromtdewpoint->proc~getmoistairenthalpy proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gethumratiofromtdewpoint proc~getdegreeofsaturation GetDegreeOfSaturation proc~calcpsychrometricsfromtdewpoint->proc~getdegreeofsaturation proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~getvappresfromrelhum->proc~getsatvappres proc~getrelhumfromtdewpoint GetRelHumFromTDewPoint proc~getrelhumfromtdewpoint->proc~getsatvappres proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~gethumratiofromtwetbulb proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getvaporpressuredeficit->proc~getsatvappres proc~getvaporpressuredeficit->proc~getrelhumfromhumratio proc~getsatairenthalpy GetSatAirEnthalpy proc~getsatairenthalpy->proc~getmoistairenthalpy proc~getsatairenthalpy->proc~getsathumratio proc~getsathumratio->proc~getsatvappres proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gethumratiofromtwetbulb proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~getmoistairdensity GetMoistAirDensity proc~getmoistairdensity->proc~getmoistairvolume proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~getstationpressure GetStationPressure proc~getstationpressure->proc~getsealevelpressure proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettdrybulbfromenthalpyandhumratio proc~calcminimaldxcooling->proc~gethumratiofromenthalpyandtdrybulb proc~calcminimaldxcooling->proc~getmoistairenthalpy proc~calcminimaldxcooling->proc~getmoistairdensity proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~psytsatfnhpb PsyTsatFnHPb proc~calcminimaldxcooling->proc~psytsatfnhpb proc~getvappresfromtdewpoint GetVapPresFromTDewPoint proc~getvappresfromtdewpoint->proc~getsatvappres proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getmoistairvolume proc~calcpsychrometricsfromtwetbulb->proc~gethumratiofromtwetbulb proc~calcpsychrometricsfromtwetbulb->proc~getmoistairenthalpy proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromtwetbulb->proc~getdegreeofsaturation proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~gethumratiofromtdewpoint->proc~getsatvappres proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getmoistairvolume proc~calcpsychrometricsfromrelhum->proc~getmoistairenthalpy proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum proc~calcpsychrometricsfromrelhum->proc~getdegreeofsaturation proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~psytsatfnhpb->proc~getsatairenthalpy proc~getdegreeofsaturation->proc~getsathumratio proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint->proc~gethumratiofromtdewpoint proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling proc~getrelhumfromhumratio->proc~getrelhumfromvappres Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code isIP Source Code function isIP () !+ Check whether the system in use is IP or SI logical :: isIP if ( PSYCHROLIB_UNITS == IP ) then isIP = . true . else if ( PSYCHROLIB_UNITS == SI ) then isIP = . false . else error stop \"The system of units has not been defined.\" end if end function isIP","tags":"","loc":"proc/isip.html"},{"title":"GetTRankineFromTFahrenheit – MinimalDX","text":"public function GetTRankineFromTFahrenheit(TFahrenheit) result(TRankine) Utility function to convert temperature to degree Rankine (°R)\n given temperature in degree Fahrenheit (°F).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TFahrenheit Temperature in degree Fahrenheit Return Value real Temperature in degree Rankine Called by proc~~gettrankinefromtfahrenheit~~CalledByGraph proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getdryairdensity GetDryAirDensity proc~getdryairdensity->proc~gettrankinefromtfahrenheit proc~getdryairvolume GetDryAirVolume proc~getdryairvolume->proc~gettrankinefromtfahrenheit proc~getmoistairvolume GetMoistAirVolume proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~dlnpws_ dLnPws_ proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~getsealevelpressure GetSeaLevelPressure proc~getsealevelpressure->proc~gettrankinefromtfahrenheit proc~getsatvappres GetSatVapPres proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~getsathumratio GetSatHumRatio proc~getsathumratio->proc~getsatvappres proc~getrelhumfromtdewpoint GetRelHumFromTDewPoint proc~getrelhumfromtdewpoint->proc~getsatvappres proc~getmoistairdensity GetMoistAirDensity proc~getmoistairdensity->proc~getmoistairvolume proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~gethumratiofromtdewpoint->proc~getsatvappres proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromvappres->proc~getsatvappres proc~getvappresfromtdewpoint GetVapPresFromTDewPoint proc~getvappresfromtdewpoint->proc~getsatvappres proc~getstationpressure GetStationPressure proc~getstationpressure->proc~getsealevelpressure proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getmoistairvolume proc~calcpsychrometricsfromtdewpoint->proc~gethumratiofromtdewpoint proc~getdegreeofsaturation GetDegreeOfSaturation proc~calcpsychrometricsfromtdewpoint->proc~getdegreeofsaturation proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getmoistairvolume proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gethumratiofromtwetbulb proc~calcpsychrometricsfromtwetbulb->proc~getdegreeofsaturation proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~getvappresfromrelhum GetVapPresFromRelHum proc~getvappresfromrelhum->proc~getsatvappres proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getmoistairvolume proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum proc~calcpsychrometricsfromrelhum->proc~getdegreeofsaturation proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getvaporpressuredeficit->proc~getsatvappres proc~getvaporpressuredeficit->proc~getrelhumfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromvappres->proc~dlnpws_ proc~gettdewpointfromvappres->proc~getsatvappres proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~getmoistairdensity proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~psytsatfnhpb PsyTsatFnHPb proc~calcminimaldxcooling->proc~psytsatfnhpb proc~getsatairenthalpy GetSatAirEnthalpy proc~getsatairenthalpy->proc~getsathumratio proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~gettdewpointfromrelhum->proc~getvappresfromrelhum proc~gettdewpointfromrelhum->proc~gettdewpointfromvappres proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~gethumratiofromtwetbulb->proc~getsathumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gethumratiofromtdewpoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~getdegreeofsaturation->proc~getsathumratio proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gethumratiofromtwetbulb proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~psytsatfnhpb->proc~getsatairenthalpy proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~gethumratiofromtwetbulb proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTRankineFromTFahrenheit Source Code function GetTRankineFromTFahrenheit ( TFahrenheit ) result ( TRankine ) !+ Utility function to convert temperature to degree Rankine (°R) !+ given temperature in degree Fahrenheit (°F). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TFahrenheit !+ Temperature in degree Fahrenheit real :: TRankine !+ Temperature in degree Rankine TRankine = TFahrenheit + ZERO_FAHRENHEIT_AS_RANKINE end function GetTRankineFromTFahrenheit","tags":"","loc":"proc/gettrankinefromtfahrenheit.html"},{"title":"GetTFahrenheitFromTRankine – MinimalDX","text":"public function GetTFahrenheitFromTRankine(TRankine) result(TFahrenheit) Utility function to convert temperature to degree Fahrenheit (°F)\n given temperature in degree Rankine (°R).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TRankine Temperature in degree Rankine Return Value real Temperature in degree Fahrenheit Called by proc~~gettfahrenheitfromtrankine~~CalledByGraph proc~gettfahrenheitfromtrankine GetTFahrenheitFromTRankine proc~gettdrybulbfrommoistairvolumeandhumratio GetTDryBulbFromMoistAirVolumeAndHumRatio proc~gettdrybulbfrommoistairvolumeandhumratio->proc~gettfahrenheitfromtrankine Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTFahrenheitFromTRankine Source Code function GetTFahrenheitFromTRankine ( TRankine ) result ( TFahrenheit ) !+ Utility function to convert temperature to degree Fahrenheit (°F) !+ given temperature in degree Rankine (°R). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TRankine !+ Temperature in degree Rankine real :: TFahrenheit !+ Temperature in degree Fahrenheit TFahrenheit = TRankine - ZERO_FAHRENHEIT_AS_RANKINE end function GetTFahrenheitFromTRankine","tags":"","loc":"proc/gettfahrenheitfromtrankine.html"},{"title":"GetTKelvinFromTCelsius – MinimalDX","text":"public function GetTKelvinFromTCelsius(TCelsius) result(TKelvin) Utility function to convert temperature to Kelvin (K)\n given temperature in degree Celsius (°C).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TCelsius Temperature in degree Celsius Return Value real Tempearatyre in Kelvin Called by proc~~gettkelvinfromtcelsius~~CalledByGraph proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getdryairdensity GetDryAirDensity proc~getdryairdensity->proc~gettkelvinfromtcelsius proc~getdryairvolume GetDryAirVolume proc~getdryairvolume->proc~gettkelvinfromtcelsius proc~getmoistairvolume GetMoistAirVolume proc~getmoistairvolume->proc~gettkelvinfromtcelsius proc~dlnpws_ dLnPws_ proc~dlnpws_->proc~gettkelvinfromtcelsius proc~getsealevelpressure GetSeaLevelPressure proc~getsealevelpressure->proc~gettkelvinfromtcelsius proc~getsatvappres GetSatVapPres proc~getsatvappres->proc~gettkelvinfromtcelsius proc~getsathumratio GetSatHumRatio proc~getsathumratio->proc~getsatvappres proc~getrelhumfromtdewpoint GetRelHumFromTDewPoint proc~getrelhumfromtdewpoint->proc~getsatvappres proc~getmoistairdensity GetMoistAirDensity proc~getmoistairdensity->proc~getmoistairvolume proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~gethumratiofromtdewpoint->proc~getsatvappres proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromvappres->proc~getsatvappres proc~getvappresfromtdewpoint GetVapPresFromTDewPoint proc~getvappresfromtdewpoint->proc~getsatvappres proc~getstationpressure GetStationPressure proc~getstationpressure->proc~getsealevelpressure proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getmoistairvolume proc~calcpsychrometricsfromtdewpoint->proc~gethumratiofromtdewpoint proc~getdegreeofsaturation GetDegreeOfSaturation proc~calcpsychrometricsfromtdewpoint->proc~getdegreeofsaturation proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getmoistairvolume proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gethumratiofromtwetbulb proc~calcpsychrometricsfromtwetbulb->proc~getdegreeofsaturation proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~getvappresfromrelhum GetVapPresFromRelHum proc~getvappresfromrelhum->proc~getsatvappres proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getmoistairvolume proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum proc~calcpsychrometricsfromrelhum->proc~getdegreeofsaturation proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getvaporpressuredeficit->proc~getsatvappres proc~getvaporpressuredeficit->proc~getrelhumfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromvappres->proc~dlnpws_ proc~gettdewpointfromvappres->proc~getsatvappres proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~getmoistairdensity proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~psytsatfnhpb PsyTsatFnHPb proc~calcminimaldxcooling->proc~psytsatfnhpb proc~getsatairenthalpy GetSatAirEnthalpy proc~getsatairenthalpy->proc~getsathumratio proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~gettdewpointfromrelhum->proc~getvappresfromrelhum proc~gettdewpointfromrelhum->proc~gettdewpointfromvappres proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~gethumratiofromtwetbulb->proc~getsathumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gethumratiofromtdewpoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~getdegreeofsaturation->proc~getsathumratio proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gethumratiofromtwetbulb proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~psytsatfnhpb->proc~getsatairenthalpy proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~gethumratiofromtwetbulb proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTKelvinFromTCelsius Source Code function GetTKelvinFromTCelsius ( TCelsius ) result ( TKelvin ) !+ Utility function to convert temperature to Kelvin (K) !+ given temperature in degree Celsius (°C). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TCelsius !+ Temperature in degree Celsius real :: TKelvin !+ Tempearatyre in Kelvin TKelvin = TCelsius + ZERO_CELSIUS_AS_KELVIN end function GetTKelvinFromTCelsius","tags":"","loc":"proc/gettkelvinfromtcelsius.html"},{"title":"GetTCelsiusFromTKelvin – MinimalDX","text":"public function GetTCelsiusFromTKelvin(TKelvin) result(TCelsius) Utility function to convert temperature to degree Celsius (°C)\n given temperature in Kelvin (K).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TKelvin Tempearatyre in Kelvin Return Value real Temperature in degree Celsius Called by proc~~gettcelsiusfromtkelvin~~CalledByGraph proc~gettcelsiusfromtkelvin GetTCelsiusFromTKelvin proc~gettdrybulbfrommoistairvolumeandhumratio GetTDryBulbFromMoistAirVolumeAndHumRatio proc~gettdrybulbfrommoistairvolumeandhumratio->proc~gettcelsiusfromtkelvin Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTCelsiusFromTKelvin Source Code function GetTCelsiusFromTKelvin ( TKelvin ) result ( TCelsius ) !+ Utility function to convert temperature to degree Celsius (°C) !+ given temperature in Kelvin (K). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TKelvin !+ Tempearatyre in Kelvin real :: TCelsius !+ Temperature in degree Celsius TCelsius = TKelvin - ZERO_CELSIUS_AS_KELVIN end function GetTCelsiusFromTKelvin","tags":"","loc":"proc/gettcelsiusfromtkelvin.html"},{"title":"GetTWetBulbFromTDewPoint – MinimalDX","text":"public function GetTWetBulbFromTDewPoint(TDryBulb, TDewPoint, Pressure) result(TWetBulb) Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Wet-bulb temperature in °F [IP] or °C [SI] Calls proc~~gettwetbulbfromtdewpoint~~CallsGraph proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gethumratiofromtdewpoint proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~getsatvappres GetSatVapPres proc~gethumratiofromtdewpoint->proc~getsatvappres proc~gethumratiofromvappres GetHumRatioFromVapPres proc~gethumratiofromtdewpoint->proc~gethumratiofromvappres proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getsathumratio->proc~getsatvappres proc~gettdewpointfromvappres->proc~getsatvappres proc~gettdewpointfromvappres->proc~isip proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTWetBulbFromTDewPoint Source Code function GetTWetBulbFromTDewPoint ( TDryBulb , TDewPoint , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromTDewPoint","tags":"","loc":"proc/gettwetbulbfromtdewpoint.html"},{"title":"GetTWetBulbFromRelHum – MinimalDX","text":"public function GetTWetBulbFromRelHum(TDryBulb, RelHum, Pressure) result(TWetBulb) Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Wet-bulb temperature in °F [IP] or °C [SI] Calls proc~~gettwetbulbfromrelhum~~CallsGraph proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~getvappresfromrelhum GetVapPresFromRelHum proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~gethumratiofromvappres GetHumRatioFromVapPres proc~gethumratiofromrelhum->proc~gethumratiofromvappres proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getsatvappres GetSatVapPres proc~getvappresfromrelhum->proc~getsatvappres proc~isip isIP proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getsathumratio->proc~getsatvappres proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTWetBulbFromRelHum Source Code function GetTWetBulbFromRelHum ( TDryBulb , RelHum , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromRelHum","tags":"","loc":"proc/gettwetbulbfromrelhum.html"},{"title":"GetRelHumFromTDewPoint – MinimalDX","text":"public function GetRelHumFromTDewPoint(TDryBulb, TDewPoint) result(RelHum) Return relative humidity given dry-bulb temperature and dew-point temperature.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] Return Value real Relative humidity in range [0, 1] Calls proc~~getrelhumfromtdewpoint~~CallsGraph proc~getrelhumfromtdewpoint GetRelHumFromTDewPoint proc~getsatvappres GetSatVapPres proc~getrelhumfromtdewpoint->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetRelHumFromTDewPoint Source Code function GetRelHumFromTDewPoint ( TDryBulb , TDewPoint ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and dew-point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if VapPres = GetSatVapPres ( TDewPoint ) SatVapPres = GetSatVapPres ( TDryBulb ) RelHum = VapPres / SatVapPres end function GetRelHumFromTDewPoint","tags":"","loc":"proc/getrelhumfromtdewpoint.html"},{"title":"GetRelHumFromTWetBulb – MinimalDX","text":"public function GetRelHumFromTWetBulb(TDryBulb, TWetBulb, Pressure) result(RelHum) Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Relative humidity in range [0, 1] Calls proc~~getrelhumfromtwetbulb~~CallsGraph proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~getrelhumfromtwetbulb->proc~gethumratiofromtwetbulb proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio proc~isip isIP proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~getvappresfromhumratio GetVapPresFromHumRatio proc~getrelhumfromhumratio->proc~getvappresfromhumratio proc~getsatvappres GetSatVapPres proc~getrelhumfromvappres->proc~getsatvappres proc~getsathumratio->proc~getsatvappres proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetRelHumFromTWetBulb Source Code function GetRelHumFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetRelHumFromTWetBulb","tags":"","loc":"proc/getrelhumfromtwetbulb.html"},{"title":"GetTDewPointFromRelHum – MinimalDX","text":"public function GetTDewPointFromRelHum(TDryBulb, RelHum) result(TDewPoint) Return dew-point temperature given dry-bulb temperature and relative humidity.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] Return Value real Dew-point temperature in °F [IP] or °C [SI] Calls proc~~gettdewpointfromrelhum~~CallsGraph proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~getvappresfromrelhum GetVapPresFromRelHum proc~gettdewpointfromrelhum->proc~getvappresfromrelhum proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromrelhum->proc~gettdewpointfromvappres proc~getsatvappres GetSatVapPres proc~getvappresfromrelhum->proc~getsatvappres proc~isip isIP proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTDewPointFromRelHum Source Code function GetTDewPointFromRelHum ( TDryBulb , RelHum ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and relative humidity. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromRelHum","tags":"","loc":"proc/gettdewpointfromrelhum.html"},{"title":"GetTDewPointFromTWetBulb – MinimalDX","text":"public function GetTDewPointFromTWetBulb(TDryBulb, TWetBulb, Pressure) result(TDewPoint) Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dew-point temperature in °F [IP] or °C [SI] Calls proc~~gettdewpointfromtwetbulb~~CallsGraph proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gethumratiofromtwetbulb proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~isip isIP proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTDewPointFromTWetBulb Source Code function GetTDewPointFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTDewPointFromTWetBulb","tags":"","loc":"proc/gettdewpointfromtwetbulb.html"},{"title":"GetVapPresFromRelHum – MinimalDX","text":"public function GetVapPresFromRelHum(TDryBulb, RelHum) result(VapPres) Return partial pressure of water vapor as a function of relative humidity and temperature.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] Return Value real Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] Calls proc~~getvappresfromrelhum~~CallsGraph proc~getvappresfromrelhum GetVapPresFromRelHum proc~getsatvappres GetSatVapPres proc~getvappresfromrelhum->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getvappresfromrelhum~~CalledByGraph proc~getvappresfromrelhum GetVapPresFromRelHum proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~gettdewpointfromrelhum->proc~getvappresfromrelhum proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetVapPresFromRelHum Source Code function GetVapPresFromRelHum ( TDryBulb , RelHum ) result ( VapPres ) !+ Return partial pressure of water vapor as a function of relative humidity and temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = RelHum * GetSatVapPres ( TDryBulb ) end function GetVapPresFromRelHum","tags":"","loc":"proc/getvappresfromrelhum.html"},{"title":"GetRelHumFromVapPres – MinimalDX","text":"public function GetRelHumFromVapPres(TDryBulb, VapPres) result(RelHum) Return relative humidity given dry-bulb temperature and vapor pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] Return Value real Relative humidity in range [0, 1] Calls proc~~getrelhumfromvappres~~CallsGraph proc~getrelhumfromvappres GetRelHumFromVapPres proc~getsatvappres GetSatVapPres proc~getrelhumfromvappres->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getrelhumfromvappres~~CalledByGraph proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getvaporpressuredeficit->proc~getrelhumfromhumratio Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetRelHumFromVapPres Source Code function GetRelHumFromVapPres ( TDryBulb , VapPres ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if RelHum = VapPres / GetSatVapPres ( TDryBulb ) end function GetRelHumFromVapPres","tags":"","loc":"proc/getrelhumfromvappres.html"},{"title":"dLnPws_ – MinimalDX","text":"public function dLnPws_(TDryBulb) result(dLnPws) Helper function returning the derivative of the natural log of the saturation vapor pressure\n as a function of dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI] Calls proc~~dlnpws_~~CallsGraph proc~dlnpws_ dLnPws_ proc~isip isIP proc~dlnpws_->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~dlnpws_~~CalledByGraph proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromvappres->proc~dlnpws_ proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~gettdewpointfromrelhum->proc~gettdewpointfromvappres proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code dLnPws_ Source Code function dLnPws_ ( TDryBulb ) result ( dLnPws ) !+ Helper function returning the derivative of the natural log of the saturation vapor pressure !+ as a function of dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: dLnPws !+ Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then dLnPws = 1.0214165E+04 / T ** 2 - 5.3765794E-03 + 2 * 1.9202377E-07 * T & + 3 * 3.5575832E-10 * T ** 2 - 4 * 9.0344688E-14 * T ** 3 + 4.1635019 / T else dLnPws = 1.0440397E+04 / T ** 2 - 2.7022355E-02 + 2 * 1.2890360E-05 * T & - 3 * 2.4780681E-09 * T ** 2 + 6.5459673 / T end if else T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then dLnPws = 5.6745359E+03 / T ** 2 - 9.677843E-03 + 2 * 6.2215701E-07 * T & + 3 * 2.0747825E-09 * T ** 2 - 4 * 9.484024E-13 * T ** 3 + 4.1635019 / T else dLnPws = 5.8002206E+03 / T ** 2 - 4.8640239E-02 + 2 * 4.1764768E-05 * T & - 3 * 1.4452093E-08 * T ** 2 + 6.5459673 / T end if end if end function dLnPws_","tags":"","loc":"proc/dlnpws_.html"},{"title":"GetTDewPointFromVapPres – MinimalDX","text":"public function GetTDewPointFromVapPres(TDryBulb, VapPres) result(TDewPoint) Return dew-point temperature given dry-bulb temperature and vapor pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6\n Notes:\n The dew point temperature is solved by inverting the equation giving water vapor pressure\n at saturation from temperature rather than using the regressions provided\n by ASHRAE (eqn. 37 and 38) which are much less accurate and have a\n narrower range of validity.\n The Newton-Raphson (NR) method is used on the logarithm of water vapour\n pressure as a function of temperature, which is a very smooth function\n Convergence is usually achieved in 3 to 5 iterations.\n TDryBulb is not really needed here, just used for convenience. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] Return Value real Dew-point temperature in °F [IP] or °C [SI] Calls proc~~gettdewpointfromvappres~~CallsGraph proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~isip isIP proc~gettdewpointfromvappres->proc~isip proc~getsatvappres GetSatVapPres proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gettdewpointfromvappres~~CalledByGraph proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~gettdewpointfromrelhum->proc~gettdewpointfromvappres proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTDewPointFromVapPres Source Code function GetTDewPointFromVapPres ( TDryBulb , VapPres ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6 !+ Notes: !+ The dew point temperature is solved by inverting the equation giving water vapor pressure !+ at saturation from temperature rather than using the regressions provided !+ by ASHRAE (eqn. 37 and 38) which are much less accurate and have a !+ narrower range of validity. !+ The Newton-Raphson (NR) method is used on the logarithm of water vapour !+ pressure as a function of temperature, which is a very smooth function !+ Convergence is usually achieved in 3 to 5 iterations. !+ TDryBulb is not really needed here, just used for convenience. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: lnVP !+ Natural logarithm of partial pressure of water vapor pressure in moist air real :: d_lnVP !+ Derivative of function, calculated numerically real :: lnVP_iter !+ Value of log of vapor water pressure used in NR calculation real :: TDewPoint_iter !+ Value of TDewPoint used in NR calculation real , dimension ( 2 ) :: BOUNDS !+ Valid temperature range in °F [IP] or °C [SI] integer :: index !+ Index used in the calculation ! Bounds and step size as a function of the system of units if ( isIP ()) then BOUNDS ( 1 ) = - 14 8.0 BOUNDS ( 2 ) = 39 2.0 else BOUNDS ( 1 ) = - 10 0.0 BOUNDS ( 2 ) = 20 0.0 end if ! Validity check -- bounds outside which a solution cannot be found if ( VapPres < GetSatVapPres ( BOUNDS ( 1 )) . or . VapPres > GetSatVapPres ( BOUNDS ( 2 ))) then error stop \"Error: partial pressure of water vapor is outside range of validity of equations\" end if ! We use NR to approximate the solution. TDewPoint = TDryBulb lnVP = log ( VapPres ) index = 1 do while (. true .) TDewPoint_iter = TDewPoint ! TDewPoint_iter used in NR calculation lnVP_iter = log ( GetSatVapPres ( TDewPoint_iter )) ! Derivative of function, calculated analytically d_lnVP = dLnPws_ ( TDewPoint_iter ) ! New estimate, bounded by the search domain defined above TDewPoint = TDewPoint_iter - ( lnVP_iter - lnVP ) / d_lnVP TDewPoint = max ( TDewPoint , BOUNDS ( 1 )) TDewPoint = min ( TDewPoint , BOUNDS ( 2 )) if ( abs ( TDewPoint - TDewPoint_iter ) <= PSYCHROLIB_TOLERANCE ) then exit end if if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTDewPointFromVapPres. Stopping.\" end if index = index + 1 end do TDewPoint = min ( TDewPoint , TDryBulb ) end function GetTDewPointFromVapPres","tags":"","loc":"proc/gettdewpointfromvappres.html"},{"title":"GetVapPresFromTDewPoint – MinimalDX","text":"public function GetVapPresFromTDewPoint(TDewPoint) result(VapPres) Return vapor pressure given dew point temperature.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] Return Value real Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] Calls proc~~getvappresfromtdewpoint~~CallsGraph proc~getvappresfromtdewpoint GetVapPresFromTDewPoint proc~getsatvappres GetSatVapPres proc~getvappresfromtdewpoint->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetVapPresFromTDewPoint Source Code function GetVapPresFromTDewPoint ( TDewPoint ) result ( VapPres ) !+ Return vapor pressure given dew point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) end function GetVapPresFromTDewPoint","tags":"","loc":"proc/getvappresfromtdewpoint.html"},{"title":"GetTWetBulbFromHumRatio – MinimalDX","text":"public function GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure) result(TWetBulb) Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Wet-bulb temperature in °F [IP] or °C [SI] Calls proc~~gettwetbulbfromhumratio~~CallsGraph proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~isip isIP proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gettwetbulbfromhumratio~~CalledByGraph proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTWetBulbFromHumRatio Source Code function GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: TDewPoint !+ TDewPoint : Dew-point temperature in °F [IP] or °C [SI] real :: TWetBulbSup !+ Upper value of wet bulb temperature in bissection method (initial guess is from dry bulb temperature) in °F [IP] or °C [SI] real :: TWetBulbInf !+ Lower value of wet bulb temperature in bissection method (initial guess is from dew point temperature) in °F [IP] or °C [SI] real :: Wstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO integer :: index !+ index used in iteration if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , BoundedHumRatio , Pressure ) ! Initial guesses TWetBulbSup = TDryBulb TWetBulbInf = TDewPoint TWetBulb = ( TWetBulbInf + TWetBulbSup ) / 2.0 index = 1 ! Bisection loop do while (( TWetBulbSup - TWetBulbInf ) > PSYCHROLIB_TOLERANCE ) ! Compute humidity ratio at temperature Tstar Wstar = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) ! Get new bounds if ( Wstar > BoundedHumRatio ) then TWetBulbSup = TWetBulb else TWetBulbInf = TWetBulb end if ! New guess of wet bulb temperature TWetBulb = ( TWetBulbSup + TWetBulbInf ) / 2.0 if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTWetBulbFromHumRatio. Stopping.\" end if index = index + 1 end do end function GetTWetBulbFromHumRatio","tags":"","loc":"proc/gettwetbulbfromhumratio.html"},{"title":"GetHumRatioFromTWetBulb – MinimalDX","text":"public function GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure) result(HumRatio) Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Calls proc~~gethumratiofromtwetbulb~~CallsGraph proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~isip isIP proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gethumratiofromtwetbulb~~CalledByGraph proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gethumratiofromtwetbulb proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gethumratiofromtwetbulb proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~gethumratiofromtwetbulb proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetHumRatioFromTWetBulb Source Code function GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: Wsstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if Wsstar = GetSatHumRatio ( TWetBulb , Pressure ) if ( isIP ()) then if ( TWetBulb >= FREEZING_POINT_WATER_IP ) then HumRatio = (( 109 3.0 - 0.556 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 109 3.0 + 0.444 * TDryBulb - TWetBulb ) else HumRatio = (( 122 0.0 - 0.04 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 122 0.0 + 0.444 * TDryBulb - 0.48 * TWetBulb ) end if else if ( TWetBulb >= FREEZING_POINT_WATER_SI ) then HumRatio = (( 250 1.0 - 2.326 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 250 1.0 + 1.86 * TDryBulb - 4.186 * TWetBulb ) else HumRatio = (( 283 0.0 - 0.24 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 283 0.0 + 1.86 * TDryBulb - 2.1 * TWetBulb ) end if end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromTWetBulb","tags":"","loc":"proc/gethumratiofromtwetbulb.html"},{"title":"GetHumRatioFromRelHum – MinimalDX","text":"public function GetHumRatioFromRelHum(TDryBulb, RelHum, Pressure) result(HumRatio) Return humidity ratio given dry-bulb temperature, relative humidity, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Calls proc~~gethumratiofromrelhum~~CallsGraph proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~getvappresfromrelhum GetVapPresFromRelHum proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~gethumratiofromvappres GetHumRatioFromVapPres proc~gethumratiofromrelhum->proc~gethumratiofromvappres proc~getsatvappres GetSatVapPres proc~getvappresfromrelhum->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gethumratiofromrelhum~~CalledByGraph proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetHumRatioFromRelHum Source Code function GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, relative humidity, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromRelHum","tags":"","loc":"proc/gethumratiofromrelhum.html"},{"title":"GetRelHumFromHumRatio – MinimalDX","text":"public function GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure) result(RelHum) Return relative humidity given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Relative humidity in range [0, 1] Calls proc~~getrelhumfromhumratio~~CallsGraph proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~getvappresfromhumratio GetVapPresFromHumRatio proc~getrelhumfromhumratio->proc~getvappresfromhumratio proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~getsatvappres GetSatVapPres proc~getrelhumfromvappres->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getrelhumfromhumratio~~CalledByGraph proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getvaporpressuredeficit->proc~getrelhumfromhumratio Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetRelHumFromHumRatio Source Code function GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) RelHum = GetRelHumFromVapPres ( TDryBulb , VapPres ) end function GetRelHumFromHumRatio","tags":"","loc":"proc/getrelhumfromhumratio.html"},{"title":"GetHumRatioFromTDewPoint – MinimalDX","text":"public function GetHumRatioFromTDewPoint(TDewPoint, Pressure) result(HumRatio) Return humidity ratio given dew-point temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Calls proc~~gethumratiofromtdewpoint~~CallsGraph proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~getsatvappres GetSatVapPres proc~gethumratiofromtdewpoint->proc~getsatvappres proc~gethumratiofromvappres GetHumRatioFromVapPres proc~gethumratiofromtdewpoint->proc~gethumratiofromvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gethumratiofromtdewpoint~~CalledByGraph proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gethumratiofromtdewpoint proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gethumratiofromtdewpoint Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetHumRatioFromTDewPoint Source Code function GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dew-point temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromTDewPoint","tags":"","loc":"proc/gethumratiofromtdewpoint.html"},{"title":"GetTDewPointFromHumRatio – MinimalDX","text":"public function GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure) result(TDewPoint) Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dew-point temperature in °F [IP] or °C [SI] Calls proc~~gettdewpointfromhumratio~~CallsGraph proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~isip isIP proc~gettdewpointfromvappres->proc~isip proc~getsatvappres GetSatVapPres proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gettdewpointfromhumratio~~CalledByGraph proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTDewPointFromHumRatio Source Code function GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromHumRatio","tags":"","loc":"proc/gettdewpointfromhumratio.html"},{"title":"GetHumRatioFromVapPres – MinimalDX","text":"public function GetHumRatioFromVapPres(VapPres, Pressure) result(HumRatio) Return humidity ratio given water vapor pressure and atmospheric pressure.\n Reference:\n ASHRAE Fundamentals (2005) ch. 6 eqn. 22;\n ASHRAE Fundamentals (2009) ch. 1 eqn. 22. Arguments Type Intent Optional Attributes Name real, intent(in) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Called by proc~~gethumratiofromvappres~~CalledByGraph proc~gethumratiofromvappres GetHumRatioFromVapPres proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~gethumratiofromtdewpoint->proc~gethumratiofromvappres proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~gethumratiofromrelhum->proc~gethumratiofromvappres proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gethumratiofromtdewpoint proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gethumratiofromtdewpoint proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetHumRatioFromVapPres Source Code function GetHumRatioFromVapPres ( VapPres , Pressure ) result ( HumRatio ) !+ Return humidity ratio given water vapor pressure and atmospheric pressure. !+ Reference: !+ ASHRAE Fundamentals (2005) ch. 6 eqn. 22; !+ ASHRAE Fundamentals (2009) ch. 1 eqn. 22. real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if HumRatio = 0.621945 * VapPres / ( Pressure - VapPres ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromVapPres","tags":"","loc":"proc/gethumratiofromvappres.html"},{"title":"GetVapPresFromHumRatio – MinimalDX","text":"public function GetVapPresFromHumRatio(HumRatio, Pressure) result(VapPres) Return vapor pressure given humidity ratio and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] Called by proc~~getvappresfromhumratio~~CalledByGraph proc~getvappresfromhumratio GetVapPresFromHumRatio proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getvappresfromhumratio proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getvappresfromhumratio proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getvappresfromhumratio proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~getrelhumfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getvaporpressuredeficit->proc~getrelhumfromhumratio proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetVapPresFromHumRatio Source Code function GetVapPresFromHumRatio ( HumRatio , Pressure ) result ( VapPres ) !+ Return vapor pressure given humidity ratio and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) VapPres = Pressure * BoundedHumRatio / ( 0.621945 + BoundedHumRatio ) end function GetVapPresFromHumRatio","tags":"","loc":"proc/getvappresfromhumratio.html"},{"title":"GetSpecificHumFromHumRatio – MinimalDX","text":"public function GetSpecificHumFromHumRatio(HumRatio) result(SpecificHum) Return the specific humidity from humidity ratio (aka mixing ratio).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] Return Value real Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Contents Source Code GetSpecificHumFromHumRatio Source Code function GetSpecificHumFromHumRatio ( HumRatio ) result ( SpecificHum ) !+ Return the specific humidity from humidity ratio (aka mixing ratio). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] real :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) SpecificHum = BoundedHumRatio / ( 1.0 + BoundedHumRatio ) end function GetSpecificHumFromHumRatio","tags":"","loc":"proc/getspecifichumfromhumratio.html"},{"title":"GetHumRatioFromSpecificHum – MinimalDX","text":"public function GetHumRatioFromSpecificHum(SpecificHum) result(HumRatio) Return the humidity ratio (aka mixing ratio) from specific humidity.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio) Arguments Type Intent Optional Attributes Name real, intent(in) :: SpecificHum Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Return Value real Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] Contents Source Code GetHumRatioFromSpecificHum Source Code function GetHumRatioFromSpecificHum ( SpecificHum ) result ( HumRatio ) !+ Return the humidity ratio (aka mixing ratio) from specific humidity. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio) real , intent ( in ) :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] if ( SpecificHum < 0.0 . or . SpecificHum >= 1.0 ) then error stop \"Error: specific humidity is outside range [0, 1)\" end if HumRatio = SpecificHum / ( 1.0 - SpecificHum ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromSpecificHum","tags":"","loc":"proc/gethumratiofromspecifichum.html"},{"title":"GetDryAirEnthalpy – MinimalDX","text":"public function GetDryAirEnthalpy(TDryBulb) result(DryAirEnthalpy) Return dry-air enthalpy given dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 28 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] Calls proc~~getdryairenthalpy~~CallsGraph proc~getdryairenthalpy GetDryAirEnthalpy proc~isip isIP proc~getdryairenthalpy->proc~isip Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetDryAirEnthalpy Source Code function GetDryAirEnthalpy ( TDryBulb ) result ( DryAirEnthalpy ) !+ Return dry-air enthalpy given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 28 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: DryAirEnthalpy !+ Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] if ( isIP ()) then DryAirEnthalpy = 0.240 * TDryBulb else DryAirEnthalpy = 1006 * TDryBulb end if end function GetDryAirEnthalpy","tags":"","loc":"proc/getdryairenthalpy.html"},{"title":"GetDryAirDensity – MinimalDX","text":"public function GetDryAirDensity(TDryBulb, Pressure) result(DryAirDensity) Return dry-air density given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1\n Notes:\n Eqn 14 for the perfect gas relationship for dry air.\n Eqn 1 for the universal gas constant.\n The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI] Calls proc~~getdryairdensity~~CallsGraph proc~getdryairdensity GetDryAirDensity proc~isip isIP proc~getdryairdensity->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getdryairdensity->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getdryairdensity->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetDryAirDensity Source Code function GetDryAirDensity ( TDryBulb , Pressure ) result ( DryAirDensity ) !+ Return dry-air density given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirDensity !+ Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI] if ( isIP ()) then DryAirDensity = ( 144 * Pressure ) / R_DA_IP / GetTRankineFromTFahrenheit ( TDryBulb ) else DryAirDensity = Pressure / R_DA_SI / GetTKelvinFromTCelsius ( TDryBulb ) end if end function GetDryAirDensity","tags":"","loc":"proc/getdryairdensity.html"},{"title":"GetDryAirVolume – MinimalDX","text":"public function GetDryAirVolume(TDryBulb, Pressure) result(DryAirVolume) Return dry-air volume given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1\n Notes:\n Eqn 14 for the perfect gas relationship for dry air.\n Eqn 1 for the universal gas constant.\n The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dry air volume in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] Calls proc~~getdryairvolume~~CallsGraph proc~getdryairvolume GetDryAirVolume proc~isip isIP proc~getdryairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getdryairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getdryairvolume->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetDryAirVolume Source Code function GetDryAirVolume ( TDryBulb , Pressure ) result ( DryAirVolume ) !+ Return dry-air volume given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirVolume !+ Dry air volume in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] if ( isIP ()) then DryAirVolume = GetTRankineFromTFahrenheit ( TDryBulb ) * R_DA_IP / ( 144 * Pressure ) else DryAirVolume = GetTKelvinFromTCelsius ( TDryBulb ) * R_DA_SI / Pressure end if end function GetDryAirVolume","tags":"","loc":"proc/getdryairvolume.html"},{"title":"GetTDryBulbFromEnthalpyAndHumRatio – MinimalDX","text":"public function GetTDryBulbFromEnthalpyAndHumRatio(MoistAirEnthalpy, HumRatio) result(TDryBulb) Return dry bulb temperature from enthalpy and humidity ratio.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30\n Notes:\n Based on the GetMoistAirEnthalpy function, rearranged for temperature. Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Return Value real Dry-bulb temperature in °F [IP] or °C [SI] Calls proc~~gettdrybulbfromenthalpyandhumratio~~CallsGraph proc~gettdrybulbfromenthalpyandhumratio GetTDryBulbFromEnthalpyAndHumRatio proc~isip isIP proc~gettdrybulbfromenthalpyandhumratio->proc~isip Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gettdrybulbfromenthalpyandhumratio~~CalledByGraph proc~gettdrybulbfromenthalpyandhumratio GetTDryBulbFromEnthalpyAndHumRatio proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettdrybulbfromenthalpyandhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTDryBulbFromEnthalpyAndHumRatio Source Code function GetTDryBulbFromEnthalpyAndHumRatio ( MoistAirEnthalpy , HumRatio ) result ( TDryBulb ) !+ Return dry bulb temperature from enthalpy and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for temperature. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = ( MoistAirEnthalpy - 106 1.0 * BoundedHumRatio ) / ( 0.240 + 0.444 * BoundedHumRatio ) else TDryBulb = ( MoistAirEnthalpy / 100 0.0 - 250 1.0 * BoundedHumRatio ) / ( 1.006 + 1.86 * BoundedHumRatio ) end if end function GetTDryBulbFromEnthalpyAndHumRatio","tags":"","loc":"proc/gettdrybulbfromenthalpyandhumratio.html"},{"title":"GetHumRatioFromEnthalpyAndTDryBulb – MinimalDX","text":"public function GetHumRatioFromEnthalpyAndTDryBulb(MoistAirEnthalpy, TDryBulb) result(HumRatio) Return humidity ratio from enthalpy and dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30\n Notes:\n Based on the GetMoistAirEnthalpy function, rearranged for humidity ratio. Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Calls proc~~gethumratiofromenthalpyandtdrybulb~~CallsGraph proc~gethumratiofromenthalpyandtdrybulb GetHumRatioFromEnthalpyAndTDryBulb proc~isip isIP proc~gethumratiofromenthalpyandtdrybulb->proc~isip Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~gethumratiofromenthalpyandtdrybulb~~CalledByGraph proc~gethumratiofromenthalpyandtdrybulb GetHumRatioFromEnthalpyAndTDryBulb proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gethumratiofromenthalpyandtdrybulb proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetHumRatioFromEnthalpyAndTDryBulb Source Code function GetHumRatioFromEnthalpyAndTDryBulb ( MoistAirEnthalpy , TDryBulb ) result ( HumRatio ) !+ Return humidity ratio from enthalpy and dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for humidity ratio. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( isIP ()) then HumRatio = ( MoistAirEnthalpy - 0.240 * TDryBulb ) / ( 106 1.0 + 0.444 * TDryBulb ) else HumRatio = ( MoistAirEnthalpy / 100 0.0 - 1.006 * TDryBulb ) / ( 250 1.0 + 1.86 * TDryBulb ) end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromEnthalpyAndTDryBulb","tags":"","loc":"proc/gethumratiofromenthalpyandtdrybulb.html"},{"title":"GetSatVapPres – MinimalDX","text":"public function GetSatVapPres(TDryBulb) result(SatVapPres) Return saturation vapor pressure given dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5\n Important note: the ASHRAE formulae are defined above and below the freezing point but have\n a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae\n should be defined above and below the triple point of water (not the feezing point) in which case \n the discontinuity vanishes. It is essential to use the triple point of water otherwise function\n GetTDewPointFromVapPres, which inverts the present function, does not converge properly around\n the freezing point. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Vapor pressure of saturated air in Psi [IP] or Pa [SI] Calls proc~~getsatvappres~~CallsGraph proc~getsatvappres GetSatVapPres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getsatvappres~~CalledByGraph proc~getsatvappres GetSatVapPres proc~getsathumratio GetSatHumRatio proc~getsathumratio->proc~getsatvappres proc~getrelhumfromtdewpoint GetRelHumFromTDewPoint proc~getrelhumfromtdewpoint->proc~getsatvappres proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~gethumratiofromtdewpoint->proc~getsatvappres proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromvappres->proc~getsatvappres proc~getvappresfromtdewpoint GetVapPresFromTDewPoint proc~getvappresfromtdewpoint->proc~getsatvappres proc~getvappresfromrelhum GetVapPresFromRelHum proc~getvappresfromrelhum->proc~getsatvappres proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getvaporpressuredeficit->proc~getsatvappres proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~getvaporpressuredeficit->proc~getrelhumfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromvappres->proc~getsatvappres proc~getsatairenthalpy GetSatAirEnthalpy proc~getsatairenthalpy->proc~getsathumratio proc~gettdewpointfromrelhum GetTDewPointFromRelHum proc~gettdewpointfromrelhum->proc~getvappresfromrelhum proc~gettdewpointfromrelhum->proc~gettdewpointfromvappres proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gethumratiofromtwetbulb->proc~getsathumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gethumratiofromtdewpoint proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~getdegreeofsaturation GetDegreeOfSaturation proc~getdegreeofsaturation->proc~getsathumratio proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gethumratiofromtdewpoint proc~calcpsychrometricsfromtdewpoint->proc~getdegreeofsaturation proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gethumratiofromtwetbulb proc~gettdewpointfromtwetbulb->proc~gettdewpointfromhumratio proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~psytsatfnhpb PsyTsatFnHPb proc~psytsatfnhpb->proc~getsatairenthalpy proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gethumratiofromrelhum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gethumratiofromtwetbulb proc~calcpsychrometricsfromtwetbulb->proc~getdegreeofsaturation proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum proc~calcpsychrometricsfromrelhum->proc~getdegreeofsaturation proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~gethumratiofromtwetbulb proc~getrelhumfromtwetbulb->proc~getrelhumfromhumratio proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~calcminimaldxcooling->proc~psytsatfnhpb proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetSatVapPres Source Code function GetSatVapPres ( TDryBulb ) result ( SatVapPres ) !+ Return saturation vapor pressure given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 !+ Important note: the ASHRAE formulae are defined above and below the freezing point but have !+ a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae !+ should be defined above and below the triple point of water (not the feezing point) in which case !+ the discontinuity vanishes. It is essential to use the triple point of water otherwise function !+ GetTDewPointFromVapPres, which inverts the present function, does not converge properly around !+ the freezing point. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: LnPws !+ Log of Vapor Pressure of saturated air (dimensionless) real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then if ( TDryBulb < - 14 8.0 . or . TDryBulb > 39 2.0 ) then error stop \"Error: dry bulb temperature must be in range [-148, 392]°F\" end if T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then LnPws = ( - 1.0214165E+04 / T - 4.8932428 - 5.3765794E-03 * T + 1.9202377E-07 * T ** 2 & + 3.5575832E-10 * T ** 3 - 9.0344688E-14 * T ** 4 + 4.1635019 * log ( T )) else LnPws = - 1.0440397E+04 / T - 1.1294650E+01 - 2.7022355E-02 * T + 1.2890360E-05 * T ** 2 & - 2.4780681E-09 * T ** 3 + 6.5459673 * log ( T ) end if else if ( TDryBulb < - 10 0.0 . or . TDryBulb > 20 0.0 ) then error stop \"Error: dry bulb temperature must be in range [-100, 200]°C\" end if T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then LnPws = - 5.6745359E+03 / T + 6.3925247 - 9.677843E-03 * T + 6.2215701E-07 * T ** 2 & + 2.0747825E-09 * T ** 3 - 9.484024E-13 * T ** 4 + 4.1635019 * log ( T ) else LnPws = - 5.8002206E+03 / T + 1.3914993 - 4.8640239E-02 * T + 4.1764768E-05 * T ** 2 & - 1.4452093E-08 * T ** 3 + 6.5459673 * log ( T ) end if end if SatVapPres = exp ( LnPws ) end function GetSatVapPres","tags":"","loc":"proc/getsatvappres.html"},{"title":"GetSatHumRatio – MinimalDX","text":"public function GetSatHumRatio(TDryBulb, Pressure) result(SatHumRatio) Return humidity ratio of saturated air given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Calls proc~~getsathumratio~~CallsGraph proc~getsathumratio GetSatHumRatio proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getsathumratio~~CalledByGraph proc~getsathumratio GetSatHumRatio proc~getsatairenthalpy GetSatAirEnthalpy proc~getsatairenthalpy->proc~getsathumratio proc~getdegreeofsaturation GetDegreeOfSaturation proc~getdegreeofsaturation->proc~getsathumratio proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gethumratiofromtwetbulb->proc~getsathumratio proc~gettdewpointfromtwetbulb GetTDewPointFromTWetBulb proc~gettdewpointfromtwetbulb->proc~gethumratiofromtwetbulb proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~psytsatfnhpb PsyTsatFnHPb proc~psytsatfnhpb->proc~getsatairenthalpy proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getdegreeofsaturation proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getdegreeofsaturation proc~calcpsychrometricsfromtwetbulb->proc~gethumratiofromtwetbulb proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getdegreeofsaturation proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~getrelhumfromtwetbulb GetRelHumFromTWetBulb proc~getrelhumfromtwetbulb->proc~gethumratiofromtwetbulb proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~gettwetbulbfromhumratio proc~calcminimaldxcooling->proc~psytsatfnhpb proc~gettwetbulbfromrelhum GetTWetBulbFromRelHum proc~gettwetbulbfromrelhum->proc~gettwetbulbfromhumratio proc~gettwetbulbfromtdewpoint GetTWetBulbFromTDewPoint proc~gettwetbulbfromtdewpoint->proc~gettwetbulbfromhumratio proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetSatHumRatio Source Code function GetSatHumRatio ( TDryBulb , Pressure ) result ( SatHumRatio ) !+ Return humidity ratio of saturated air given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatHumRatio !+ Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: SatVaporPres !+ Vapor pressure of saturated air in in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] SatVaporPres = GetSatVapPres ( TDryBulb ) SatHumRatio = 0.621945 * SatVaporPres / ( Pressure - SatVaporPres ) ! Validity check. SatHumRatio = max ( SatHumRatio , MIN_HUM_RATIO ) end function GetSatHumRatio","tags":"","loc":"proc/getsathumratio.html"},{"title":"GetSatAirEnthalpy – MinimalDX","text":"public function GetSatAirEnthalpy(TDryBulb, Pressure) result(SatAirEnthalpy) Return saturated air enthalpy given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] Calls proc~~getsatairenthalpy~~CallsGraph proc~getsatairenthalpy GetSatAirEnthalpy proc~getsathumratio GetSatHumRatio proc~getsatairenthalpy->proc~getsathumratio proc~getmoistairenthalpy GetMoistAirEnthalpy proc~getsatairenthalpy->proc~getmoistairenthalpy proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~isip isIP proc~getmoistairenthalpy->proc~isip proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getsatairenthalpy~~CalledByGraph proc~getsatairenthalpy GetSatAirEnthalpy proc~psytsatfnhpb PsyTsatFnHPb proc~psytsatfnhpb->proc~getsatairenthalpy proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~psytsatfnhpb proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetSatAirEnthalpy Source Code function GetSatAirEnthalpy ( TDryBulb , Pressure ) result ( SatAirEnthalpy ) !+ Return saturated air enthalpy given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatAirEnthalpy !+ Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] SatAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , GetSatHumRatio ( TDryBulb , Pressure )) end function GetSatAirEnthalpy","tags":"","loc":"proc/getsatairenthalpy.html"},{"title":"GetVaporPressureDeficit – MinimalDX","text":"public function GetVaporPressureDeficit(TDryBulb, HumRatio, Pressure) result(VaporPressureDeficit) Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n Oke (1987) eqn 2.13a Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Vapor pressure deficit in Psi [IP] or Pa [SI] Calls proc~~getvaporpressuredeficit~~CallsGraph proc~getvaporpressuredeficit GetVaporPressureDeficit proc~getsatvappres GetSatVapPres proc~getvaporpressuredeficit->proc~getsatvappres proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~getvaporpressuredeficit->proc~getrelhumfromhumratio proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius proc~getvappresfromhumratio GetVapPresFromHumRatio proc~getrelhumfromhumratio->proc~getvappresfromhumratio proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~getrelhumfromvappres->proc~getsatvappres Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetVaporPressureDeficit Source Code function GetVaporPressureDeficit ( TDryBulb , HumRatio , Pressure ) result ( VaporPressureDeficit ) !+ Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ Oke (1987) eqn 2.13a real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VaporPressureDeficit !+ Vapor pressure deficit in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VaporPressureDeficit = GetSatVapPres ( TDryBulb ) * ( 1.0 - RelHum ) end function GetVaporPressureDeficit","tags":"","loc":"proc/getvaporpressuredeficit.html"},{"title":"GetDegreeOfSaturation – MinimalDX","text":"public function GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure) result(DegreeOfSaturation) Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation\n at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn 12\n Notes:\n This definition is absent from the 2017 Handbook. Using 2009 version instead. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Degree of saturation in arbitrary unit Calls proc~~getdegreeofsaturation~~CallsGraph proc~getdegreeofsaturation GetDegreeOfSaturation proc~getsathumratio GetSatHumRatio proc~getdegreeofsaturation->proc~getsathumratio proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~isip isIP proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getdegreeofsaturation~~CalledByGraph proc~getdegreeofsaturation GetDegreeOfSaturation proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getdegreeofsaturation proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getdegreeofsaturation proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getdegreeofsaturation Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetDegreeOfSaturation Source Code function GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) result ( DegreeOfSaturation ) !+ Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation !+ at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn 12 !+ Notes: !+ This definition is absent from the 2017 Handbook. Using 2009 version instead. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DegreeOfSaturation !+ Degree of saturation in arbitrary unit real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) DegreeOfSaturation = BoundedHumRatio / GetSatHumRatio ( TDryBulb , Pressure ) end function GetDegreeOfSaturation","tags":"","loc":"proc/getdegreeofsaturation.html"},{"title":"GetMoistAirEnthalpy – MinimalDX","text":"public function GetMoistAirEnthalpy(TDryBulb, HumRatio) result(MoistAirEnthalpy) Return moist air enthalpy given dry-bulb temperature and humidity ratio.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Return Value real Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ Calls proc~~getmoistairenthalpy~~CallsGraph proc~getmoistairenthalpy GetMoistAirEnthalpy proc~isip isIP proc~getmoistairenthalpy->proc~isip Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getmoistairenthalpy~~CalledByGraph proc~getmoistairenthalpy GetMoistAirEnthalpy proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~getmoistairenthalpy proc~psytsatfnhpb PsyTsatFnHPb proc~calcminimaldxcooling->proc~psytsatfnhpb proc~getsatairenthalpy GetSatAirEnthalpy proc~getsatairenthalpy->proc~getmoistairenthalpy proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getmoistairenthalpy proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getmoistairenthalpy proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getmoistairenthalpy proc~psytsatfnhpb->proc~getsatairenthalpy proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetMoistAirEnthalpy Source Code function GetMoistAirEnthalpy ( TDryBulb , HumRatio ) result ( MoistAirEnthalpy ) !+ Return moist air enthalpy given dry-bulb temperature and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirEnthalpy = 0.240 * TDryBulb + BoundedHumRatio * ( 106 1.0 + 0.444 * TDryBulb ) else MoistAirEnthalpy = ( 1.006 * TDryBulb + BoundedHumRatio * ( 250 1.0 + 1.86 * TDryBulb )) * 100 0.0 end if end function GetMoistAirEnthalpy","tags":"","loc":"proc/getmoistairenthalpy.html"},{"title":"GetMoistAirVolume – MinimalDX","text":"public function GetMoistAirVolume(TDryBulb, HumRatio, Pressure) result(MoistAirVolume) Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26\n Notes:\n In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] Calls proc~~getmoistairvolume~~CallsGraph proc~getmoistairvolume GetMoistAirVolume proc~isip isIP proc~getmoistairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getmoistairvolume->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getmoistairvolume~~CalledByGraph proc~getmoistairvolume GetMoistAirVolume proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~getmoistairvolume proc~getmoistairdensity GetMoistAirDensity proc~getmoistairdensity->proc~getmoistairvolume proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~getmoistairvolume proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~calcpsychrometricsfromrelhum->proc~getmoistairvolume proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~getmoistairdensity proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetMoistAirVolume Source Code function GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) result ( MoistAirVolume ) !+ Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirVolume = R_DA_IP * GetTRankineFromTFahrenheit ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / ( 14 4.0 * Pressure ) else MoistAirVolume = R_DA_SI * GetTKelvinFromTCelsius ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / Pressure end if end function GetMoistAirVolume","tags":"","loc":"proc/getmoistairvolume.html"},{"title":"GetTDryBulbFromMoistAirVolumeAndHumRatio – MinimalDX","text":"public function GetTDryBulbFromMoistAirVolumeAndHumRatio(MoistAirVolume, HumRatio, Pressure) result(TDryBulb) Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26\n Notes:\n In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻².\n Based on the GetMoistAirVolume function, rearranged for dry-bulb temperature. Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dry-bulb temperature in °F [IP] or °C [SI] Calls proc~~gettdrybulbfrommoistairvolumeandhumratio~~CallsGraph proc~gettdrybulbfrommoistairvolumeandhumratio GetTDryBulbFromMoistAirVolumeAndHumRatio proc~isip isIP proc~gettdrybulbfrommoistairvolumeandhumratio->proc~isip proc~gettfahrenheitfromtrankine GetTFahrenheitFromTRankine proc~gettdrybulbfrommoistairvolumeandhumratio->proc~gettfahrenheitfromtrankine proc~gettcelsiusfromtkelvin GetTCelsiusFromTKelvin proc~gettdrybulbfrommoistairvolumeandhumratio->proc~gettcelsiusfromtkelvin Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetTDryBulbFromMoistAirVolumeAndHumRatio Source Code function GetTDryBulbFromMoistAirVolumeAndHumRatio ( MoistAirVolume , HumRatio , Pressure ) result ( TDryBulb ) !+ Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². !+ Based on the `GetMoistAirVolume` function, rearranged for dry-bulb temperature. real , intent ( in ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = GetTFahrenheitFromTRankine ( MoistAirVolume * ( 144 * Pressure ) & / ( R_DA_IP * ( 1 + 1.607858 * BoundedHumRatio ))) else TDryBulb = GetTCelsiusFromTKelvin ( MoistAirVolume * Pressure & / ( R_DA_SI * ( 1 + 1.607858 * BoundedHumRatio ))) end if end function GetTDryBulbFromMoistAirVolumeAndHumRatio","tags":"","loc":"proc/gettdrybulbfrommoistairvolumeandhumratio.html"},{"title":"GetMoistAirDensity – MinimalDX","text":"public function GetMoistAirDensity(TDryBulb, HumRatio, Pressure) result(MoistAirDensity) Return moist air density given humidity ratio, dry bulb temperature, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 11 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI] Calls proc~~getmoistairdensity~~CallsGraph proc~getmoistairdensity GetMoistAirDensity proc~getmoistairvolume GetMoistAirVolume proc~getmoistairdensity->proc~getmoistairvolume proc~isip isIP proc~getmoistairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getmoistairvolume->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getmoistairdensity~~CalledByGraph proc~getmoistairdensity GetMoistAirDensity proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~getmoistairdensity proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetMoistAirDensity Source Code function GetMoistAirDensity ( TDryBulb , HumRatio , Pressure ) result ( MoistAirDensity ) !+ Return moist air density given humidity ratio, dry bulb temperature, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 11 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirDensity !+ Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) MoistAirDensity = ( 1.0 + BoundedHumRatio ) / GetMoistAirVolume ( TDryBulb , BoundedHumRatio , Pressure ) end function GetMoistAirDensity","tags":"","loc":"proc/getmoistairdensity.html"},{"title":"GetStandardAtmPressure – MinimalDX","text":"public function GetStandardAtmPressure(Altitude) result(StandardAtmPressure) Return standard atmosphere barometric pressure, given the elevation (altitude).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] Return Value real Standard atmosphere barometric pressure in Psi [IP] or Pa [SI] Calls proc~~getstandardatmpressure~~CallsGraph proc~getstandardatmpressure GetStandardAtmPressure proc~isip isIP proc~getstandardatmpressure->proc~isip Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetStandardAtmPressure Source Code function GetStandardAtmPressure ( Altitude ) result ( StandardAtmPressure ) !+ Return standard atmosphere barometric pressure, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmPressure !+ Standard atmosphere barometric pressure in Psi [IP] or Pa [SI] if ( isIP ()) then StandardAtmPressure = 1 4.696 * ( 1.0 - 6.8754e-06 * Altitude ) ** 5.2559 else StandardAtmPressure = 101325 * ( 1 - 2.25577e-05 * Altitude ) ** 5.2559 end if end function GetStandardAtmPressure","tags":"","loc":"proc/getstandardatmpressure.html"},{"title":"GetStandardAtmTemperature – MinimalDX","text":"public function GetStandardAtmTemperature(Altitude) result(StandardAtmTemperature) Return standard atmosphere temperature, given the elevation (altitude).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4 Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] Return Value real Standard atmosphere dry-bulb temperature in °F [IP] or °C [SI] Calls proc~~getstandardatmtemperature~~CallsGraph proc~getstandardatmtemperature GetStandardAtmTemperature proc~isip isIP proc~getstandardatmtemperature->proc~isip Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetStandardAtmTemperature Source Code function GetStandardAtmTemperature ( Altitude ) result ( StandardAtmTemperature ) !+ Return standard atmosphere temperature, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmTemperature !+ Standard atmosphere dry-bulb temperature in °F [IP] or °C [SI] if ( isIP ()) then StandardAtmTemperature = 5 9.0 - 0.00356620 * Altitude else StandardAtmTemperature = 1 5.0 - 0.0065 * Altitude end if end function GetStandardAtmTemperature","tags":"","loc":"proc/getstandardatmtemperature.html"},{"title":"GetSeaLevelPressure – MinimalDX","text":"public function GetSeaLevelPressure(StnPressure, Altitude, TDryBulb) result(SeaLevelPressure) Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure.\n Reference:\n Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959,\n ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition,\n Brooks/Cole 2000, ch. 1.\n Notes:\n The standard procedure for the US is to use for TDryBulb the average\n of the current station temperature and the station temperature from 12 hours ago. Arguments Type Intent Optional Attributes Name real, intent(in) :: StnPressure Observed station pressure in Psi [IP] or Pa [SI] real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Sea level barometric pressure in Psi [IP] or Pa [SI] Calls proc~~getsealevelpressure~~CallsGraph proc~getsealevelpressure GetSeaLevelPressure proc~isip isIP proc~getsealevelpressure->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsealevelpressure->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsealevelpressure->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~getsealevelpressure~~CalledByGraph proc~getsealevelpressure GetSeaLevelPressure proc~getstationpressure GetStationPressure proc~getstationpressure->proc~getsealevelpressure Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetSeaLevelPressure Source Code function GetSeaLevelPressure ( StnPressure , Altitude , TDryBulb ) result ( SeaLevelPressure ) !+ Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure. !+ Reference: !+ Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959, !+ ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition, !+ Brooks/Cole 2000, ch. 1. !+ Notes: !+ The standard procedure for the US is to use for TDryBulb the average !+ of the current station temperature and the station temperature from 12 hours ago. real , intent ( in ) :: StnPressure !+ Observed station pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real :: TColumn !+ Average temperature in column of air in R [IP] or K [SI] real :: H !+ scale height (dimensionless) if ( isIP ()) then ! Calculate average temperature in column of air, assuming a lapse rate ! of 3.6 °F/1000ft TColumn = TDryBulb + 0.0036 * Altitude / 2.0 ! Determine the scale height H = 5 3.351 * GetTRankineFromTFahrenheit ( TColumn ) else ! Calculate average temperature in column of air, assuming a lapse rate ! of 6.5 °C/km TColumn = TDryBulb + 0.0065 * Altitude / 2.0 ! Determine the scale height H = 28 7.055 * GetTKelvinFromTCelsius ( TColumn ) / 9.807 end if ! Calculate the sea level pressure SeaLevelPressure = StnPressure * exp ( Altitude / H ) end function GetSeaLevelPressure","tags":"","loc":"proc/getsealevelpressure.html"},{"title":"GetStationPressure – MinimalDX","text":"public function GetStationPressure(SeaLevelPressure, Altitude, TDryBulb) result(StationPressure) Return station pressure from sea level pressure.\n Reference:\n See 'GetSeaLevelPressure'\n Notes:\n This function is just the inverse of 'GetSeaLevelPressure'. Arguments Type Intent Optional Attributes Name real, intent(in) :: SeaLevelPressure Sea level barometric pressure in Psi [IP] or Pa [SI] real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Station pressure in Psi [IP] or Pa [SI] Calls proc~~getstationpressure~~CallsGraph proc~getstationpressure GetStationPressure proc~getsealevelpressure GetSeaLevelPressure proc~getstationpressure->proc~getsealevelpressure proc~isip isIP proc~getsealevelpressure->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsealevelpressure->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsealevelpressure->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code GetStationPressure Source Code function GetStationPressure ( SeaLevelPressure , Altitude , TDryBulb ) result ( StationPressure ) !+ Return station pressure from sea level pressure. !+ Reference: !+ See 'GetSeaLevelPressure' !+ Notes: !+ This function is just the inverse of 'GetSeaLevelPressure'. real , intent ( in ) :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: StationPressure !+ Station pressure in Psi [IP] or Pa [SI] StationPressure = SeaLevelPressure / GetSeaLevelPressure ( 1.0 , Altitude , TDryBulb ) end function GetStationPressure","tags":"","loc":"proc/getstationpressure.html"},{"title":"SetUnitSystem – MinimalDX","text":"public subroutine SetUnitSystem(UnitSystem) Set the system of units to use (SI or IP).\n Notes: this function HAS TO BE CALLED before the library can be used Arguments Type Intent Optional Attributes Name integer, intent(in) :: UnitSystem Called by proc~~setunitsystem~~CalledByGraph proc~setunitsystem SetUnitSystem proc~initpsychrometrics InitPsychrometrics proc~initpsychrometrics->proc~setunitsystem proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~initpsychrometrics proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code SetUnitSystem Source Code subroutine SetUnitSystem ( UnitSystem ) !+ Set the system of units to use (SI or IP). !+ Notes: this function *HAS TO BE CALLED* before the library can be used integer , intent ( in ) :: UnitSystem !+ Units: string indicating the system of units chosen (SI or IP) if (. not . ( UnitSystem == SI . or . UnitSystem == IP )) then error stop \"The system of units has to be either SI or IP.\" end if PSYCHROLIB_UNITS = UnitSystem ! Define tolerance on temperature calculations ! The tolerance is the same in IP and SI if ( UnitSystem == IP ) then PSYCHROLIB_TOLERANCE = 0.001 * 9.0 / 5.0 else PSYCHROLIB_TOLERANCE = 0.001 end if end subroutine SetUnitSystem","tags":"","loc":"proc/setunitsystem.html"},{"title":"CalcPsychrometricsFromTWetBulb – MinimalDX","text":"public subroutine CalcPsychrometricsFromTWetBulb(TDryBulb, TWetBulb, Pressure, HumRatio, TDewPoint, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Utility function to calculate humidity ratio, dew-point temperature, relative humidity,\n vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n dry-bulb temperature, wet-bulb temperature, and pressure. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] real, intent(out) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(out) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(out) :: RelHum Relative humidity in range [0, 1] real, intent(out) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(out) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real, intent(out) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real, intent(out) :: DegreeOfSaturation Degree of saturation [unitless] Calls proc~~calcpsychrometricsfromtwetbulb~~CallsGraph proc~calcpsychrometricsfromtwetbulb CalcPsychrometricsFromTWetBulb proc~getvappresfromhumratio GetVapPresFromHumRatio proc~calcpsychrometricsfromtwetbulb->proc~getvappresfromhumratio proc~getmoistairvolume GetMoistAirVolume proc~calcpsychrometricsfromtwetbulb->proc~getmoistairvolume proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~calcpsychrometricsfromtwetbulb->proc~gethumratiofromtwetbulb proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~calcpsychrometricsfromtwetbulb->proc~gettdewpointfromhumratio proc~getdegreeofsaturation GetDegreeOfSaturation proc~calcpsychrometricsfromtwetbulb->proc~getdegreeofsaturation proc~getmoistairenthalpy GetMoistAirEnthalpy proc~calcpsychrometricsfromtwetbulb->proc~getmoistairenthalpy proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~calcpsychrometricsfromtwetbulb->proc~getrelhumfromhumratio proc~isip isIP proc~getmoistairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getmoistairvolume->proc~gettkelvinfromtcelsius proc~gethumratiofromtwetbulb->proc~isip proc~getsathumratio GetSatHumRatio proc~gethumratiofromtwetbulb->proc~getsathumratio proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getdegreeofsaturation->proc~getsathumratio proc~getmoistairenthalpy->proc~isip proc~getrelhumfromhumratio->proc~getvappresfromhumratio proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~getrelhumfromvappres->proc~getsatvappres proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code CalcPsychrometricsFromTWetBulb Source Code subroutine CalcPsychrometricsFromTWetBulb ( TDryBulb , & TWetBulb , & Pressure , & HumRatio , & TDewPoint , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, dew-point temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, wet-bulb temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTWetBulb","tags":"","loc":"proc/calcpsychrometricsfromtwetbulb.html"},{"title":"CalcPsychrometricsFromTDewPoint – MinimalDX","text":"public subroutine CalcPsychrometricsFromTDewPoint(TDryBulb, TDewPoint, Pressure, HumRatio, TWetBulb, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity,\n vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n dry-bulb temperature, dew-point temperature, and pressure. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] real, intent(out) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(out) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(out) :: RelHum Relative humidity in range [0, 1] real, intent(out) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(out) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real, intent(out) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real, intent(out) :: DegreeOfSaturation Degree of saturation [unitless] Calls proc~~calcpsychrometricsfromtdewpoint~~CallsGraph proc~calcpsychrometricsfromtdewpoint CalcPsychrometricsFromTDewPoint proc~getvappresfromhumratio GetVapPresFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~getvappresfromhumratio proc~getmoistairvolume GetMoistAirVolume proc~calcpsychrometricsfromtdewpoint->proc~getmoistairvolume proc~gethumratiofromtdewpoint GetHumRatioFromTDewPoint proc~calcpsychrometricsfromtdewpoint->proc~gethumratiofromtdewpoint proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~gettwetbulbfromhumratio proc~getdegreeofsaturation GetDegreeOfSaturation proc~calcpsychrometricsfromtdewpoint->proc~getdegreeofsaturation proc~getmoistairenthalpy GetMoistAirEnthalpy proc~calcpsychrometricsfromtdewpoint->proc~getmoistairenthalpy proc~getrelhumfromhumratio GetRelHumFromHumRatio proc~calcpsychrometricsfromtdewpoint->proc~getrelhumfromhumratio proc~isip isIP proc~getmoistairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getmoistairvolume->proc~gettkelvinfromtcelsius proc~gethumratiofromvappres GetHumRatioFromVapPres proc~gethumratiofromtdewpoint->proc~gethumratiofromvappres proc~getsatvappres GetSatVapPres proc~gethumratiofromtdewpoint->proc~getsatvappres proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~getsathumratio GetSatHumRatio proc~getdegreeofsaturation->proc~getsathumratio proc~getmoistairenthalpy->proc~isip proc~getrelhumfromhumratio->proc~getvappresfromhumratio proc~getrelhumfromvappres GetRelHumFromVapPres proc~getrelhumfromhumratio->proc~getrelhumfromvappres proc~getsathumratio->proc~getsatvappres proc~gethumratiofromtwetbulb->proc~isip proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getrelhumfromvappres->proc~getsatvappres proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getsatvappres->proc~isip proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~getsatvappres->proc~gettkelvinfromtcelsius proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code CalcPsychrometricsFromTDewPoint Source Code subroutine CalcPsychrometricsFromTDewPoint ( TDryBulb , & TDewPoint , & Pressure , & HumRatio , & TWetBulb , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, dew-point temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTDewPoint","tags":"","loc":"proc/calcpsychrometricsfromtdewpoint.html"},{"title":"CalcPsychrometricsFromRelHum – MinimalDX","text":"public subroutine CalcPsychrometricsFromRelHum(TDryBulb, RelHum, Pressure, HumRatio, TWetBulb, TDewPoint, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature,\n vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n dry-bulb temperature, relative humidity and pressure. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] real, intent(out) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(out) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(out) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(out) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(out) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real, intent(out) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real, intent(out) :: DegreeOfSaturation Degree of saturation [unitless] Calls proc~~calcpsychrometricsfromrelhum~~CallsGraph proc~calcpsychrometricsfromrelhum CalcPsychrometricsFromRelHum proc~getvappresfromhumratio GetVapPresFromHumRatio proc~calcpsychrometricsfromrelhum->proc~getvappresfromhumratio proc~gethumratiofromrelhum GetHumRatioFromRelHum proc~calcpsychrometricsfromrelhum->proc~gethumratiofromrelhum proc~getmoistairvolume GetMoistAirVolume proc~calcpsychrometricsfromrelhum->proc~getmoistairvolume proc~gettwetbulbfromhumratio GetTWetBulbFromHumRatio proc~calcpsychrometricsfromrelhum->proc~gettwetbulbfromhumratio proc~gettdewpointfromhumratio GetTDewPointFromHumRatio proc~calcpsychrometricsfromrelhum->proc~gettdewpointfromhumratio proc~getdegreeofsaturation GetDegreeOfSaturation proc~calcpsychrometricsfromrelhum->proc~getdegreeofsaturation proc~getmoistairenthalpy GetMoistAirEnthalpy proc~calcpsychrometricsfromrelhum->proc~getmoistairenthalpy proc~gethumratiofromvappres GetHumRatioFromVapPres proc~gethumratiofromrelhum->proc~gethumratiofromvappres proc~getvappresfromrelhum GetVapPresFromRelHum proc~gethumratiofromrelhum->proc~getvappresfromrelhum proc~isip isIP proc~getmoistairvolume->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getmoistairvolume->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getmoistairvolume->proc~gettkelvinfromtcelsius proc~gettwetbulbfromhumratio->proc~gettdewpointfromhumratio proc~gethumratiofromtwetbulb GetHumRatioFromTWetBulb proc~gettwetbulbfromhumratio->proc~gethumratiofromtwetbulb proc~gettdewpointfromhumratio->proc~getvappresfromhumratio proc~gettdewpointfromvappres GetTDewPointFromVapPres proc~gettdewpointfromhumratio->proc~gettdewpointfromvappres proc~getsathumratio GetSatHumRatio proc~getdegreeofsaturation->proc~getsathumratio proc~getmoistairenthalpy->proc~isip proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~gethumratiofromtwetbulb->proc~isip proc~gethumratiofromtwetbulb->proc~getsathumratio proc~getvappresfromrelhum->proc~getsatvappres proc~gettdewpointfromvappres->proc~isip proc~gettdewpointfromvappres->proc~getsatvappres proc~dlnpws_ dLnPws_ proc~gettdewpointfromvappres->proc~dlnpws_ proc~getsatvappres->proc~isip proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~getsatvappres->proc~gettkelvinfromtcelsius proc~dlnpws_->proc~isip proc~dlnpws_->proc~gettrankinefromtfahrenheit proc~dlnpws_->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code CalcPsychrometricsFromRelHum Source Code subroutine CalcPsychrometricsFromRelHum ( TDryBulb , & RelHum , & Pressure , & HumRatio , & TWetBulb , & TDewPoint , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, relative humidity and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromRelHum","tags":"","loc":"proc/calcpsychrometricsfromrelhum.html"},{"title":"PsyTsatFnHPb – MinimalDX","text":"public function PsyTsatFnHPb(H, PB, calledfrom) result(T) Uses psychrolib proc~~psytsatfnhpb~~UsesGraph proc~psytsatfnhpb PsyTsatFnHPb module~psychrolib psychrolib proc~psytsatfnhpb->module~psychrolib Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name real, intent(in) :: H real, intent(in) :: PB character(len=*), intent(in), optional :: calledfrom Return Value real Calls proc~~psytsatfnhpb~~CallsGraph proc~psytsatfnhpb PsyTsatFnHPb proc~getsatairenthalpy GetSatAirEnthalpy proc~psytsatfnhpb->proc~getsatairenthalpy proc~getsathumratio GetSatHumRatio proc~getsatairenthalpy->proc~getsathumratio proc~getmoistairenthalpy GetMoistAirEnthalpy proc~getsatairenthalpy->proc~getmoistairenthalpy proc~getsatvappres GetSatVapPres proc~getsathumratio->proc~getsatvappres proc~isip isIP proc~getmoistairenthalpy->proc~isip proc~getsatvappres->proc~isip proc~gettrankinefromtfahrenheit GetTRankineFromTFahrenheit proc~getsatvappres->proc~gettrankinefromtfahrenheit proc~gettkelvinfromtcelsius GetTKelvinFromTCelsius proc~getsatvappres->proc~gettkelvinfromtcelsius Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~psytsatfnhpb~~CalledByGraph proc~psytsatfnhpb PsyTsatFnHPb proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->proc~psytsatfnhpb proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->proc~calcminimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code PsyTsatFnHPb Source Code FUNCTION PsyTsatFnHPb ( H , PB , calledfrom ) RESULT ( T ) ! FUNCTION INFORMATION: !       AUTHOR         George Shih !       DATE WRITTEN   May 1976 !       MODIFIED       July 2003; LKL -- peg min/max values (outside range of functions) !       RE-ENGINEERED  na ! PURPOSE OF THIS FUNCTION: ! This function provides the saturation temperature from the enthalpy ! and barometric pressure. ! METHODOLOGY EMPLOYED: ! na ! REFERENCES: ! ASHRAE HANDBOOK OF FUNDAMENTALS, 1972, P99, EQN 22 ! USE STATEMENTS: USE psychrolib , ONLY : GetSatAirEnthalpy IMPLICIT NONE ! Enforce explicit typing of all variables in this routine ! FUNCTION ARGUMENT DEFINITIONS: REAL , intent ( in ) :: H ! enthalpy {J/kg} REAL , intent ( in ) :: PB ! barometric pressure {Pascals} character ( len =* ), intent ( in ), optional :: calledfrom ! routine this function was called from (error messages) REAL :: T ! result=> saturation temperature {C} ! FUNCTION PARAMETER DEFINITIONS: ! na ! INTERFACE BLOCK SPECIFICATIONS ! na ! DERIVED TYPE DEFINITIONS ! na ! FUNCTION LOCAL VARIABLE DECLARATIONS: REAL T1 ! APPROXIMATE SATURATION TEMPERATURE (C) REAL T2 ! APPROXIMATE SATURATION TEMPERATURE (C) REAL TN ! NEW ASSUMED SATURATION TEMPERATURE (C) REAL H1 ! APPROXIMATE ENTHALPY (J/KG) REAL H2 ! APPROXIMATE ENTHALPY (J/KG) REAL Y1 ! ERROR IN ENTHALPY REAL Y2 ! ERROR IN ENTHALPY INTEGER IterCount REAL HH ! temporary enthalpy (calculation) value LOGICAL FlagError ! Set when errors should be flagged REAL :: Hloc ! local value of H !                                      CHECK H IN RANGE. HH = H + 1.78637e4 IF ( H >= 0. ) THEN Hloc = MAX ( 0.00001 , H ) ELSE IF ( H < 0. ) THEN Hloc = MIN ( - . 00001 , H ) END IF FlagError = . false . ! IF ( HH > 7.5222e4 ) GO TO 20 IF ( HH > 2.7297e4 ) GO TO 60 IF ( HH > - 6.7012e2 ) GO TO 50 IF ( HH > - 2.2138e4 ) GO TO 40 IF ( HH < - 4.24e4 ) HH =- 4.24e4 ! Peg to minimum GO TO 30 20 CONTINUE IF ( HH < 1.8379e5 ) GO TO 70 IF ( HH < 4.7577e5 ) GO TO 80 IF ( HH < 1.5445e6 ) GO TO 90 IF ( HH < 3.8353e6 ) GO TO 100 IF ( HH > 4.5866e7 ) HH = 4.5866e7 ! Peg to maximum GO TO 110 ! !                                      TEMP. IS FROM -60 C  TO  -40 C 30 CONTINUE T = F6 ( HH , - 1 9.44e0 , 8.53675e-4 , - 5.12637e-9 , - 9.85546e-14 , - 1.00102e-18 , - 4.2705e-24 ) GO TO 120 !                                      TEMP. IS FROM -40 C  TO  -20 C 40 CONTINUE T = F6 ( HH , - 1.94224e1 , 8.5892e-4 , - 4.50709e-9 , - 6.19492e-14 , 8.71734e-20 , 8.73051e-24 ) GO TO 120 !                                      TEMP. IS FROM -20 C  TO    0 C 50 CONTINUE T = F6 ( HH , - 1.94224e1 , 8.59061e-4 , - 4.4875e-9 , - 5.76696e-14 , 7.72217e-19 , 3.97894e-24 ) GO TO 120 !                                      TEMP. IS FROM   0 C  TO   20 C 60 CONTINUE T = F6 ( HH , - 2.01147e1 , 9.04936e-4 , - 6.83305e-9 , 2.3261e-14 , 7.27237e-20 , - 6.31939e-25 ) GO TO 120 !                                      TEMP. IS FROM  20 C  TO   40 C 70 CONTINUE T = F6 ( HH , - 1.82124e1 , 8.31683e-4 , - 6.16461e-9 , 3.06411e-14 , - 8.60964e-20 , 1.03003e-25 ) GO TO 120 !                                      TEMP. IS FROM  40 C  TO   60 C 80 CONTINUE T = F6 ( HH , - 1.29419e0 , 3.88538e-4 , - 1.30237e-9 , 2.78254e-15 , - 3.27225e-21 , 1.60969e-27 ) GO TO 120 !                                      TEMP. IS FROM   60 C TO   80 C 90 CONTINUE T = F6 ( HH , 2.39214e1 , 1.27519e-4 , - 1.52089e-10 , 1.1043e-16 , - 4.33919e-23 , 7.05296e-30 ) GO TO 120 !                                      TEMP. IS FROM   80 C TO   90 C 100 CONTINUE T = F6 ( HH , 4.88446e1 , 3.85534e-5 , - 1.78805e-11 , 4.87224e-18 , - 7.15283e-25 , 4.36246e-32 ) GO TO 120 !                                      TEMP. IS FROM   90 C TO  100C 110 CONTINUE T = F7 ( HH , 7.60565e11 , 5.80534e4 , - 7.36433e-3 , 5.11531e-10 , - 1.93619e-17 , 3.70511e-25 , - 2.77313e-33 ) !                                      IF THE BAROMETRIC PRESSURE IS !                                      EQUAL TO 1.0133E5 , SATURATION !                                      TEMP. IS CALCULATED BY ABOVE EQUA !                                      OTHERWISE TEMP. IS COMPUTED BY !                                      FOLLOWING ITERATION METHOD 120 CONTINUE IF ( ABS ( PB - 1.0133e5 ) / 1.0133e5 <= 0.01 ) GO TO 170 IterCount = 0 T1 = T H1 = GetSatAirEnthalpy ( T1 , PB ) Y1 = H1 - Hloc IF ( ABS ( Y1 / Hloc ) <= 0.1e-4 ) GO TO 140 T2 = T1 * 0.9 130 IterCount = IterCount + 1 H2 = GetSatAirEnthalpy ( T2 , PB ) Y2 = H2 - Hloc IF ( ABS ( Y2 / Hloc ) <= 0.1e-4 ) GO TO 150 IF ( Y2 == Y1 ) GO TO 150 TN = T2 - Y2 / ( Y2 - Y1 ) * ( T2 - T1 ) IF ( IterCount > 30 ) GO TO 160 T1 = T2 T2 = TN Y1 = Y2 GO TO 130 140 CONTINUE T = T1 GO TO 170 150 CONTINUE T = T2 GO TO 170 160 CONTINUE 170 CONTINUE !   result is T RETURN CONTAINS REAL FUNCTION F6 ( X , A0 , A1 , A2 , A3 , A4 , A5 ) IMPLICIT NONE REAL X REAL A0 , A1 , A2 , A3 , A4 , A5 F6 = A0 + X * ( A1 + X * ( A2 + X * ( A3 + X * ( A4 + X * A5 )))) RETURN END FUNCTION F6 REAL FUNCTION F7 ( X , A0 , A1 , A2 , A3 , A4 , A5 , A6 ) IMPLICIT NONE REAL X , A6 REAL A0 , A1 , A2 , A3 , A4 , A5 F7 = ( A0 + X * ( A1 + X * ( A2 + X * ( A3 + X * ( A4 + X * ( A5 + X * A6 )))))) / 1.0e10 RETURN END FUNCTION F7 END FUNCTION PsyTsatFnHPb","tags":"","loc":"proc/psytsatfnhpb.html"},{"title":"MinimalDXCooling – MinimalDX","text":"Contains a simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil. Used by module~~minimaldxcooling~~UsedByGraph module~minimaldxcooling MinimalDXCooling proc~simminimaldxcooling SimMinimalDXCooling proc~simminimaldxcooling->module~minimaldxcooling Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines CalcMinimalDXCooling Subroutines public subroutine CalcMinimalDXCooling (OutdoorTDryBulb, OutdoorHumRatio, OutdoorPressure, InletTDryBulb, InletHumRatio, RatedCOP, RatedTotCap, PartLoadRatio, RatedAirMassFlowRate, OutletTemperature, OutletHumRatio, ElecCoolingPower, SensCoolingEnergyRate, LatCoolingEnergyRate, TotalCoolingEnergyRate, TotalSensibleHeatOut) Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil.\n Adapted from EnergyPlus CalcDoe2DXCoil by D.Meyer and R. Raustad (2018). Read more… Arguments Type Intent Optional Attributes Name real, intent(in) :: OutdoorTDryBulb Outdoor dry bulb air temperature [°C] real, intent(in) :: OutdoorHumRatio Outdoor air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: OutdoorPressure Outdoor barometric pressure [Pa] real, intent(in) :: InletTDryBulb Indoor (inlet) dry bulb air temperature [°C] real, intent(in) :: InletHumRatio Indoor (inlet) air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: RatedCOP Rated Coefficient Of Performance (COP) [1] real, intent(in) :: RatedTotCap Rated (total) system capacity [W] real, intent(in) :: PartLoadRatio Part load ratio (PLR). This is the actual cooling effect produced by the AC unit divided by the maximum\n cooling effect available - i.e. PLR = (SensibleCoolingLoad / SensCoolingEnergyRate) [1] real, intent(in) :: RatedAirMassFlowRate Rated air mass flow rate [kg s⁻¹] real, intent(out) :: OutletTemperature Actual (calculated) outlet air dry bulb temperature existing the cooling coil [°C] real, intent(out) :: OutletHumRatio Actual (calculated) outlet air humidity ratio existing the cooling coil [kgH₂O kgAIR⁻¹] real, intent(out) :: ElecCoolingPower Calculated electrical power consumed by the DX unit [W] real, intent(out) :: SensCoolingEnergyRate Sensible cooling power used to calculate the PLR. This is the maximum amount of sensible heat rate that the coil\n is capable of extracting from the indoor environment for the specified conditions. [W] real, intent(out) :: LatCoolingEnergyRate real, intent(out) :: TotalCoolingEnergyRate Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) [W] real, intent(out) :: TotalSensibleHeatOut Total power rejected by the evaporator into the outdoor environment\n i.e. TotalCoolingEnergyRate + ElecCoolingPower [W]","tags":"","loc":"module/minimaldxcooling.html"},{"title":"MinimalDXCoolingDriver – MinimalDX","text":"Contains a simplified EnergyPlus subroutine for simulating the performance of a DX cooling coil. Contents Subroutines SimMinimalDXCooling Subroutines public subroutine SimMinimalDXCooling (OutdoorTDryBulb, OutdoorHumRatio, OutdoorPressure, InletTDryBulb, InletHumRatio, RatedCOP, RatedTotCap, SensibleCoolingLoad, RatedAirMassFlowRate, COP, TotalCoolingCapacity, OutletTemperature, OutletHumRatio, ElecCoolingPower, LatCoolingEnergyRate, TotalCoolingEnergyRate, TotalSensibleHeatOut) Simplified EnergyPlus subroutine for calculating the performance of a DX cooling coil.\n This is the subroutine to call from your program. Arguments Type Intent Optional Attributes Name real, intent(in) :: OutdoorTDryBulb Outdoor dry bulb air temperature [°C] real, intent(in) :: OutdoorHumRatio Outdoor air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: OutdoorPressure Outdoor barometric pressure [Pa] real, intent(in) :: InletTDryBulb Indoor (inlet) dry bulb air temperature [°C] real, intent(in) :: InletHumRatio Indoor (inlet) air humidity ratio [kgH₂O kgAIR⁻¹] real, intent(in) :: RatedCOP Rated Coefficient Of Performance (COP) [1] real, intent(in) :: RatedTotCap Rated (total) system capacity [W] real, intent(in) :: SensibleCoolingLoad Building sensible load to be met [W] real, intent(in) :: RatedAirMassFlowRate rated air mass flow rate [kg s⁻¹] real, intent(out) :: COP Actual (calculated) Coefficient Of Performance (COP) [1] real, intent(out) :: TotalCoolingCapacity Actual (calculated) total system capacity [W] real, intent(out) :: OutletTemperature Actual (calculated) outlet air dry bulb temperature existing the cooling coil [°C] real, intent(out) :: OutletHumRatio Actual (calculated) outlet air humidity ratio existing the cooling coil [kgH₂O kgAIR⁻¹] real, intent(out) :: ElecCoolingPower Calculated electrical power consumed by the DX unit [W] real, intent(out) :: LatCoolingEnergyRate real, intent(out) :: TotalCoolingEnergyRate Total cooling power of the DX unit (energy rate extracted by DX unit from the indoor environment) [W] real, intent(out) :: TotalSensibleHeatOut Total power rejected by the evaporator into the outdoor environment\n i.e. TotalCoolingEnergyRate + ElecCoolingPower [W]","tags":"","loc":"module/minimaldxcoolingdriver.html"},{"title":"MinimalDXFan – MinimalDX","text":"This module currently contains one function (SimpleFanOnOff) for simulating\n a simple on/off fan. Modified by D. Meyer and R. Raustad (2018). Used by module~~minimaldxfan~~UsedByGraph module~minimaldxfan MinimalDXFan proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->module~minimaldxfan Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions GetOnOffFan Functions public function GetOnOffFan (Mode, MotEff, FanPower, MotInAirFrac, InletAirEnthalpy, AirMassFlowRate) result(OutletAirEnthalpy) Simplified version of SimOnOffFan subroutine in EnergyPlus\n Given the mode of operation (on or off), fan motor efficiency, power of the fan, fraction of motor heat entering air stream\n moist air enthaply of the air entering the fan, and mass flow rate, it returns the moist air enthaply of the air\n after it has passed through the fan. It assumes sensible heating process only - i.e. it does not change the moisture\n in the air - and the mass flow rate across the component remains the same.\n Original Credits: NREL Energy Plus, Shirey, R. Raustad - FSEC, Brent Griffith,  Chandan Sharma, Rongpeng Zhang\n Reference: ASHRAE HVAC 2 Toolkit, page 2-3 (FANSIM)\n https://github.com/NREL/EnergyPlus/blob/d37252156cb0eef0cb9b1af5ce7dcd7423011649/src/EnergyPlus/Fans.cc#L1967-L1989\n This fan does not change the moisture or Mass Flow across the component Arguments Type Intent Optional Attributes Name integer, intent(in) :: Mode real, intent(in) :: MotEff real, intent(in) :: FanPower real, intent(in) :: MotInAirFrac real, intent(in) :: InletAirEnthalpy real, intent(in) :: AirMassFlowRate Return Value real","tags":"","loc":"module/minimaldxfan.html"},{"title":"PsychroWrapper – MinimalDX","text":"Wraps PsychroLib functions. Uses psychrolib EPlusPsychro module~~psychrowrapper~~UsesGraph module~psychrowrapper PsychroWrapper module~psychrolib psychrolib module~psychrowrapper->module~psychrolib module~epluspsychro EPlusPsychro module~psychrowrapper->module~epluspsychro Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~psychrowrapper~~UsedByGraph module~psychrowrapper PsychroWrapper proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->module~psychrowrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines InitPsychrometrics Subroutines public subroutine InitPsychrometrics () Arguments None","tags":"","loc":"module/psychrowrapper.html"},{"title":"psychrolib – MinimalDX","text":"Module overview\n  Contains functions for calculating thermodynamic properties of gas-vapor mixtures\n  and standard atmosphere suitable for most engineering, physical, and meteorological\n  applications. Most of the functions are an implementation of the formulae found in the\n  2017 ASHRAE Handbook - Fundamentals, in both International System (SI),\n  and Imperial (IP) units. Please refer to the information included in\n  each function for their respective reference. Example\n  use psychrolib, only: GetTDewPointFromRelHum, SetUnitSystem, SI\n  ! Set the unit system, for example to SI (can be either 'SI' or 'IP')\n  call SetUnitSystem(SI)\n  ! Calculate the dew point temperature for a dry bulb temperature of 25 C and a relative humidity of 80%\n  print *, GetTDewPointFromRelHum(25.0, 0.80)\n 21.3094 Copyright\n  - For the current library implementation\n     Copyright (c) 2018-2020 The PsychroLib Contributors.\n  - For equations and coefficients published ASHRAE Handbook — Fundamentals, Chapter 1\n     Copyright (c) 2017 ASHRAE Handbook — Fundamentals (https://www.ashrae.org) License\n  MIT (https://github.com/psychrometrics/psychrolib/LICENSE.txt) Note from the Authors\n  We have made every effort to ensure that the code is adequate, however, we make no\n  representation with respect to its accuracy. Use at your own risk. Should you notice\n  an error, or if you have a suggestion, please notify us through GitHub at\n  https://github.com/psychrometrics/psychrolib/issues. Used by module~~psychrolib~~UsedByGraph module~psychrolib psychrolib proc~psytsatfnhpb PsyTsatFnHPb proc~psytsatfnhpb->module~psychrolib module~psychrowrapper PsychroWrapper module~psychrowrapper->module~psychrolib proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->module~psychrowrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables ZERO_FAHRENHEIT_AS_RANKINE ZERO_CELSIUS_AS_KELVIN R_DA_IP R_DA_SI IP SI PSYCHROLIB_UNITS PSYCHROLIB_TOLERANCE MAX_ITER_COUNT MIN_HUM_RATIO FREEZING_POINT_WATER_IP FREEZING_POINT_WATER_SI TRIPLE_POINT_WATER_IP TRIPLE_POINT_WATER_SI Functions GetUnitSystem isIP GetTRankineFromTFahrenheit GetTFahrenheitFromTRankine GetTKelvinFromTCelsius GetTCelsiusFromTKelvin GetTWetBulbFromTDewPoint GetTWetBulbFromRelHum GetRelHumFromTDewPoint GetRelHumFromTWetBulb GetTDewPointFromRelHum GetTDewPointFromTWetBulb GetVapPresFromRelHum GetRelHumFromVapPres dLnPws_ GetTDewPointFromVapPres GetVapPresFromTDewPoint GetTWetBulbFromHumRatio GetHumRatioFromTWetBulb GetHumRatioFromRelHum GetRelHumFromHumRatio GetHumRatioFromTDewPoint GetTDewPointFromHumRatio GetHumRatioFromVapPres GetVapPresFromHumRatio GetSpecificHumFromHumRatio GetHumRatioFromSpecificHum GetDryAirEnthalpy GetDryAirDensity GetDryAirVolume GetTDryBulbFromEnthalpyAndHumRatio GetHumRatioFromEnthalpyAndTDryBulb GetSatVapPres GetSatHumRatio GetSatAirEnthalpy GetVaporPressureDeficit GetDegreeOfSaturation GetMoistAirEnthalpy GetMoistAirVolume GetTDryBulbFromMoistAirVolumeAndHumRatio GetMoistAirDensity GetStandardAtmPressure GetStandardAtmTemperature GetSeaLevelPressure GetStationPressure Subroutines SetUnitSystem CalcPsychrometricsFromTWetBulb CalcPsychrometricsFromTDewPoint CalcPsychrometricsFromRelHum Variables Type Visibility Attributes Name Initial real, private, parameter :: ZERO_FAHRENHEIT_AS_RANKINE = 459.67 Zero degree Fahrenheit (°F) expressed as degree Rankine (°R).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 39. real, private, parameter :: ZERO_CELSIUS_AS_KELVIN = 273.15 Zero degree Celsius (°C) expressed as Kelvin (K).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 39. real, private, parameter :: R_DA_IP = 53.350 Universal gas constant for dry air (IP version) in ft lb_Force lb_DryAir⁻¹ R⁻¹.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1. real, private, parameter :: R_DA_SI = 287.042 Universal gas constant for dry air (SI version) in J kg_DryAir⁻¹ K⁻¹.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1. integer, public, parameter :: IP = 1 integer, public, parameter :: SI = 2 integer, private :: PSYCHROLIB_UNITS = 0 Unit system to use. real, private :: PSYCHROLIB_TOLERANCE = 1.0 Tolerance of temperature calculations. integer, private, parameter :: MAX_ITER_COUNT = 100 Maximum number of iterations before exiting while loops. real, private, parameter :: MIN_HUM_RATIO = 1e-7 Minimum acceptable humidity ratio used/returned by any functions.\n Any value above 0 or below the MIN_HUM_RATIO will be reset to this value. real, private, parameter :: FREEZING_POINT_WATER_IP = 32.0 real, private, parameter :: FREEZING_POINT_WATER_SI = 0.0 real, private, parameter :: TRIPLE_POINT_WATER_IP = 32.018 real, private, parameter :: TRIPLE_POINT_WATER_SI = 0.01 Functions public function GetUnitSystem () result(UnitSystem) Return the system of units in use. Arguments None Return Value integer public function isIP () Check whether the system in use is IP or SI Arguments None Return Value logical public function GetTRankineFromTFahrenheit (TFahrenheit) result(TRankine) Utility function to convert temperature to degree Rankine (°R)\n given temperature in degree Fahrenheit (°F).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TFahrenheit Temperature in degree Fahrenheit Return Value real Temperature in degree Rankine public function GetTFahrenheitFromTRankine (TRankine) result(TFahrenheit) Utility function to convert temperature to degree Fahrenheit (°F)\n given temperature in degree Rankine (°R).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TRankine Temperature in degree Rankine Return Value real Temperature in degree Fahrenheit public function GetTKelvinFromTCelsius (TCelsius) result(TKelvin) Utility function to convert temperature to Kelvin (K)\n given temperature in degree Celsius (°C).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TCelsius Temperature in degree Celsius Return Value real Tempearatyre in Kelvin public function GetTCelsiusFromTKelvin (TKelvin) result(TCelsius) Utility function to convert temperature to degree Celsius (°C)\n given temperature in Kelvin (K).\n Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: TKelvin Tempearatyre in Kelvin Return Value real Temperature in degree Celsius public function GetTWetBulbFromTDewPoint (TDryBulb, TDewPoint, Pressure) result(TWetBulb) Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Wet-bulb temperature in °F [IP] or °C [SI] public function GetTWetBulbFromRelHum (TDryBulb, RelHum, Pressure) result(TWetBulb) Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Wet-bulb temperature in °F [IP] or °C [SI] public function GetRelHumFromTDewPoint (TDryBulb, TDewPoint) result(RelHum) Return relative humidity given dry-bulb temperature and dew-point temperature.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] Return Value real Relative humidity in range [0, 1] public function GetRelHumFromTWetBulb (TDryBulb, TWetBulb, Pressure) result(RelHum) Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Relative humidity in range [0, 1] public function GetTDewPointFromRelHum (TDryBulb, RelHum) result(TDewPoint) Return dew-point temperature given dry-bulb temperature and relative humidity.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] Return Value real Dew-point temperature in °F [IP] or °C [SI] public function GetTDewPointFromTWetBulb (TDryBulb, TWetBulb, Pressure) result(TDewPoint) Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dew-point temperature in °F [IP] or °C [SI] public function GetVapPresFromRelHum (TDryBulb, RelHum) result(VapPres) Return partial pressure of water vapor as a function of relative humidity and temperature.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] Return Value real Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] public function GetRelHumFromVapPres (TDryBulb, VapPres) result(RelHum) Return relative humidity given dry-bulb temperature and vapor pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] Return Value real Relative humidity in range [0, 1] public function dLnPws_ (TDryBulb) result(dLnPws) Helper function returning the derivative of the natural log of the saturation vapor pressure\n as a function of dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI] public function GetTDewPointFromVapPres (TDryBulb, VapPres) result(TDewPoint) Return dew-point temperature given dry-bulb temperature and vapor pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6\n Notes:\n The dew point temperature is solved by inverting the equation giving water vapor pressure\n at saturation from temperature rather than using the regressions provided\n by ASHRAE (eqn. 37 and 38) which are much less accurate and have a\n narrower range of validity.\n The Newton-Raphson (NR) method is used on the logarithm of water vapour\n pressure as a function of temperature, which is a very smooth function\n Convergence is usually achieved in 3 to 5 iterations.\n TDryBulb is not really needed here, just used for convenience. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] Return Value real Dew-point temperature in °F [IP] or °C [SI] public function GetVapPresFromTDewPoint (TDewPoint) result(VapPres) Return vapor pressure given dew point temperature.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] Return Value real Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] public function GetTWetBulbFromHumRatio (TDryBulb, HumRatio, Pressure) result(TWetBulb) Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Wet-bulb temperature in °F [IP] or °C [SI] public function GetHumRatioFromTWetBulb (TDryBulb, TWetBulb, Pressure) result(HumRatio) Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure.\n References:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] public function GetHumRatioFromRelHum (TDryBulb, RelHum, Pressure) result(HumRatio) Return humidity ratio given dry-bulb temperature, relative humidity, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] public function GetRelHumFromHumRatio (TDryBulb, HumRatio, Pressure) result(RelHum) Return relative humidity given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Relative humidity in range [0, 1] public function GetHumRatioFromTDewPoint (TDewPoint, Pressure) result(HumRatio) Return humidity ratio given dew-point temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] public function GetTDewPointFromHumRatio (TDryBulb, HumRatio, Pressure) result(TDewPoint) Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dew-point temperature in °F [IP] or °C [SI] public function GetHumRatioFromVapPres (VapPres, Pressure) result(HumRatio) Return humidity ratio given water vapor pressure and atmospheric pressure.\n Reference:\n ASHRAE Fundamentals (2005) ch. 6 eqn. 22;\n ASHRAE Fundamentals (2009) ch. 1 eqn. 22. Arguments Type Intent Optional Attributes Name real, intent(in) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] public function GetVapPresFromHumRatio (HumRatio, Pressure) result(VapPres) Return vapor pressure given humidity ratio and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] public function GetSpecificHumFromHumRatio (HumRatio) result(SpecificHum) Return the specific humidity from humidity ratio (aka mixing ratio).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] Return Value real Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] public function GetHumRatioFromSpecificHum (SpecificHum) result(HumRatio) Return the humidity ratio (aka mixing ratio) from specific humidity.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio) Arguments Type Intent Optional Attributes Name real, intent(in) :: SpecificHum Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Return Value real Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] public function GetDryAirEnthalpy (TDryBulb) result(DryAirEnthalpy) Return dry-air enthalpy given dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 28 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] public function GetDryAirDensity (TDryBulb, Pressure) result(DryAirDensity) Return dry-air density given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1\n Notes:\n Eqn 14 for the perfect gas relationship for dry air.\n Eqn 1 for the universal gas constant.\n The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI] public function GetDryAirVolume (TDryBulb, Pressure) result(DryAirVolume) Return dry-air volume given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1\n Notes:\n Eqn 14 for the perfect gas relationship for dry air.\n Eqn 1 for the universal gas constant.\n The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dry air volume in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] public function GetTDryBulbFromEnthalpyAndHumRatio (MoistAirEnthalpy, HumRatio) result(TDryBulb) Return dry bulb temperature from enthalpy and humidity ratio.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30\n Notes:\n Based on the GetMoistAirEnthalpy function, rearranged for temperature. Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Return Value real Dry-bulb temperature in °F [IP] or °C [SI] public function GetHumRatioFromEnthalpyAndTDryBulb (MoistAirEnthalpy, TDryBulb) result(HumRatio) Return humidity ratio from enthalpy and dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30\n Notes:\n Based on the GetMoistAirEnthalpy function, rearranged for humidity ratio. Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] public function GetSatVapPres (TDryBulb) result(SatVapPres) Return saturation vapor pressure given dry-bulb temperature.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5\n Important note: the ASHRAE formulae are defined above and below the freezing point but have\n a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae\n should be defined above and below the triple point of water (not the feezing point) in which case \n the discontinuity vanishes. It is essential to use the triple point of water otherwise function\n GetTDewPointFromVapPres, which inverts the present function, does not converge properly around\n the freezing point. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Vapor pressure of saturated air in Psi [IP] or Pa [SI] public function GetSatHumRatio (TDryBulb, Pressure) result(SatHumRatio) Return humidity ratio of saturated air given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] public function GetSatAirEnthalpy (TDryBulb, Pressure) result(SatAirEnthalpy) Return saturated air enthalpy given dry-bulb temperature and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] public function GetVaporPressureDeficit (TDryBulb, HumRatio, Pressure) result(VaporPressureDeficit) Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n Oke (1987) eqn 2.13a Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Vapor pressure deficit in Psi [IP] or Pa [SI] public function GetDegreeOfSaturation (TDryBulb, HumRatio, Pressure) result(DegreeOfSaturation) Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation\n at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn 12\n Notes:\n This definition is absent from the 2017 Handbook. Using 2009 version instead. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Degree of saturation in arbitrary unit public function GetMoistAirEnthalpy (TDryBulb, HumRatio) result(MoistAirEnthalpy) Return moist air enthalpy given dry-bulb temperature and humidity ratio.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] Return Value real Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ public function GetMoistAirVolume (TDryBulb, HumRatio, Pressure) result(MoistAirVolume) Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26\n Notes:\n In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] public function GetTDryBulbFromMoistAirVolumeAndHumRatio (MoistAirVolume, HumRatio, Pressure) result(TDryBulb) Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26\n Notes:\n In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻².\n Based on the GetMoistAirVolume function, rearranged for dry-bulb temperature. Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Dry-bulb temperature in °F [IP] or °C [SI] public function GetMoistAirDensity (TDryBulb, HumRatio, Pressure) result(MoistAirDensity) Return moist air density given humidity ratio, dry bulb temperature, and pressure.\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 11 Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] Return Value real Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI] public function GetStandardAtmPressure (Altitude) result(StandardAtmPressure) Return standard atmosphere barometric pressure, given the elevation (altitude).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3 Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] Return Value real Standard atmosphere barometric pressure in Psi [IP] or Pa [SI] public function GetStandardAtmTemperature (Altitude) result(StandardAtmTemperature) Return standard atmosphere temperature, given the elevation (altitude).\n Reference:\n ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4 Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] Return Value real Standard atmosphere dry-bulb temperature in °F [IP] or °C [SI] public function GetSeaLevelPressure (StnPressure, Altitude, TDryBulb) result(SeaLevelPressure) Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure.\n Reference:\n Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959,\n ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition,\n Brooks/Cole 2000, ch. 1.\n Notes:\n The standard procedure for the US is to use for TDryBulb the average\n of the current station temperature and the station temperature from 12 hours ago. Arguments Type Intent Optional Attributes Name real, intent(in) :: StnPressure Observed station pressure in Psi [IP] or Pa [SI] real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Sea level barometric pressure in Psi [IP] or Pa [SI] public function GetStationPressure (SeaLevelPressure, Altitude, TDryBulb) result(StationPressure) Return station pressure from sea level pressure.\n Reference:\n See 'GetSeaLevelPressure'\n Notes:\n This function is just the inverse of 'GetSeaLevelPressure'. Arguments Type Intent Optional Attributes Name real, intent(in) :: SeaLevelPressure Sea level barometric pressure in Psi [IP] or Pa [SI] real, intent(in) :: Altitude Altitude in ft [IP] or m [SI] real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] Return Value real Station pressure in Psi [IP] or Pa [SI] Subroutines public subroutine SetUnitSystem (UnitSystem) Set the system of units to use (SI or IP).\n Notes: this function HAS TO BE CALLED before the library can be used Arguments Type Intent Optional Attributes Name integer, intent(in) :: UnitSystem public subroutine CalcPsychrometricsFromTWetBulb (TDryBulb, TWetBulb, Pressure, HumRatio, TDewPoint, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Utility function to calculate humidity ratio, dew-point temperature, relative humidity,\n vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n dry-bulb temperature, wet-bulb temperature, and pressure. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] real, intent(out) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(out) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(out) :: RelHum Relative humidity in range [0, 1] real, intent(out) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(out) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real, intent(out) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real, intent(out) :: DegreeOfSaturation Degree of saturation [unitless] public subroutine CalcPsychrometricsFromTDewPoint (TDryBulb, TDewPoint, Pressure, HumRatio, TWetBulb, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity,\n vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n dry-bulb temperature, dew-point temperature, and pressure. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] real, intent(out) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(out) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(out) :: RelHum Relative humidity in range [0, 1] real, intent(out) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(out) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real, intent(out) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real, intent(out) :: DegreeOfSaturation Degree of saturation [unitless] public subroutine CalcPsychrometricsFromRelHum (TDryBulb, RelHum, Pressure, HumRatio, TWetBulb, TDewPoint, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature,\n vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n dry-bulb temperature, relative humidity and pressure. Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Dry-bulb temperature in °F [IP] or °C [SI] real, intent(in) :: RelHum Relative humidity in range [0, 1] real, intent(in) :: Pressure Atmospheric pressure in Psi [IP] or Pa [SI] real, intent(out) :: HumRatio Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real, intent(out) :: TWetBulb Wet-bulb temperature in °F [IP] or °C [SI] real, intent(out) :: TDewPoint Dew-point temperature in °F [IP] or °C [SI] real, intent(out) :: VapPres Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real, intent(out) :: MoistAirEnthalpy Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real, intent(out) :: MoistAirVolume Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real, intent(out) :: DegreeOfSaturation Degree of saturation [unitless]","tags":"","loc":"module/psychrolib.html"},{"title":"EPlusPsychro – MinimalDX","text":"Used by module~~epluspsychro~~UsedByGraph module~epluspsychro EPlusPsychro module~psychrowrapper PsychroWrapper module~psychrowrapper->module~epluspsychro proc~calcminimaldxcooling CalcMinimalDXCooling proc~calcminimaldxcooling->module~psychrowrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions PsyTsatFnHPb Functions public function PsyTsatFnHPb (H, PB, calledfrom) result(T) Arguments Type Intent Optional Attributes Name real, intent(in) :: H real, intent(in) :: PB character(len=*), intent(in), optional :: calledfrom Return Value real","tags":"","loc":"module/epluspsychro.html"}]}